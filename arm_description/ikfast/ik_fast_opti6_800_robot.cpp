/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2022-10-22 03:26:29.243582
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "/usr/local/lib/python2.7/dist-packages/openravepy/_openravepy_0_53/ikfast.h"
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION == 0x1000004b);

#include <algorithm>
#include <cmath>
#include <complex>
#include <limits>
#include <vector>

#ifndef IKFAST_ASSERT
#include <iostream>
#include <sstream>
#include <stdexcept>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b)                                                                                          \
  {                                                                                                               \
    if (!(b)) {                                                                                                   \
      std::stringstream ss;                                                                                       \
      ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " << __PRETTY_FUNCTION__ << ": Assertion '" \
         << #b << "' failed";                                                                                     \
      throw std::runtime_error(ss.str());                                                                         \
    }                                                                                                             \
  }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI ((IkReal)6.28318530717959)
#define IKPI ((IkReal)3.14159265358979)
#define IKPI_2 ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif  // _MSC_VER

// lapack routines
extern "C" {
void dgetrf_(const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
void zgetrf_(const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
void dgesv_(const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
void dgetrs_(const char* trans, const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b,
             const int* ldb, int* info);
void dgeev_(const char* jobvl, const char* jobvr, const int* n, double* a, const int* lda, double* wr, double* wi,
            double* vl, const int* ldvl, double* vr, const int* ldvr, double* work, const int* lwork, int* info);
}

using namespace std;  // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f * f; }
inline double IKsqr(double f) { return f * f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and
// evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they
// can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH \
  ((IkReal)0.03)  // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need
                  // good starting point
#endif

inline float IKasin(float f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return float(-IKPI_2);
  else if (f >= 1)
    return float(IKPI_2);
  return asinf(f);
}
inline double IKasin(double f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return -IKPI_2;
  else if (f >= 1)
    return IKPI_2;
  return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y) {
  while (x < 0) {
    x += y;
  }
  return fmodf(x, y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y) {
  while (x < 0) {
    x += y;
  }
  return fmod(x, y);
}

inline float IKacos(float f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return float(IKPI);
  else if (f >= 1)
    return float(0);
  return acosf(f);
}
inline double IKacos(double f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return IKPI;
  else if (f >= 1)
    return 0;
  return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) {
  if (f <= 0.0f) return 0.0f;
  return sqrtf(f);
}
inline double IKsqrt(double f) {
  if (f <= 0.0) return 0.0;
  return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx) { return atan2f(fy, fx); }
inline float IKatan2(float fy, float fx) {
  if (isnan(fy)) {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return float(IKPI_2);
  } else if (isnan(fx)) {
    return 0;
  }
  return atan2f(fy, fx);
}
inline double IKatan2Simple(double fy, double fx) { return atan2(fy, fx); }
inline double IKatan2(double fy, double fx) {
  if (isnan(fy)) {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return IKPI_2;
  } else if (isnan(fx)) {
    return 0;
  }
  return atan2(fy, fx);
}

template <typename T>
struct CheckValue {
  T value;
  bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon) {
  CheckValue<T> ret;
  ret.valid = false;
  ret.value = 0;
  if (!isnan(fy) && !isnan(fx)) {
    if (IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH) {
      ret.value = IKatan2Simple(fy, fx);
      ret.valid = true;
    }
  }
  return ret;
}

inline float IKsign(float f) {
  if (f > 0) {
    return float(1);
  } else if (f < 0) {
    return float(-1);
  }
  return 0;
}

inline double IKsign(double f) {
  if (f > 0) {
    return 1.0;
  } else if (f < 0) {
    return -1.0;
  }
  return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n) {
  CheckValue<T> ret;
  ret.valid = true;
  if (n == 0) {
    ret.value = 1.0;
    return ret;
  } else if (n == 1) {
    ret.value = f;
    return ret;
  } else if (n < 0) {
    if (f == 0) {
      ret.valid = false;
      ret.value = (T)1.0e30;
      return ret;
    }
    if (n == -1) {
      ret.value = T(1.0) / f;
      return ret;
    }
  }

  int num = n > 0 ? n : -n;
  if (num == 2) {
    ret.value = f * f;
  } else if (num == 3) {
    ret.value = f * f * f;
  } else {
    ret.value = 1.0;
    while (num > 0) {
      if (num & 1) {
        ret.value *= f;
      }
      num >>= 1;
      f *= f;
    }
  }

  if (n < 0) {
    ret.value = T(1.0) / ret.value;
  }
  return ret;
}

template <typename T>
struct ComplexLess {
  bool operator()(const complex<T>& lhs, const complex<T>& rhs) const {
    if (real(lhs) < real(rhs)) {
      return true;
    }
    if (real(lhs) > real(rhs)) {
      return false;
    }
    return imag(lhs) < imag(rhs);
  }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
  IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23,
      x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46,
      x47, x48;
  x0 = IKcos(j[0]);
  x1 = IKcos(j[1]);
  x2 = IKcos(j[2]);
  x3 = IKsin(j[1]);
  x4 = IKsin(j[2]);
  x5 = IKsin(j[3]);
  x6 = IKcos(j[3]);
  x7 = IKsin(j[0]);
  x8 = IKcos(j[5]);
  x9 = IKsin(j[5]);
  x10 = IKsin(j[4]);
  x11 = IKcos(j[4]);
  x12 = ((0.143) * x5);
  x13 = ((0.143) * x1);
  x14 = ((1.0) * x11);
  x15 = ((1.0) * x10);
  x16 = ((1.0) * x7);
  x17 = ((0.307) * x1);
  x18 = ((1.0) * x3);
  x19 = ((0.143) * x3);
  x20 = ((1.0) * x1);
  x21 = ((0.35) * x3);
  x22 = ((0.307) * x3);
  x23 = (x0 * x2);
  x24 = (x4 * x7);
  x25 = (x1 * x4);
  x26 = (x1 * x2);
  x27 = (x0 * x4);
  x28 = (x10 * x6);
  x29 = (x18 * x2);
  x30 = (x2 * x3 * x7);
  x31 = (x18 * x23);
  x32 = (x16 * x2 * x3);
  x33 = ((((-1.0) * x29)) + x25);
  x34 = (x29 + (((-1.0) * x20 * x4)));
  x35 = ((((-1.0) * x18 * x4)) + (((-1.0) * x2 * x20)));
  x36 = (((x18 * x4)) + ((x2 * x20)));
  x37 = (x33 * x6);
  x38 = (x34 * x5);
  x39 = ((((-1.0) * x31)) + ((x0 * x25)));
  x40 = (((x27 * x3)) + ((x1 * x23)));
  x41 = ((((-1.0) * x32)) + ((x1 * x24)));
  x42 = (((x26 * x7)) + ((x24 * x3)));
  x43 = (x40 * x6);
  x44 = (x42 * x6);
  x45 = ((((-1.0) * x16 * x5)) + x43);
  x46 = (((x0 * x5)) + x44);
  x47 = ((((-1.0) * x16 * x6)) + ((x5 * (((((-1.0) * x18 * x27)) + (((-1.0) * x20 * x23)))))));
  IkReal x49 = ((1.0) * x16);
  x48 = (((x0 * x6)) + ((x5 * (((((-1.0) * x3 * x4 * x49)) + (((-1.0) * x26 * x49)))))));
  eerot[0] = (((x47 * x9)) + ((x8 * ((((x10 * x39)) + ((x11 * x45)))))));
  eerot[1] = (((x47 * x8)) + ((x9 * (((((-1.0) * x14 * x45)) + (((-1.0) * x15 * x39)))))));
  eerot[2] = (((x10 * x45)) + ((x11 * ((x31 + (((-1.0) * x20 * x27)))))));
  IkReal x50 = ((1.0) * x27);
  eetrans[0] =
      (((x22 * x23)) + (((-1.0) * x17 * x50)) + ((x0 * x21)) + ((x11 * (((((-1.0) * x13 * x50)) + ((x19 * x23)))))) +
       ((x10 * (((((-1.0) * x12 * x7)) + (((0.143) * x43)))))));
  eerot[3] = (((x8 * ((((x10 * x41)) + ((x11 * x46)))))) + ((x48 * x9)));
  eerot[4] = (((x9 * (((((-1.0) * x15 * x41)) + (((-1.0) * x14 * x46)))))) + ((x48 * x8)));
  eerot[5] = (((x10 * x46)) + ((x11 * (((((-1.0) * x16 * x25)) + x32)))));
  IkReal x51 = ((1.0) * x24);
  IkReal x52 = (x2 * x7);
  eetrans[1] = ((((-1.0) * x17 * x51)) + ((x21 * x7)) + ((x11 * (((((-1.0) * x13 * x51)) + ((x19 * x52)))))) +
                ((x10 * ((((x0 * x12)) + (((0.143) * x44)))))) + ((x22 * x52)));
  eerot[6] = (((x8 * ((((x10 * x35)) + ((x11 * x37)))))) + ((x38 * x9)));
  eerot[7] = (((x9 * (((((-1.0) * x14 * x37)) + (((-1.0) * x15 * x35)))))) + ((x38 * x8)));
  eerot[8] = (((x28 * x33)) + ((x11 * x36)));
  eetrans[2] = ((0.278) + (((0.35) * x1)) + ((x22 * x4)) + ((x11 * ((((x19 * x4)) + ((x13 * x2)))))) +
                ((x28 * (((((-1.0) * x19 * x2)) + ((x13 * x4)))))) + ((x17 * x2)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
 public:
  IkReal j0, cj0, sj0, htj0, j0mul, j1, cj1, sj1, htj1, j1mul, j2, cj2, sj2, htj2, j2mul, j3, cj3, sj3, htj3, j3mul, j4,
      cj4, sj4, htj4, j4mul, j5, cj5, sj5, htj5, j5mul, new_r00, r00, rxp0_0, new_r01, r01, rxp0_1, new_r02, r02,
      rxp0_2, new_r10, r10, rxp1_0, new_r11, r11, rxp1_1, new_r12, r12, rxp1_2, new_r20, r20, rxp2_0, new_r21, r21,
      rxp2_1, new_r22, r22, rxp2_2, new_px, px, npx, new_py, py, npy, new_pz, pz, npz, pp;
  unsigned char _ij0[2], _nj0, _ij1[2], _nj1, _ij2[2], _nj2, _ij3[2], _nj3, _ij4[2], _nj4, _ij5[2], _nj5;

  IkReal j100, cj100, sj100;
  unsigned char _ij100[2], _nj100;
  bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                 IkSolutionListBase<IkReal>& solutions) {
    j0 = numeric_limits<IkReal>::quiet_NaN();
    _ij0[0] = -1;
    _ij0[1] = -1;
    _nj0 = -1;
    j1 = numeric_limits<IkReal>::quiet_NaN();
    _ij1[0] = -1;
    _ij1[1] = -1;
    _nj1 = -1;
    j2 = numeric_limits<IkReal>::quiet_NaN();
    _ij2[0] = -1;
    _ij2[1] = -1;
    _nj2 = -1;
    j3 = numeric_limits<IkReal>::quiet_NaN();
    _ij3[0] = -1;
    _ij3[1] = -1;
    _nj3 = -1;
    j4 = numeric_limits<IkReal>::quiet_NaN();
    _ij4[0] = -1;
    _ij4[1] = -1;
    _nj4 = -1;
    j5 = numeric_limits<IkReal>::quiet_NaN();
    _ij5[0] = -1;
    _ij5[1] = -1;
    _nj5 = -1;
    for (int dummyiter = 0; dummyiter < 1; ++dummyiter) {
      solutions.Clear();
      r00 = eerot[0 * 3 + 0];
      r01 = eerot[0 * 3 + 1];
      r02 = eerot[0 * 3 + 2];
      r10 = eerot[1 * 3 + 0];
      r11 = eerot[1 * 3 + 1];
      r12 = eerot[1 * 3 + 2];
      r20 = eerot[2 * 3 + 0];
      r21 = eerot[2 * 3 + 1];
      r22 = eerot[2 * 3 + 2];
      px = eetrans[0];
      py = eetrans[1];
      pz = eetrans[2];

      new_r00 = r00;
      new_r01 = r01;
      new_r02 = r02;
      new_px = (px + (((-0.143) * r02)));
      new_r10 = r10;
      new_r11 = r11;
      new_r12 = r12;
      new_py = (py + (((-0.143) * r12)));
      new_r20 = r20;
      new_r21 = r21;
      new_r22 = r22;
      new_pz = ((-0.278) + (((-0.143) * r22)) + pz);
      r00 = new_r00;
      r01 = new_r01;
      r02 = new_r02;
      r10 = new_r10;
      r11 = new_r11;
      r12 = new_r12;
      r20 = new_r20;
      r21 = new_r21;
      r22 = new_r22;
      px = new_px;
      py = new_py;
      pz = new_pz;
      IkReal x53 = ((1.0) * px);
      IkReal x54 = ((1.0) * pz);
      IkReal x55 = ((1.0) * py);
      pp = ((px * px) + (py * py) + (pz * pz));
      npx = (((px * r00)) + ((py * r10)) + ((pz * r20)));
      npy = (((px * r01)) + ((py * r11)) + ((pz * r21)));
      npz = (((px * r02)) + ((py * r12)) + ((pz * r22)));
      rxp0_0 = ((((-1.0) * r20 * x55)) + ((pz * r10)));
      rxp0_1 = (((px * r20)) + (((-1.0) * r00 * x54)));
      rxp0_2 = ((((-1.0) * r10 * x53)) + ((py * r00)));
      rxp1_0 = ((((-1.0) * r21 * x55)) + ((pz * r11)));
      rxp1_1 = (((px * r21)) + (((-1.0) * r01 * x54)));
      rxp1_2 = ((((-1.0) * r11 * x53)) + ((py * r01)));
      rxp2_0 = (((pz * r12)) + (((-1.0) * r22 * x55)));
      rxp2_1 = (((px * r22)) + (((-1.0) * r02 * x54)));
      rxp2_2 = ((((-1.0) * r12 * x53)) + ((py * r02)));
      {
        IkReal j2array[2], cj2array[2], sj2array[2];
        bool j2valid[2] = {false};
        _nj2 = 2;
        cj2array[0] = ((-1.00860400186133) + (((4.65332712889716) * pp)));
        if (cj2array[0] >= -1 - IKFAST_SINCOS_THRESH && cj2array[0] <= 1 + IKFAST_SINCOS_THRESH) {
          j2valid[0] = j2valid[1] = true;
          j2array[0] = IKacos(cj2array[0]);
          sj2array[0] = IKsin(j2array[0]);
          cj2array[1] = cj2array[0];
          j2array[1] = -j2array[0];
          sj2array[1] = -sj2array[0];
        } else if (isnan(cj2array[0])) {
          // probably any value will work
          j2valid[0] = true;
          cj2array[0] = 1;
          sj2array[0] = 0;
          j2array[0] = 0;
        }
        for (int ij2 = 0; ij2 < 2; ++ij2) {
          if (!j2valid[ij2]) {
            continue;
          }
          _ij2[0] = ij2;
          _ij2[1] = -1;
          for (int iij2 = ij2 + 1; iij2 < 2; ++iij2) {
            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
              j2valid[iij2] = false;
              _ij2[1] = iij2;
              break;
            }
          }
          j2 = j2array[ij2];
          cj2 = cj2array[ij2];
          sj2 = sj2array[ij2];

          {
            IkReal j0eval[1];
            j0eval[0] = ((IKabs(px)) + (IKabs(py)));
            if (IKabs(j0eval[0]) < 0.0000010000000000) {
              {
                IkReal j1eval[2];
                j1eval[0] = ((1.29974853844603) + (sj2 * sj2) + (cj2 * cj2) + (((2.28013029315961) * cj2)));
                j1eval[1] = ((IKabs(sj2)) + (((3.25732899022801) * (IKabs(((-0.35) + (((-0.307) * cj2))))))));
                if (IKabs(j1eval[0]) < 0.0000010000000000 || IKabs(j1eval[1]) < 0.0000010000000000) {
                  continue;  // no branches [j0, j1]

                } else {
                  {
                    IkReal j1array[2], cj1array[2], sj1array[2];
                    bool j1valid[2] = {false};
                    _nj1 = 2;
                    IkReal x56 = ((-0.35) + (((-0.307) * cj2)));
                    CheckValue<IkReal> x59 =
                        IKatan2WithCheck(IkReal(x56), IkReal(((-0.307) * sj2)), IKFAST_ATAN2_MAGTHRESH);
                    if (!x59.valid) {
                      continue;
                    }
                    IkReal x57 = ((1.0) * (x59.value));
                    if ((((((0.094249) * (sj2 * sj2))) + (x56 * x56))) < -0.00001) continue;
                    CheckValue<IkReal> x60 =
                        IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.094249) * (sj2 * sj2))) + (x56 * x56)))), -1);
                    if (!x60.valid) {
                      continue;
                    }
                    if (((pz * (x60.value))) < -1 - IKFAST_SINCOS_THRESH ||
                        ((pz * (x60.value))) > 1 + IKFAST_SINCOS_THRESH)
                      continue;
                    IkReal x58 = IKasin((pz * (x60.value)));
                    j1array[0] = ((((-1.0) * x57)) + (((-1.0) * x58)));
                    sj1array[0] = IKsin(j1array[0]);
                    cj1array[0] = IKcos(j1array[0]);
                    j1array[1] = ((3.14159265358979) + x58 + (((-1.0) * x57)));
                    sj1array[1] = IKsin(j1array[1]);
                    cj1array[1] = IKcos(j1array[1]);
                    if (j1array[0] > IKPI) {
                      j1array[0] -= IK2PI;
                    } else if (j1array[0] < -IKPI) {
                      j1array[0] += IK2PI;
                    }
                    j1valid[0] = true;
                    if (j1array[1] > IKPI) {
                      j1array[1] -= IK2PI;
                    } else if (j1array[1] < -IKPI) {
                      j1array[1] += IK2PI;
                    }
                    j1valid[1] = true;
                    for (int ij1 = 0; ij1 < 2; ++ij1) {
                      if (!j1valid[ij1]) {
                        continue;
                      }
                      _ij1[0] = ij1;
                      _ij1[1] = -1;
                      for (int iij1 = ij1 + 1; iij1 < 2; ++iij1) {
                        if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH &&
                            IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH) {
                          j1valid[iij1] = false;
                          _ij1[1] = iij1;
                          break;
                        }
                      }
                      j1 = j1array[ij1];
                      cj1 = cj1array[ij1];
                      sj1 = sj1array[ij1];

                      {
                        IkReal j0eval[3];
                        IkReal x61 = ((307.0) * sj2);
                        IkReal x62 = ((1000.0) * pz * sj1);
                        IkReal x63 = (((cj1 * pp)) + (((-1.0) * cj1 * (pz * pz))));
                        j0eval[0] = x63;
                        j0eval[1] = ((IKabs(((((-1.0) * py * x61)) + ((py * x62))))) +
                                     (IKabs(((((-1.0) * px * x61)) + ((px * x62))))));
                        j0eval[2] = IKsign(x63);
                        if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000 ||
                            IKabs(j0eval[2]) < 0.0000010000000000) {
                          {
                            IkReal j0eval[3];
                            IkReal x64 = ((307.0) * cj2);
                            IkReal x65 = ((1000.0) * cj1 * pz);
                            IkReal x66 = (((pp * sj1)) + (((-1.0) * sj1 * (pz * pz))));
                            j0eval[0] = x66;
                            j0eval[1] = ((IKabs(((((-1.0) * px * x65)) + ((px * x64)) + (((350.0) * px))))) +
                                         (IKabs(((((350.0) * py)) + (((-1.0) * py * x65)) + ((py * x64))))));
                            j0eval[2] = IKsign(x66);
                            if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000 ||
                                IKabs(j0eval[2]) < 0.0000010000000000) {
                              {
                                IkReal j0eval[3];
                                IkReal x67 = pz * pz;
                                IkReal x68 = ((1000000.0) * pp);
                                IkReal x69 = (pp * sj1);
                                IkReal x70 = (sj1 * x67);
                                IkReal x71 = ((700000.0) * cj1 * pz);
                                j0eval[0] = (x69 + (((-1.0) * x70)));
                                j0eval[1] = IKsign(((((7.0) * x69)) + (((-7.0) * x70))));
                                j0eval[2] = ((IKabs(((((28251.0) * py)) + (((-1.0) * py * x71)) + ((py * x68))))) +
                                             (IKabs(((((-1.0) * px * x71)) + ((px * x68)) + (((28251.0) * px))))));
                                if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000 ||
                                    IKabs(j0eval[2]) < 0.0000010000000000) {
                                  {
                                    IkReal evalcond[1];
                                    bool bgotonextstatement = true;
                                    do {
                                      evalcond[0] = ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                      if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                        bgotonextstatement = false;
                                        {
                                          IkReal j0eval[4];
                                          sj1 = 0;
                                          cj1 = 1.0;
                                          j1 = 0;
                                          IkReal x72 = pz * pz;
                                          j0eval[0] = ((((-1.0) * pp)) + x72);
                                          j0eval[1] = IKsign(((((-1000.0) * pp)) + (((1000.0) * x72))));
                                          j0eval[2] = 94249.0;
                                          j0eval[3] = sj2;
                                          if (IKabs(j0eval[0]) < 0.0000010000000000 ||
                                              IKabs(j0eval[1]) < 0.0000010000000000 ||
                                              IKabs(j0eval[2]) < 0.0000010000000000 ||
                                              IKabs(j0eval[3]) < 0.0000010000000000) {
                                            {
                                              IkReal evalcond[1];
                                              bool bgotonextstatement = true;
                                              do {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(j2))), 6.28318530717959)));
                                                if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j0eval[1];
                                                    sj1 = 0;
                                                    cj1 = 1.0;
                                                    j1 = 0;
                                                    sj2 = 0;
                                                    cj2 = 1.0;
                                                    j2 = 0;
                                                    j0eval[0] = ((IKabs(px)) + (IKabs(py)));
                                                    if (IKabs(j0eval[0]) < 0.0000010000000000) {
                                                      continue;  // no branches [j0]

                                                    } else {
                                                      {
                                                        IkReal j0array[2], cj0array[2], sj0array[2];
                                                        bool j0valid[2] = {false};
                                                        _nj0 = 2;
                                                        CheckValue<IkReal> x74 = IKatan2WithCheck(
                                                            IkReal(py), IkReal(((-1.0) * px)), IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x74.valid) {
                                                          continue;
                                                        }
                                                        IkReal x73 = x74.value;
                                                        j0array[0] = ((-1.0) * x73);
                                                        sj0array[0] = IKsin(j0array[0]);
                                                        cj0array[0] = IKcos(j0array[0]);
                                                        j0array[1] = ((3.14159265358979) + (((-1.0) * x73)));
                                                        sj0array[1] = IKsin(j0array[1]);
                                                        cj0array[1] = IKcos(j0array[1]);
                                                        if (j0array[0] > IKPI) {
                                                          j0array[0] -= IK2PI;
                                                        } else if (j0array[0] < -IKPI) {
                                                          j0array[0] += IK2PI;
                                                        }
                                                        j0valid[0] = true;
                                                        if (j0array[1] > IKPI) {
                                                          j0array[1] -= IK2PI;
                                                        } else if (j0array[1] < -IKPI) {
                                                          j0array[1] += IK2PI;
                                                        }
                                                        j0valid[1] = true;
                                                        for (int ij0 = 0; ij0 < 2; ++ij0) {
                                                          if (!j0valid[ij0]) {
                                                            continue;
                                                          }
                                                          _ij0[0] = ij0;
                                                          _ij0[1] = -1;
                                                          for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                                                            if (j0valid[iij0] &&
                                                                IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j0valid[iij0] = false;
                                                              _ij0[1] = iij0;
                                                              break;
                                                            }
                                                          }
                                                          j0 = j0array[ij0];
                                                          cj0 = cj0array[ij0];
                                                          sj0 = sj0array[ij0];
                                                          {
                                                            IkReal evalcond[1];
                                                            evalcond[0] = ((((-1.0) * py * (IKsin(j0)))) +
                                                                           (((-1.0) * px * (IKcos(j0)))));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH) {
                                                              continue;
                                                            }
                                                          }

                                                          rotationfunction0(solutions);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement) {
                                                bool bgotonextstatement = true;
                                                do {
                                                  evalcond[0] = ((-3.14159265358979) +
                                                                 (IKfmod(((3.14159265358979) +
                                                                          (IKabs(((-3.14159265358979) + j2)))),
                                                                         6.28318530717959)));
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j0eval[1];
                                                      sj1 = 0;
                                                      cj1 = 1.0;
                                                      j1 = 0;
                                                      sj2 = 0;
                                                      cj2 = -1.0;
                                                      j2 = 3.14159265358979;
                                                      j0eval[0] = ((IKabs(px)) + (IKabs(py)));
                                                      if (IKabs(j0eval[0]) < 0.0000010000000000) {
                                                        continue;  // no branches [j0]

                                                      } else {
                                                        {
                                                          IkReal j0array[2], cj0array[2], sj0array[2];
                                                          bool j0valid[2] = {false};
                                                          _nj0 = 2;
                                                          CheckValue<IkReal> x616 =
                                                              IKatan2WithCheck(IkReal(py), IkReal(((-1.0) * px)),
                                                                               IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x616.valid) {
                                                            continue;
                                                          }
                                                          IkReal x615 = x616.value;
                                                          j0array[0] = ((-1.0) * x615);
                                                          sj0array[0] = IKsin(j0array[0]);
                                                          cj0array[0] = IKcos(j0array[0]);
                                                          j0array[1] = ((3.14159265358979) + (((-1.0) * x615)));
                                                          sj0array[1] = IKsin(j0array[1]);
                                                          cj0array[1] = IKcos(j0array[1]);
                                                          if (j0array[0] > IKPI) {
                                                            j0array[0] -= IK2PI;
                                                          } else if (j0array[0] < -IKPI) {
                                                            j0array[0] += IK2PI;
                                                          }
                                                          j0valid[0] = true;
                                                          if (j0array[1] > IKPI) {
                                                            j0array[1] -= IK2PI;
                                                          } else if (j0array[1] < -IKPI) {
                                                            j0array[1] += IK2PI;
                                                          }
                                                          j0valid[1] = true;
                                                          for (int ij0 = 0; ij0 < 2; ++ij0) {
                                                            if (!j0valid[ij0]) {
                                                              continue;
                                                            }
                                                            _ij0[0] = ij0;
                                                            _ij0[1] = -1;
                                                            for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                                                              if (j0valid[iij0] &&
                                                                  IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j0valid[iij0] = false;
                                                                _ij0[1] = iij0;
                                                                break;
                                                              }
                                                            }
                                                            j0 = j0array[ij0];
                                                            cj0 = cj0array[ij0];
                                                            sj0 = sj0array[ij0];
                                                            {
                                                              IkReal evalcond[1];
                                                              evalcond[0] = ((((-1.0) * py * (IKsin(j0)))) +
                                                                             (((-1.0) * px * (IKcos(j0)))));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            rotationfunction0(solutions);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement) {
                                                  bool bgotonextstatement = true;
                                                  do {
                                                    if (1) {
                                                      bgotonextstatement = false;
                                                      continue;  // branch miss [j0]
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {
                                                  }
                                                }
                                              }
                                            }

                                          } else {
                                            {
                                              IkReal j0array[1], cj0array[1], sj0array[1];
                                              bool j0valid[1] = {false};
                                              _nj0 = 1;
                                              IkReal x617 = ((307.0) * sj2);
                                              CheckValue<IkReal> x618 = IKPowWithIntegerCheck(
                                                  IKsign(((((-1000.0) * pp)) + (((1000.0) * (pz * pz))))), -1);
                                              if (!x618.valid) {
                                                continue;
                                              }
                                              CheckValue<IkReal> x619 = IKatan2WithCheck(
                                                  IkReal((py * x617)), IkReal((px * x617)), IKFAST_ATAN2_MAGTHRESH);
                                              if (!x619.valid) {
                                                continue;
                                              }
                                              j0array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x618.value))) +
                                                            (x619.value));
                                              sj0array[0] = IKsin(j0array[0]);
                                              cj0array[0] = IKcos(j0array[0]);
                                              if (j0array[0] > IKPI) {
                                                j0array[0] -= IK2PI;
                                              } else if (j0array[0] < -IKPI) {
                                                j0array[0] += IK2PI;
                                              }
                                              j0valid[0] = true;
                                              for (int ij0 = 0; ij0 < 1; ++ij0) {
                                                if (!j0valid[ij0]) {
                                                  continue;
                                                }
                                                _ij0[0] = ij0;
                                                _ij0[1] = -1;
                                                for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                                  if (j0valid[iij0] &&
                                                      IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                                                    j0valid[iij0] = false;
                                                    _ij0[1] = iij0;
                                                    break;
                                                  }
                                                }
                                                j0 = j0array[ij0];
                                                cj0 = cj0array[ij0];
                                                sj0 = sj0array[ij0];
                                                {
                                                  IkReal evalcond[2];
                                                  IkReal x620 = IKcos(j0);
                                                  IkReal x621 = IKsin(j0);
                                                  IkReal x622 = ((1.0) * px);
                                                  evalcond[0] = (((py * x620)) + (((-1.0) * x621 * x622)));
                                                  evalcond[1] = ((((-1.0) * x620 * x622)) + (((-0.307) * sj2)) +
                                                                 (((-1.0) * py * x621)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH) {
                                                    continue;
                                                  }
                                                }

                                                rotationfunction0(solutions);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    } while (0);
                                    if (bgotonextstatement) {
                                      bool bgotonextstatement = true;
                                      do {
                                        evalcond[0] =
                                            ((-3.14159265358979) +
                                             (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))),
                                                     6.28318530717959)));
                                        if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                          bgotonextstatement = false;
                                          {
                                            IkReal j0eval[4];
                                            sj1 = 0;
                                            cj1 = -1.0;
                                            j1 = 3.14159265358979;
                                            IkReal x623 = pz * pz;
                                            j0eval[0] = (pp + (((-1.0) * x623)));
                                            j0eval[1] = 94249.0;
                                            j0eval[2] = sj2;
                                            j0eval[3] = IKsign(((((-1000.0) * x623)) + (((1000.0) * pp))));
                                            if (IKabs(j0eval[0]) < 0.0000010000000000 ||
                                                IKabs(j0eval[1]) < 0.0000010000000000 ||
                                                IKabs(j0eval[2]) < 0.0000010000000000 ||
                                                IKabs(j0eval[3]) < 0.0000010000000000) {
                                              {
                                                IkReal evalcond[1];
                                                bool bgotonextstatement = true;
                                                do {
                                                  evalcond[0] =
                                                      ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(j2))), 6.28318530717959)));
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j0eval[1];
                                                      sj1 = 0;
                                                      cj1 = -1.0;
                                                      j1 = 3.14159265358979;
                                                      sj2 = 0;
                                                      cj2 = 1.0;
                                                      j2 = 0;
                                                      j0eval[0] = ((IKabs(px)) + (IKabs(py)));
                                                      if (IKabs(j0eval[0]) < 0.0000010000000000) {
                                                        continue;  // no branches [j0]

                                                      } else {
                                                        {
                                                          IkReal j0array[2], cj0array[2], sj0array[2];
                                                          bool j0valid[2] = {false};
                                                          _nj0 = 2;
                                                          CheckValue<IkReal> x625 = IKatan2WithCheck(
                                                              IkReal(px), IkReal(py), IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x625.valid) {
                                                            continue;
                                                          }
                                                          IkReal x624 = x625.value;
                                                          j0array[0] = ((-1.0) * x624);
                                                          sj0array[0] = IKsin(j0array[0]);
                                                          cj0array[0] = IKcos(j0array[0]);
                                                          j0array[1] = ((3.14159265358979) + (((-1.0) * x624)));
                                                          sj0array[1] = IKsin(j0array[1]);
                                                          cj0array[1] = IKcos(j0array[1]);
                                                          if (j0array[0] > IKPI) {
                                                            j0array[0] -= IK2PI;
                                                          } else if (j0array[0] < -IKPI) {
                                                            j0array[0] += IK2PI;
                                                          }
                                                          j0valid[0] = true;
                                                          if (j0array[1] > IKPI) {
                                                            j0array[1] -= IK2PI;
                                                          } else if (j0array[1] < -IKPI) {
                                                            j0array[1] += IK2PI;
                                                          }
                                                          j0valid[1] = true;
                                                          for (int ij0 = 0; ij0 < 2; ++ij0) {
                                                            if (!j0valid[ij0]) {
                                                              continue;
                                                            }
                                                            _ij0[0] = ij0;
                                                            _ij0[1] = -1;
                                                            for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                                                              if (j0valid[iij0] &&
                                                                  IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j0valid[iij0] = false;
                                                                _ij0[1] = iij0;
                                                                break;
                                                              }
                                                            }
                                                            j0 = j0array[ij0];
                                                            cj0 = cj0array[ij0];
                                                            sj0 = sj0array[ij0];
                                                            {
                                                              IkReal evalcond[1];
                                                              evalcond[0] = ((((-1.0) * px * (IKsin(j0)))) +
                                                                             ((py * (IKcos(j0)))));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            rotationfunction0(solutions);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement) {
                                                  bool bgotonextstatement = true;
                                                  do {
                                                    evalcond[0] = ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-3.14159265358979) + j2)))),
                                                                           6.28318530717959)));
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                      bgotonextstatement = false;
                                                      {
                                                        IkReal j0eval[1];
                                                        sj1 = 0;
                                                        cj1 = -1.0;
                                                        j1 = 3.14159265358979;
                                                        sj2 = 0;
                                                        cj2 = -1.0;
                                                        j2 = 3.14159265358979;
                                                        j0eval[0] = ((IKabs(px)) + (IKabs(py)));
                                                        if (IKabs(j0eval[0]) < 0.0000010000000000) {
                                                          continue;  // no branches [j0]

                                                        } else {
                                                          {
                                                            IkReal j0array[2], cj0array[2], sj0array[2];
                                                            bool j0valid[2] = {false};
                                                            _nj0 = 2;
                                                            CheckValue<IkReal> x627 = IKatan2WithCheck(
                                                                IkReal(px), IkReal(py), IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x627.valid) {
                                                              continue;
                                                            }
                                                            IkReal x626 = x627.value;
                                                            j0array[0] = ((-1.0) * x626);
                                                            sj0array[0] = IKsin(j0array[0]);
                                                            cj0array[0] = IKcos(j0array[0]);
                                                            j0array[1] = ((3.14159265358979) + (((-1.0) * x626)));
                                                            sj0array[1] = IKsin(j0array[1]);
                                                            cj0array[1] = IKcos(j0array[1]);
                                                            if (j0array[0] > IKPI) {
                                                              j0array[0] -= IK2PI;
                                                            } else if (j0array[0] < -IKPI) {
                                                              j0array[0] += IK2PI;
                                                            }
                                                            j0valid[0] = true;
                                                            if (j0array[1] > IKPI) {
                                                              j0array[1] -= IK2PI;
                                                            } else if (j0array[1] < -IKPI) {
                                                              j0array[1] += IK2PI;
                                                            }
                                                            j0valid[1] = true;
                                                            for (int ij0 = 0; ij0 < 2; ++ij0) {
                                                              if (!j0valid[ij0]) {
                                                                continue;
                                                              }
                                                              _ij0[0] = ij0;
                                                              _ij0[1] = -1;
                                                              for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                                                                if (j0valid[iij0] &&
                                                                    IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                        IKFAST_SOLUTION_THRESH) {
                                                                  j0valid[iij0] = false;
                                                                  _ij0[1] = iij0;
                                                                  break;
                                                                }
                                                              }
                                                              j0 = j0array[ij0];
                                                              cj0 = cj0array[ij0];
                                                              sj0 = sj0array[ij0];
                                                              {
                                                                IkReal evalcond[1];
                                                                evalcond[0] = ((((-1.0) * px * (IKsin(j0)))) +
                                                                               ((py * (IKcos(j0)))));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH) {
                                                                  continue;
                                                                }
                                                              }

                                                              rotationfunction0(solutions);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {
                                                    bool bgotonextstatement = true;
                                                    do {
                                                      if (1) {
                                                        bgotonextstatement = false;
                                                        continue;  // branch miss [j0]
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement) {
                                                    }
                                                  }
                                                }
                                              }

                                            } else {
                                              {
                                                IkReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1] = {false};
                                                _nj0 = 1;
                                                IkReal x628 = ((307.0) * sj2);
                                                CheckValue<IkReal> x629 = IKatan2WithCheck(
                                                    IkReal((py * x628)), IkReal((px * x628)), IKFAST_ATAN2_MAGTHRESH);
                                                if (!x629.valid) {
                                                  continue;
                                                }
                                                CheckValue<IkReal> x630 = IKPowWithIntegerCheck(
                                                    IKsign(((((-1000.0) * (pz * pz))) + (((1000.0) * pp)))), -1);
                                                if (!x630.valid) {
                                                  continue;
                                                }
                                                j0array[0] = ((-1.5707963267949) + (x629.value) +
                                                              (((1.5707963267949) * (x630.value))));
                                                sj0array[0] = IKsin(j0array[0]);
                                                cj0array[0] = IKcos(j0array[0]);
                                                if (j0array[0] > IKPI) {
                                                  j0array[0] -= IK2PI;
                                                } else if (j0array[0] < -IKPI) {
                                                  j0array[0] += IK2PI;
                                                }
                                                j0valid[0] = true;
                                                for (int ij0 = 0; ij0 < 1; ++ij0) {
                                                  if (!j0valid[ij0]) {
                                                    continue;
                                                  }
                                                  _ij0[0] = ij0;
                                                  _ij0[1] = -1;
                                                  for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                                    if (j0valid[iij0] &&
                                                        IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                            IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                            IKFAST_SOLUTION_THRESH) {
                                                      j0valid[iij0] = false;
                                                      _ij0[1] = iij0;
                                                      break;
                                                    }
                                                  }
                                                  j0 = j0array[ij0];
                                                  cj0 = cj0array[ij0];
                                                  sj0 = sj0array[ij0];
                                                  {
                                                    IkReal evalcond[2];
                                                    IkReal x631 = IKsin(j0);
                                                    IkReal x632 = IKcos(j0);
                                                    evalcond[0] = (((py * x632)) + (((-1.0) * px * x631)));
                                                    evalcond[1] = (((py * x631)) + (((-0.307) * sj2)) + ((px * x632)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH) {
                                                      continue;
                                                    }
                                                  }

                                                  rotationfunction0(solutions);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      } while (0);
                                      if (bgotonextstatement) {
                                        bool bgotonextstatement = true;
                                        do {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))),
                                                       6.28318530717959)));
                                          if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j0eval[3];
                                              sj1 = 1.0;
                                              cj1 = 0;
                                              j1 = 1.5707963267949;
                                              IkReal x633 = ((1000000.0) * pp);
                                              IkReal x634 = (pp + (((-1.0) * (pz * pz))));
                                              j0eval[0] = x634;
                                              j0eval[1] = ((IKabs(((((28251.0) * px)) + ((px * x633))))) +
                                                           (IKabs((((py * x633)) + (((28251.0) * py))))));
                                              j0eval[2] = IKsign(x634);
                                              if (IKabs(j0eval[0]) < 0.0000010000000000 ||
                                                  IKabs(j0eval[1]) < 0.0000010000000000 ||
                                                  IKabs(j0eval[2]) < 0.0000010000000000) {
                                                {
                                                  IkReal j0eval[3];
                                                  sj1 = 1.0;
                                                  cj1 = 0;
                                                  j1 = 1.5707963267949;
                                                  IkReal x635 = pz * pz;
                                                  IkReal x636 = ((1000000.0) * pp);
                                                  j0eval[0] = ((((-1.0) * pp)) + x635);
                                                  j0eval[1] = ((IKabs(((((-28251.0) * py)) + (((-1.0) * py * x636))))) +
                                                               (IKabs(((((-28251.0) * px)) + (((-1.0) * px * x636))))));
                                                  j0eval[2] = IKsign(((((7.0) * x635)) + (((-7.0) * pp))));
                                                  if (IKabs(j0eval[0]) < 0.0000010000000000 ||
                                                      IKabs(j0eval[1]) < 0.0000010000000000 ||
                                                      IKabs(j0eval[2]) < 0.0000010000000000) {
                                                    continue;  // no branches [j0]

                                                  } else {
                                                    {
                                                      IkReal j0array[1], cj0array[1], sj0array[1];
                                                      bool j0valid[1] = {false};
                                                      _nj0 = 1;
                                                      IkReal x637 = ((10.0) * pp);
                                                      CheckValue<IkReal> x638 = IKatan2WithCheck(
                                                          IkReal(((((-0.28251) * py)) + (((-1.0) * py * x637)))),
                                                          IkReal(((((-1.0) * px * x637)) + (((-0.28251) * px)))),
                                                          IKFAST_ATAN2_MAGTHRESH);
                                                      if (!x638.valid) {
                                                        continue;
                                                      }
                                                      CheckValue<IkReal> x639 = IKPowWithIntegerCheck(
                                                          IKsign(((((-7.0) * pp)) + (((7.0) * (pz * pz))))), -1);
                                                      if (!x639.valid) {
                                                        continue;
                                                      }
                                                      j0array[0] = ((-1.5707963267949) + (x638.value) +
                                                                    (((1.5707963267949) * (x639.value))));
                                                      sj0array[0] = IKsin(j0array[0]);
                                                      cj0array[0] = IKcos(j0array[0]);
                                                      if (j0array[0] > IKPI) {
                                                        j0array[0] -= IK2PI;
                                                      } else if (j0array[0] < -IKPI) {
                                                        j0array[0] += IK2PI;
                                                      }
                                                      j0valid[0] = true;
                                                      for (int ij0 = 0; ij0 < 1; ++ij0) {
                                                        if (!j0valid[ij0]) {
                                                          continue;
                                                        }
                                                        _ij0[0] = ij0;
                                                        _ij0[1] = -1;
                                                        for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                                          if (j0valid[iij0] &&
                                                              IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                  IKFAST_SOLUTION_THRESH) {
                                                            j0valid[iij0] = false;
                                                            _ij0[1] = iij0;
                                                            break;
                                                          }
                                                        }
                                                        j0 = j0array[ij0];
                                                        cj0 = cj0array[ij0];
                                                        sj0 = sj0array[ij0];
                                                        {
                                                          IkReal evalcond[3];
                                                          IkReal x640 = IKcos(j0);
                                                          IkReal x641 = IKsin(j0);
                                                          IkReal x642 = ((1.0) * px);
                                                          IkReal x643 = (py * x641);
                                                          evalcond[0] = ((((-1.0) * x641 * x642)) + ((py * x640)));
                                                          evalcond[1] = ((-0.028251) + (((0.7) * x643)) +
                                                                         (((-1.0) * pp)) + (((0.7) * px * x640)));
                                                          evalcond[2] =
                                                              ((0.0403585714285714) + (((-1.0) * x643)) +
                                                               (((-1.0) * x640 * x642)) + (((1.42857142857143) * pp)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH) {
                                                            continue;
                                                          }
                                                        }

                                                        rotationfunction0(solutions);
                                                      }
                                                    }
                                                  }
                                                }

                                              } else {
                                                {
                                                  IkReal j0array[1], cj0array[1], sj0array[1];
                                                  bool j0valid[1] = {false};
                                                  _nj0 = 1;
                                                  IkReal x644 = ((1.42857142857143) * pp);
                                                  CheckValue<IkReal> x645 =
                                                      IKPowWithIntegerCheck(IKsign((pp + (((-1.0) * (pz * pz))))), -1);
                                                  if (!x645.valid) {
                                                    continue;
                                                  }
                                                  CheckValue<IkReal> x646 = IKatan2WithCheck(
                                                      IkReal((((py * x644)) + (((0.0403585714285714) * py)))),
                                                      IkReal((((px * x644)) + (((0.0403585714285714) * px)))),
                                                      IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x646.valid) {
                                                    continue;
                                                  }
                                                  j0array[0] = ((-1.5707963267949) +
                                                                (((1.5707963267949) * (x645.value))) + (x646.value));
                                                  sj0array[0] = IKsin(j0array[0]);
                                                  cj0array[0] = IKcos(j0array[0]);
                                                  if (j0array[0] > IKPI) {
                                                    j0array[0] -= IK2PI;
                                                  } else if (j0array[0] < -IKPI) {
                                                    j0array[0] += IK2PI;
                                                  }
                                                  j0valid[0] = true;
                                                  for (int ij0 = 0; ij0 < 1; ++ij0) {
                                                    if (!j0valid[ij0]) {
                                                      continue;
                                                    }
                                                    _ij0[0] = ij0;
                                                    _ij0[1] = -1;
                                                    for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                                      if (j0valid[iij0] &&
                                                          IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j0valid[iij0] = false;
                                                        _ij0[1] = iij0;
                                                        break;
                                                      }
                                                    }
                                                    j0 = j0array[ij0];
                                                    cj0 = cj0array[ij0];
                                                    sj0 = sj0array[ij0];
                                                    {
                                                      IkReal evalcond[3];
                                                      IkReal x647 = IKcos(j0);
                                                      IkReal x648 = IKsin(j0);
                                                      IkReal x649 = ((1.0) * px);
                                                      IkReal x650 = (py * x648);
                                                      evalcond[0] = (((py * x647)) + (((-1.0) * x648 * x649)));
                                                      evalcond[1] = ((-0.028251) + (((0.7) * x650)) + (((-1.0) * pp)) +
                                                                     (((0.7) * px * x647)));
                                                      evalcond[2] =
                                                          ((0.0403585714285714) + (((-1.0) * x650)) +
                                                           (((-1.0) * x647 * x649)) + (((1.42857142857143) * pp)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    rotationfunction0(solutions);
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement) {
                                          bool bgotonextstatement = true;
                                          do {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))),
                                                         6.28318530717959)));
                                            if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j0eval[3];
                                                sj1 = -1.0;
                                                cj1 = 0;
                                                j1 = -1.5707963267949;
                                                IkReal x651 = ((1000000.0) * pp);
                                                IkReal x652 = ((((-1.0) * pp)) + (pz * pz));
                                                j0eval[0] = x652;
                                                j0eval[1] = ((IKabs(((((28251.0) * px)) + ((px * x651))))) +
                                                             (IKabs((((py * x651)) + (((28251.0) * py))))));
                                                j0eval[2] = IKsign(x652);
                                                if (IKabs(j0eval[0]) < 0.0000010000000000 ||
                                                    IKabs(j0eval[1]) < 0.0000010000000000 ||
                                                    IKabs(j0eval[2]) < 0.0000010000000000) {
                                                  {
                                                    IkReal j0eval[3];
                                                    sj1 = -1.0;
                                                    cj1 = 0;
                                                    j1 = -1.5707963267949;
                                                    IkReal x653 = pz * pz;
                                                    IkReal x654 = ((1000000.0) * pp);
                                                    j0eval[0] = ((((-1.0) * x653)) + pp);
                                                    j0eval[1] =
                                                        ((IKabs(((((-28251.0) * py)) + (((-1.0) * py * x654))))) +
                                                         (IKabs(((((-1.0) * px * x654)) + (((-28251.0) * px))))));
                                                    j0eval[2] = IKsign(((((-7.0) * x653)) + (((7.0) * pp))));
                                                    if (IKabs(j0eval[0]) < 0.0000010000000000 ||
                                                        IKabs(j0eval[1]) < 0.0000010000000000 ||
                                                        IKabs(j0eval[2]) < 0.0000010000000000) {
                                                      continue;  // no branches [j0]

                                                    } else {
                                                      {
                                                        IkReal j0array[1], cj0array[1], sj0array[1];
                                                        bool j0valid[1] = {false};
                                                        _nj0 = 1;
                                                        IkReal x655 = ((10.0) * pp);
                                                        CheckValue<IkReal> x656 = IKatan2WithCheck(
                                                            IkReal(((((-1.0) * py * x655)) + (((-0.28251) * py)))),
                                                            IkReal(((((-1.0) * px * x655)) + (((-0.28251) * px)))),
                                                            IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x656.valid) {
                                                          continue;
                                                        }
                                                        CheckValue<IkReal> x657 = IKPowWithIntegerCheck(
                                                            IKsign(((((-7.0) * (pz * pz))) + (((7.0) * pp)))), -1);
                                                        if (!x657.valid) {
                                                          continue;
                                                        }
                                                        j0array[0] = ((-1.5707963267949) + (x656.value) +
                                                                      (((1.5707963267949) * (x657.value))));
                                                        sj0array[0] = IKsin(j0array[0]);
                                                        cj0array[0] = IKcos(j0array[0]);
                                                        if (j0array[0] > IKPI) {
                                                          j0array[0] -= IK2PI;
                                                        } else if (j0array[0] < -IKPI) {
                                                          j0array[0] += IK2PI;
                                                        }
                                                        j0valid[0] = true;
                                                        for (int ij0 = 0; ij0 < 1; ++ij0) {
                                                          if (!j0valid[ij0]) {
                                                            continue;
                                                          }
                                                          _ij0[0] = ij0;
                                                          _ij0[1] = -1;
                                                          for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                                            if (j0valid[iij0] &&
                                                                IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j0valid[iij0] = false;
                                                              _ij0[1] = iij0;
                                                              break;
                                                            }
                                                          }
                                                          j0 = j0array[ij0];
                                                          cj0 = cj0array[ij0];
                                                          sj0 = sj0array[ij0];
                                                          {
                                                            IkReal evalcond[3];
                                                            IkReal x658 = IKsin(j0);
                                                            IkReal x659 = IKcos(j0);
                                                            IkReal x660 = (py * x658);
                                                            IkReal x661 = (px * x659);
                                                            evalcond[0] = (((py * x659)) + (((-1.0) * px * x658)));
                                                            evalcond[1] = ((0.0403585714285714) + x661 + x660 +
                                                                           (((1.42857142857143) * pp)));
                                                            evalcond[2] = ((-0.028251) + (((-0.7) * x660)) +
                                                                           (((-0.7) * x661)) + (((-1.0) * pp)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH) {
                                                              continue;
                                                            }
                                                          }

                                                          rotationfunction0(solutions);
                                                        }
                                                      }
                                                    }
                                                  }

                                                } else {
                                                  {
                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                    bool j0valid[1] = {false};
                                                    _nj0 = 1;
                                                    IkReal x662 = ((1.42857142857143) * pp);
                                                    CheckValue<IkReal> x663 = IKPowWithIntegerCheck(
                                                        IKsign(((((-1.0) * pp)) + (pz * pz))), -1);
                                                    if (!x663.valid) {
                                                      continue;
                                                    }
                                                    CheckValue<IkReal> x664 = IKatan2WithCheck(
                                                        IkReal((((py * x662)) + (((0.0403585714285714) * py)))),
                                                        IkReal((((px * x662)) + (((0.0403585714285714) * px)))),
                                                        IKFAST_ATAN2_MAGTHRESH);
                                                    if (!x664.valid) {
                                                      continue;
                                                    }
                                                    j0array[0] = ((-1.5707963267949) +
                                                                  (((1.5707963267949) * (x663.value))) + (x664.value));
                                                    sj0array[0] = IKsin(j0array[0]);
                                                    cj0array[0] = IKcos(j0array[0]);
                                                    if (j0array[0] > IKPI) {
                                                      j0array[0] -= IK2PI;
                                                    } else if (j0array[0] < -IKPI) {
                                                      j0array[0] += IK2PI;
                                                    }
                                                    j0valid[0] = true;
                                                    for (int ij0 = 0; ij0 < 1; ++ij0) {
                                                      if (!j0valid[ij0]) {
                                                        continue;
                                                      }
                                                      _ij0[0] = ij0;
                                                      _ij0[1] = -1;
                                                      for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                                        if (j0valid[iij0] &&
                                                            IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                IKFAST_SOLUTION_THRESH) {
                                                          j0valid[iij0] = false;
                                                          _ij0[1] = iij0;
                                                          break;
                                                        }
                                                      }
                                                      j0 = j0array[ij0];
                                                      cj0 = cj0array[ij0];
                                                      sj0 = sj0array[ij0];
                                                      {
                                                        IkReal evalcond[3];
                                                        IkReal x665 = IKsin(j0);
                                                        IkReal x666 = IKcos(j0);
                                                        IkReal x667 = (py * x665);
                                                        IkReal x668 = (px * x666);
                                                        evalcond[0] = ((((-1.0) * px * x665)) + ((py * x666)));
                                                        evalcond[1] = ((0.0403585714285714) + x668 + x667 +
                                                                       (((1.42857142857143) * pp)));
                                                        evalcond[2] = ((-0.028251) + (((-0.7) * x668)) +
                                                                       (((-0.7) * x667)) + (((-1.0) * pp)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH) {
                                                          continue;
                                                        }
                                                      }

                                                      rotationfunction0(solutions);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement) {
                                            bool bgotonextstatement = true;
                                            do {
                                              evalcond[0] =
                                                  ((IKabs(pz)) +
                                                   (IKabs(((-3.14159265358979) +
                                                           (IKfmod(((3.14159265358979) + j2), 6.28318530717959))))));
                                              if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                bgotonextstatement = false;
                                                {
                                                  IkReal j0eval[3];
                                                  IkReal x669 = ((-1.0) * py);
                                                  pz = 0;
                                                  j2 = 0;
                                                  sj2 = 0;
                                                  cj2 = 1.0;
                                                  pp = ((px * px) + (py * py));
                                                  npx = (((px * r00)) + ((py * r10)));
                                                  npy = (((px * r01)) + ((py * r11)));
                                                  npz = (((px * r02)) + ((py * r12)));
                                                  rxp0_0 = (r20 * x669);
                                                  rxp0_1 = (px * r20);
                                                  rxp1_0 = (r21 * x669);
                                                  rxp1_1 = (px * r21);
                                                  rxp2_0 = (r22 * x669);
                                                  rxp2_1 = (px * r22);
                                                  IkReal x670 = px * px;
                                                  IkReal x671 = py * py;
                                                  IkReal x672 = (sj1 * x670);
                                                  IkReal x673 = (sj1 * x671);
                                                  j0eval[0] = (x672 + x673);
                                                  j0eval[1] = IKsign(((((1000.0) * x673)) + (((1000.0) * x672))));
                                                  j0eval[2] = ((IKabs(px)) + (IKabs(py)));
                                                  if (IKabs(j0eval[0]) < 0.0000010000000000 ||
                                                      IKabs(j0eval[1]) < 0.0000010000000000 ||
                                                      IKabs(j0eval[2]) < 0.0000010000000000) {
                                                    {
                                                      IkReal j0eval[4];
                                                      IkReal x674 = ((-1.0) * py);
                                                      pz = 0;
                                                      j2 = 0;
                                                      sj2 = 0;
                                                      cj2 = 1.0;
                                                      pp = ((px * px) + (py * py));
                                                      npx = (((px * r00)) + ((py * r10)));
                                                      npy = (((px * r01)) + ((py * r11)));
                                                      npz = (((px * r02)) + ((py * r12)));
                                                      rxp0_0 = (r20 * x674);
                                                      rxp0_1 = (px * r20);
                                                      rxp1_0 = (r21 * x674);
                                                      rxp1_1 = (px * r21);
                                                      rxp2_0 = (r22 * x674);
                                                      rxp2_1 = (px * r22);
                                                      IkReal x675 = py * py;
                                                      IkReal x676 = px * px;
                                                      j0eval[0] = (x676 + x675);
                                                      j0eval[1] = 431649.0;
                                                      j0eval[2] = sj1;
                                                      j0eval[3] = IKsign(((((1000.0) * x675)) + (((1000.0) * x676))));
                                                      if (IKabs(j0eval[0]) < 0.0000010000000000 ||
                                                          IKabs(j0eval[1]) < 0.0000010000000000 ||
                                                          IKabs(j0eval[2]) < 0.0000010000000000 ||
                                                          IKabs(j0eval[3]) < 0.0000010000000000) {
                                                        {
                                                          IkReal evalcond[1];
                                                          bool bgotonextstatement = true;
                                                          do {
                                                            evalcond[0] = ((-3.14159265358979) +
                                                                           (IKfmod(((3.14159265358979) + (IKabs(j1))),
                                                                                   6.28318530717959)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j0eval[1];
                                                                IkReal x677 = ((-1.0) * py);
                                                                pz = 0;
                                                                j2 = 0;
                                                                sj2 = 0;
                                                                cj2 = 1.0;
                                                                pp = ((px * px) + (py * py));
                                                                npx = (((px * r00)) + ((py * r10)));
                                                                npy = (((px * r01)) + ((py * r11)));
                                                                npz = (((px * r02)) + ((py * r12)));
                                                                rxp0_0 = (r20 * x677);
                                                                rxp0_1 = (px * r20);
                                                                rxp1_0 = (r21 * x677);
                                                                rxp1_1 = (px * r21);
                                                                rxp2_0 = (r22 * x677);
                                                                rxp2_1 = (px * r22);
                                                                sj1 = 0;
                                                                cj1 = 1.0;
                                                                j1 = 0;
                                                                j0eval[0] = ((IKabs(px)) + (IKabs(py)));
                                                                if (IKabs(j0eval[0]) < 0.0000010000000000) {
                                                                  continue;  // no branches [j0]

                                                                } else {
                                                                  {
                                                                    IkReal j0array[2], cj0array[2], sj0array[2];
                                                                    bool j0valid[2] = {false};
                                                                    _nj0 = 2;
                                                                    CheckValue<IkReal> x679 = IKatan2WithCheck(
                                                                        IkReal(py), IkReal(((-1.0) * px)),
                                                                        IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x679.valid) {
                                                                      continue;
                                                                    }
                                                                    IkReal x678 = x679.value;
                                                                    j0array[0] = ((-1.0) * x678);
                                                                    sj0array[0] = IKsin(j0array[0]);
                                                                    cj0array[0] = IKcos(j0array[0]);
                                                                    j0array[1] =
                                                                        ((3.14159265358979) + (((-1.0) * x678)));
                                                                    sj0array[1] = IKsin(j0array[1]);
                                                                    cj0array[1] = IKcos(j0array[1]);
                                                                    if (j0array[0] > IKPI) {
                                                                      j0array[0] -= IK2PI;
                                                                    } else if (j0array[0] < -IKPI) {
                                                                      j0array[0] += IK2PI;
                                                                    }
                                                                    j0valid[0] = true;
                                                                    if (j0array[1] > IKPI) {
                                                                      j0array[1] -= IK2PI;
                                                                    } else if (j0array[1] < -IKPI) {
                                                                      j0array[1] += IK2PI;
                                                                    }
                                                                    j0valid[1] = true;
                                                                    for (int ij0 = 0; ij0 < 2; ++ij0) {
                                                                      if (!j0valid[ij0]) {
                                                                        continue;
                                                                      }
                                                                      _ij0[0] = ij0;
                                                                      _ij0[1] = -1;
                                                                      for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                                                                        if (j0valid[iij0] &&
                                                                            IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                                IKFAST_SOLUTION_THRESH &&
                                                                            IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                                IKFAST_SOLUTION_THRESH) {
                                                                          j0valid[iij0] = false;
                                                                          _ij0[1] = iij0;
                                                                          break;
                                                                        }
                                                                      }
                                                                      j0 = j0array[ij0];
                                                                      cj0 = cj0array[ij0];
                                                                      sj0 = sj0array[ij0];
                                                                      {
                                                                        IkReal evalcond[1];
                                                                        evalcond[0] = ((((-1.0) * py * (IKsin(j0)))) +
                                                                                       (((-1.0) * px * (IKcos(j0)))));
                                                                        if (IKabs(evalcond[0]) >
                                                                            IKFAST_EVALCOND_THRESH) {
                                                                          continue;
                                                                        }
                                                                      }

                                                                      rotationfunction0(solutions);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement) {
                                                            bool bgotonextstatement = true;
                                                            do {
                                                              evalcond[0] =
                                                                  ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-3.14159265358979) + j1)))),
                                                                           6.28318530717959)));
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j0eval[1];
                                                                  IkReal x680 = ((-1.0) * py);
                                                                  pz = 0;
                                                                  j2 = 0;
                                                                  sj2 = 0;
                                                                  cj2 = 1.0;
                                                                  pp = ((px * px) + (py * py));
                                                                  npx = (((px * r00)) + ((py * r10)));
                                                                  npy = (((px * r01)) + ((py * r11)));
                                                                  npz = (((px * r02)) + ((py * r12)));
                                                                  rxp0_0 = (r20 * x680);
                                                                  rxp0_1 = (px * r20);
                                                                  rxp1_0 = (r21 * x680);
                                                                  rxp1_1 = (px * r21);
                                                                  rxp2_0 = (r22 * x680);
                                                                  rxp2_1 = (px * r22);
                                                                  sj1 = 0;
                                                                  cj1 = -1.0;
                                                                  j1 = 3.14159265358979;
                                                                  j0eval[0] = ((IKabs(px)) + (IKabs(py)));
                                                                  if (IKabs(j0eval[0]) < 0.0000010000000000) {
                                                                    continue;  // no branches [j0]

                                                                  } else {
                                                                    {
                                                                      IkReal j0array[2], cj0array[2], sj0array[2];
                                                                      bool j0valid[2] = {false};
                                                                      _nj0 = 2;
                                                                      CheckValue<IkReal> x682 = IKatan2WithCheck(
                                                                          IkReal(py), IkReal(((-1.0) * px)),
                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                      if (!x682.valid) {
                                                                        continue;
                                                                      }
                                                                      IkReal x681 = x682.value;
                                                                      j0array[0] = ((-1.0) * x681);
                                                                      sj0array[0] = IKsin(j0array[0]);
                                                                      cj0array[0] = IKcos(j0array[0]);
                                                                      j0array[1] =
                                                                          ((3.14159265358979) + (((-1.0) * x681)));
                                                                      sj0array[1] = IKsin(j0array[1]);
                                                                      cj0array[1] = IKcos(j0array[1]);
                                                                      if (j0array[0] > IKPI) {
                                                                        j0array[0] -= IK2PI;
                                                                      } else if (j0array[0] < -IKPI) {
                                                                        j0array[0] += IK2PI;
                                                                      }
                                                                      j0valid[0] = true;
                                                                      if (j0array[1] > IKPI) {
                                                                        j0array[1] -= IK2PI;
                                                                      } else if (j0array[1] < -IKPI) {
                                                                        j0array[1] += IK2PI;
                                                                      }
                                                                      j0valid[1] = true;
                                                                      for (int ij0 = 0; ij0 < 2; ++ij0) {
                                                                        if (!j0valid[ij0]) {
                                                                          continue;
                                                                        }
                                                                        _ij0[0] = ij0;
                                                                        _ij0[1] = -1;
                                                                        for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                                                                          if (j0valid[iij0] &&
                                                                              IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                                  IKFAST_SOLUTION_THRESH) {
                                                                            j0valid[iij0] = false;
                                                                            _ij0[1] = iij0;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j0 = j0array[ij0];
                                                                        cj0 = cj0array[ij0];
                                                                        sj0 = sj0array[ij0];
                                                                        {
                                                                          IkReal evalcond[1];
                                                                          evalcond[0] = ((((-1.0) * py * (IKsin(j0)))) +
                                                                                         (((-1.0) * px * (IKcos(j0)))));
                                                                          if (IKabs(evalcond[0]) >
                                                                              IKFAST_EVALCOND_THRESH) {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        rotationfunction0(solutions);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement) {
                                                              bool bgotonextstatement = true;
                                                              do {
                                                                if (1) {
                                                                  bgotonextstatement = false;
                                                                  continue;  // branch miss [j0]
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement) {
                                                              }
                                                            }
                                                          }
                                                        }

                                                      } else {
                                                        {
                                                          IkReal j0array[1], cj0array[1], sj0array[1];
                                                          bool j0valid[1] = {false};
                                                          _nj0 = 1;
                                                          IkReal x683 = ((657.0) * sj1);
                                                          CheckValue<IkReal> x684 =
                                                              IKPowWithIntegerCheck(IKsign(((((1000.0) * (py * py))) +
                                                                                            (((1000.0) * (px * px))))),
                                                                                    -1);
                                                          if (!x684.valid) {
                                                            continue;
                                                          }
                                                          CheckValue<IkReal> x685 =
                                                              IKatan2WithCheck(IkReal((py * x683)), IkReal((px * x683)),
                                                                               IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x685.valid) {
                                                            continue;
                                                          }
                                                          j0array[0] =
                                                              ((-1.5707963267949) +
                                                               (((1.5707963267949) * (x684.value))) + (x685.value));
                                                          sj0array[0] = IKsin(j0array[0]);
                                                          cj0array[0] = IKcos(j0array[0]);
                                                          if (j0array[0] > IKPI) {
                                                            j0array[0] -= IK2PI;
                                                          } else if (j0array[0] < -IKPI) {
                                                            j0array[0] += IK2PI;
                                                          }
                                                          j0valid[0] = true;
                                                          for (int ij0 = 0; ij0 < 1; ++ij0) {
                                                            if (!j0valid[ij0]) {
                                                              continue;
                                                            }
                                                            _ij0[0] = ij0;
                                                            _ij0[1] = -1;
                                                            for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                                              if (j0valid[iij0] &&
                                                                  IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j0valid[iij0] = false;
                                                                _ij0[1] = iij0;
                                                                break;
                                                              }
                                                            }
                                                            j0 = j0array[ij0];
                                                            cj0 = cj0array[ij0];
                                                            sj0 = sj0array[ij0];
                                                            {
                                                              IkReal evalcond[4];
                                                              IkReal x686 = IKcos(j0);
                                                              IkReal x687 = IKsin(j0);
                                                              IkReal x688 = ((0.7) * sj1);
                                                              IkReal x689 = ((1.0) * x687);
                                                              IkReal x690 = ((1.0) * px * x686);
                                                              evalcond[0] = ((((-1.0) * px * x689)) + ((py * x686)));
                                                              evalcond[1] = ((-0.4599) + ((px * x686 * x688)) +
                                                                             ((py * x687 * x688)));
                                                              evalcond[2] = ((0.657) + (((-1.0) * sj1 * x690)) +
                                                                             (((-1.0) * py * sj1 * x689)));
                                                              evalcond[3] =
                                                                  ((((-1.0) * x690)) + (((-1.0) * py * x689)) +
                                                                   (((0.657) * sj1)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            rotationfunction0(solutions);
                                                          }
                                                        }
                                                      }
                                                    }

                                                  } else {
                                                    {
                                                      IkReal j0array[1], cj0array[1], sj0array[1];
                                                      bool j0valid[1] = {false};
                                                      _nj0 = 1;
                                                      IkReal x691 = ((1000.0) * sj1);
                                                      CheckValue<IkReal> x692 = IKatan2WithCheck(
                                                          IkReal(((657.0) * py)), IkReal(((657.0) * px)),
                                                          IKFAST_ATAN2_MAGTHRESH);
                                                      if (!x692.valid) {
                                                        continue;
                                                      }
                                                      CheckValue<IkReal> x693 = IKPowWithIntegerCheck(
                                                          IKsign((((x691 * (py * py))) + ((x691 * (px * px))))), -1);
                                                      if (!x693.valid) {
                                                        continue;
                                                      }
                                                      j0array[0] = ((-1.5707963267949) + (x692.value) +
                                                                    (((1.5707963267949) * (x693.value))));
                                                      sj0array[0] = IKsin(j0array[0]);
                                                      cj0array[0] = IKcos(j0array[0]);
                                                      if (j0array[0] > IKPI) {
                                                        j0array[0] -= IK2PI;
                                                      } else if (j0array[0] < -IKPI) {
                                                        j0array[0] += IK2PI;
                                                      }
                                                      j0valid[0] = true;
                                                      for (int ij0 = 0; ij0 < 1; ++ij0) {
                                                        if (!j0valid[ij0]) {
                                                          continue;
                                                        }
                                                        _ij0[0] = ij0;
                                                        _ij0[1] = -1;
                                                        for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                                          if (j0valid[iij0] &&
                                                              IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                  IKFAST_SOLUTION_THRESH) {
                                                            j0valid[iij0] = false;
                                                            _ij0[1] = iij0;
                                                            break;
                                                          }
                                                        }
                                                        j0 = j0array[ij0];
                                                        cj0 = cj0array[ij0];
                                                        sj0 = sj0array[ij0];
                                                        {
                                                          IkReal evalcond[4];
                                                          IkReal x694 = IKcos(j0);
                                                          IkReal x695 = IKsin(j0);
                                                          IkReal x696 = ((0.7) * sj1);
                                                          IkReal x697 = ((1.0) * x695);
                                                          IkReal x698 = ((1.0) * px * x694);
                                                          evalcond[0] = (((py * x694)) + (((-1.0) * px * x697)));
                                                          evalcond[1] =
                                                              ((-0.4599) + ((px * x694 * x696)) + ((py * x695 * x696)));
                                                          evalcond[2] = ((0.657) + (((-1.0) * sj1 * x698)) +
                                                                         (((-1.0) * py * sj1 * x697)));
                                                          evalcond[3] = ((((-1.0) * x698)) + (((-1.0) * py * x697)) +
                                                                         (((0.657) * sj1)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                            continue;
                                                          }
                                                        }

                                                        rotationfunction0(solutions);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            } while (0);
                                            if (bgotonextstatement) {
                                              bool bgotonextstatement = true;
                                              do {
                                                evalcond[0] =
                                                    ((IKabs(pz)) +
                                                     (IKabs(((-3.14159265358979) + (IKfmod(j2, 6.28318530717959))))));
                                                if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j0eval[3];
                                                    IkReal x699 = ((-1.0) * py);
                                                    pz = 0;
                                                    j2 = 3.14159265358979;
                                                    sj2 = 0;
                                                    cj2 = -1.0;
                                                    pp = ((px * px) + (py * py));
                                                    npx = (((px * r00)) + ((py * r10)));
                                                    npy = (((px * r01)) + ((py * r11)));
                                                    npz = (((px * r02)) + ((py * r12)));
                                                    rxp0_0 = (r20 * x699);
                                                    rxp0_1 = (px * r20);
                                                    rxp1_0 = (r21 * x699);
                                                    rxp1_1 = (px * r21);
                                                    rxp2_0 = (r22 * x699);
                                                    rxp2_1 = (px * r22);
                                                    IkReal x700 = px * px;
                                                    IkReal x701 = py * py;
                                                    IkReal x702 = (sj1 * x700);
                                                    IkReal x703 = (sj1 * x701);
                                                    j0eval[0] = (x702 + x703);
                                                    j0eval[1] = ((IKabs(px)) + (IKabs(py)));
                                                    j0eval[2] = IKsign(((((1000.0) * x703)) + (((1000.0) * x702))));
                                                    if (IKabs(j0eval[0]) < 0.0000010000000000 ||
                                                        IKabs(j0eval[1]) < 0.0000010000000000 ||
                                                        IKabs(j0eval[2]) < 0.0000010000000000) {
                                                      {
                                                        IkReal j0eval[4];
                                                        IkReal x704 = ((-1.0) * py);
                                                        pz = 0;
                                                        j2 = 3.14159265358979;
                                                        sj2 = 0;
                                                        cj2 = -1.0;
                                                        pp = ((px * px) + (py * py));
                                                        npx = (((px * r00)) + ((py * r10)));
                                                        npy = (((px * r01)) + ((py * r11)));
                                                        npz = (((px * r02)) + ((py * r12)));
                                                        rxp0_0 = (r20 * x704);
                                                        rxp0_1 = (px * r20);
                                                        rxp1_0 = (r21 * x704);
                                                        rxp1_1 = (px * r21);
                                                        rxp2_0 = (r22 * x704);
                                                        rxp2_1 = (px * r22);
                                                        IkReal x705 = py * py;
                                                        IkReal x706 = px * px;
                                                        j0eval[0] = (x706 + x705);
                                                        j0eval[1] = 1849.0;
                                                        j0eval[2] = sj1;
                                                        j0eval[3] = IKsign(((((1000.0) * x705)) + (((1000.0) * x706))));
                                                        if (IKabs(j0eval[0]) < 0.0000010000000000 ||
                                                            IKabs(j0eval[1]) < 0.0000010000000000 ||
                                                            IKabs(j0eval[2]) < 0.0000010000000000 ||
                                                            IKabs(j0eval[3]) < 0.0000010000000000) {
                                                          {
                                                            IkReal evalcond[1];
                                                            bool bgotonextstatement = true;
                                                            do {
                                                              evalcond[0] = ((-3.14159265358979) +
                                                                             (IKfmod(((3.14159265358979) + (IKabs(j1))),
                                                                                     6.28318530717959)));
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j0eval[1];
                                                                  IkReal x707 = ((-1.0) * py);
                                                                  pz = 0;
                                                                  j2 = 3.14159265358979;
                                                                  sj2 = 0;
                                                                  cj2 = -1.0;
                                                                  pp = ((px * px) + (py * py));
                                                                  npx = (((px * r00)) + ((py * r10)));
                                                                  npy = (((px * r01)) + ((py * r11)));
                                                                  npz = (((px * r02)) + ((py * r12)));
                                                                  rxp0_0 = (r20 * x707);
                                                                  rxp0_1 = (px * r20);
                                                                  rxp1_0 = (r21 * x707);
                                                                  rxp1_1 = (px * r21);
                                                                  rxp2_0 = (r22 * x707);
                                                                  rxp2_1 = (px * r22);
                                                                  sj1 = 0;
                                                                  cj1 = 1.0;
                                                                  j1 = 0;
                                                                  j0eval[0] = ((IKabs(px)) + (IKabs(py)));
                                                                  if (IKabs(j0eval[0]) < 0.0000010000000000) {
                                                                    continue;  // no branches [j0]

                                                                  } else {
                                                                    {
                                                                      IkReal j0array[2], cj0array[2], sj0array[2];
                                                                      bool j0valid[2] = {false};
                                                                      _nj0 = 2;
                                                                      CheckValue<IkReal> x709 = IKatan2WithCheck(
                                                                          IkReal(py), IkReal(((-1.0) * px)),
                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                      if (!x709.valid) {
                                                                        continue;
                                                                      }
                                                                      IkReal x708 = x709.value;
                                                                      j0array[0] = ((-1.0) * x708);
                                                                      sj0array[0] = IKsin(j0array[0]);
                                                                      cj0array[0] = IKcos(j0array[0]);
                                                                      j0array[1] =
                                                                          ((3.14159265358979) + (((-1.0) * x708)));
                                                                      sj0array[1] = IKsin(j0array[1]);
                                                                      cj0array[1] = IKcos(j0array[1]);
                                                                      if (j0array[0] > IKPI) {
                                                                        j0array[0] -= IK2PI;
                                                                      } else if (j0array[0] < -IKPI) {
                                                                        j0array[0] += IK2PI;
                                                                      }
                                                                      j0valid[0] = true;
                                                                      if (j0array[1] > IKPI) {
                                                                        j0array[1] -= IK2PI;
                                                                      } else if (j0array[1] < -IKPI) {
                                                                        j0array[1] += IK2PI;
                                                                      }
                                                                      j0valid[1] = true;
                                                                      for (int ij0 = 0; ij0 < 2; ++ij0) {
                                                                        if (!j0valid[ij0]) {
                                                                          continue;
                                                                        }
                                                                        _ij0[0] = ij0;
                                                                        _ij0[1] = -1;
                                                                        for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                                                                          if (j0valid[iij0] &&
                                                                              IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                                  IKFAST_SOLUTION_THRESH) {
                                                                            j0valid[iij0] = false;
                                                                            _ij0[1] = iij0;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j0 = j0array[ij0];
                                                                        cj0 = cj0array[ij0];
                                                                        sj0 = sj0array[ij0];
                                                                        {
                                                                          IkReal evalcond[1];
                                                                          evalcond[0] = ((((-1.0) * py * (IKsin(j0)))) +
                                                                                         (((-1.0) * px * (IKcos(j0)))));
                                                                          if (IKabs(evalcond[0]) >
                                                                              IKFAST_EVALCOND_THRESH) {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        rotationfunction0(solutions);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement) {
                                                              bool bgotonextstatement = true;
                                                              do {
                                                                evalcond[0] =
                                                                    ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((-3.14159265358979) + j1)))),
                                                                             6.28318530717959)));
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j0eval[1];
                                                                    IkReal x710 = ((-1.0) * py);
                                                                    pz = 0;
                                                                    j2 = 3.14159265358979;
                                                                    sj2 = 0;
                                                                    cj2 = -1.0;
                                                                    pp = ((px * px) + (py * py));
                                                                    npx = (((px * r00)) + ((py * r10)));
                                                                    npy = (((px * r01)) + ((py * r11)));
                                                                    npz = (((px * r02)) + ((py * r12)));
                                                                    rxp0_0 = (r20 * x710);
                                                                    rxp0_1 = (px * r20);
                                                                    rxp1_0 = (r21 * x710);
                                                                    rxp1_1 = (px * r21);
                                                                    rxp2_0 = (r22 * x710);
                                                                    rxp2_1 = (px * r22);
                                                                    sj1 = 0;
                                                                    cj1 = -1.0;
                                                                    j1 = 3.14159265358979;
                                                                    j0eval[0] = ((IKabs(px)) + (IKabs(py)));
                                                                    if (IKabs(j0eval[0]) < 0.0000010000000000) {
                                                                      continue;  // no branches [j0]

                                                                    } else {
                                                                      {
                                                                        IkReal j0array[2], cj0array[2], sj0array[2];
                                                                        bool j0valid[2] = {false};
                                                                        _nj0 = 2;
                                                                        CheckValue<IkReal> x712 = IKatan2WithCheck(
                                                                            IkReal(py), IkReal(((-1.0) * px)),
                                                                            IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x712.valid) {
                                                                          continue;
                                                                        }
                                                                        IkReal x711 = x712.value;
                                                                        j0array[0] = ((-1.0) * x711);
                                                                        sj0array[0] = IKsin(j0array[0]);
                                                                        cj0array[0] = IKcos(j0array[0]);
                                                                        j0array[1] =
                                                                            ((3.14159265358979) + (((-1.0) * x711)));
                                                                        sj0array[1] = IKsin(j0array[1]);
                                                                        cj0array[1] = IKcos(j0array[1]);
                                                                        if (j0array[0] > IKPI) {
                                                                          j0array[0] -= IK2PI;
                                                                        } else if (j0array[0] < -IKPI) {
                                                                          j0array[0] += IK2PI;
                                                                        }
                                                                        j0valid[0] = true;
                                                                        if (j0array[1] > IKPI) {
                                                                          j0array[1] -= IK2PI;
                                                                        } else if (j0array[1] < -IKPI) {
                                                                          j0array[1] += IK2PI;
                                                                        }
                                                                        j0valid[1] = true;
                                                                        for (int ij0 = 0; ij0 < 2; ++ij0) {
                                                                          if (!j0valid[ij0]) {
                                                                            continue;
                                                                          }
                                                                          _ij0[0] = ij0;
                                                                          _ij0[1] = -1;
                                                                          for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                                                                            if (j0valid[iij0] &&
                                                                                IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                                    IKFAST_SOLUTION_THRESH) {
                                                                              j0valid[iij0] = false;
                                                                              _ij0[1] = iij0;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j0 = j0array[ij0];
                                                                          cj0 = cj0array[ij0];
                                                                          sj0 = sj0array[ij0];
                                                                          {
                                                                            IkReal evalcond[1];
                                                                            evalcond[0] =
                                                                                ((((-1.0) * py * (IKsin(j0)))) +
                                                                                 (((-1.0) * px * (IKcos(j0)))));
                                                                            if (IKabs(evalcond[0]) >
                                                                                IKFAST_EVALCOND_THRESH) {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          rotationfunction0(solutions);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement) {
                                                                bool bgotonextstatement = true;
                                                                do {
                                                                  if (1) {
                                                                    bgotonextstatement = false;
                                                                    continue;  // branch miss [j0]
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement) {
                                                                }
                                                              }
                                                            }
                                                          }

                                                        } else {
                                                          {
                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1] = {false};
                                                            _nj0 = 1;
                                                            IkReal x713 = ((43.0) * sj1);
                                                            CheckValue<IkReal> x714 = IKPowWithIntegerCheck(
                                                                IKsign(((((1000.0) * (py * py))) +
                                                                        (((1000.0) * (px * px))))),
                                                                -1);
                                                            if (!x714.valid) {
                                                              continue;
                                                            }
                                                            CheckValue<IkReal> x715 = IKatan2WithCheck(
                                                                IkReal((py * x713)), IkReal((px * x713)),
                                                                IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x715.valid) {
                                                              continue;
                                                            }
                                                            j0array[0] =
                                                                ((-1.5707963267949) +
                                                                 (((1.5707963267949) * (x714.value))) + (x715.value));
                                                            sj0array[0] = IKsin(j0array[0]);
                                                            cj0array[0] = IKcos(j0array[0]);
                                                            if (j0array[0] > IKPI) {
                                                              j0array[0] -= IK2PI;
                                                            } else if (j0array[0] < -IKPI) {
                                                              j0array[0] += IK2PI;
                                                            }
                                                            j0valid[0] = true;
                                                            for (int ij0 = 0; ij0 < 1; ++ij0) {
                                                              if (!j0valid[ij0]) {
                                                                continue;
                                                              }
                                                              _ij0[0] = ij0;
                                                              _ij0[1] = -1;
                                                              for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                                                if (j0valid[iij0] &&
                                                                    IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                        IKFAST_SOLUTION_THRESH) {
                                                                  j0valid[iij0] = false;
                                                                  _ij0[1] = iij0;
                                                                  break;
                                                                }
                                                              }
                                                              j0 = j0array[ij0];
                                                              cj0 = cj0array[ij0];
                                                              sj0 = sj0array[ij0];
                                                              {
                                                                IkReal evalcond[4];
                                                                IkReal x716 = IKcos(j0);
                                                                IkReal x717 = IKsin(j0);
                                                                IkReal x718 = ((0.7) * sj1);
                                                                IkReal x719 = ((1.0) * x717);
                                                                IkReal x720 = ((1.0) * px * x716);
                                                                evalcond[0] = ((((-1.0) * px * x719)) + ((py * x716)));
                                                                evalcond[1] = ((-0.0301) + ((px * x716 * x718)) +
                                                                               ((py * x717 * x718)));
                                                                evalcond[2] = ((0.043) + (((-1.0) * py * sj1 * x719)) +
                                                                               (((-1.0) * sj1 * x720)));
                                                                evalcond[3] = ((((0.043) * sj1)) + (((-1.0) * x720)) +
                                                                               (((-1.0) * py * x719)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                  continue;
                                                                }
                                                              }

                                                              rotationfunction0(solutions);
                                                            }
                                                          }
                                                        }
                                                      }

                                                    } else {
                                                      {
                                                        IkReal j0array[1], cj0array[1], sj0array[1];
                                                        bool j0valid[1] = {false};
                                                        _nj0 = 1;
                                                        IkReal x721 = ((1000.0) * sj1);
                                                        CheckValue<IkReal> x722 = IKatan2WithCheck(
                                                            IkReal(((43.0) * py)), IkReal(((43.0) * px)),
                                                            IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x722.valid) {
                                                          continue;
                                                        }
                                                        CheckValue<IkReal> x723 = IKPowWithIntegerCheck(
                                                            IKsign((((x721 * (py * py))) + ((x721 * (px * px))))), -1);
                                                        if (!x723.valid) {
                                                          continue;
                                                        }
                                                        j0array[0] = ((-1.5707963267949) + (x722.value) +
                                                                      (((1.5707963267949) * (x723.value))));
                                                        sj0array[0] = IKsin(j0array[0]);
                                                        cj0array[0] = IKcos(j0array[0]);
                                                        if (j0array[0] > IKPI) {
                                                          j0array[0] -= IK2PI;
                                                        } else if (j0array[0] < -IKPI) {
                                                          j0array[0] += IK2PI;
                                                        }
                                                        j0valid[0] = true;
                                                        for (int ij0 = 0; ij0 < 1; ++ij0) {
                                                          if (!j0valid[ij0]) {
                                                            continue;
                                                          }
                                                          _ij0[0] = ij0;
                                                          _ij0[1] = -1;
                                                          for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                                            if (j0valid[iij0] &&
                                                                IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j0valid[iij0] = false;
                                                              _ij0[1] = iij0;
                                                              break;
                                                            }
                                                          }
                                                          j0 = j0array[ij0];
                                                          cj0 = cj0array[ij0];
                                                          sj0 = sj0array[ij0];
                                                          {
                                                            IkReal evalcond[4];
                                                            IkReal x724 = IKcos(j0);
                                                            IkReal x725 = IKsin(j0);
                                                            IkReal x726 = ((0.7) * sj1);
                                                            IkReal x727 = ((1.0) * x725);
                                                            IkReal x728 = ((1.0) * px * x724);
                                                            evalcond[0] = ((((-1.0) * px * x727)) + ((py * x724)));
                                                            evalcond[1] = ((-0.0301) + ((py * x725 * x726)) +
                                                                           ((px * x724 * x726)));
                                                            evalcond[2] = ((0.043) + (((-1.0) * py * sj1 * x727)) +
                                                                           (((-1.0) * sj1 * x728)));
                                                            evalcond[3] = ((((0.043) * sj1)) + (((-1.0) * x728)) +
                                                                           (((-1.0) * py * x727)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                              continue;
                                                            }
                                                          }

                                                          rotationfunction0(solutions);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement) {
                                                bool bgotonextstatement = true;
                                                do {
                                                  if (1) {
                                                    bgotonextstatement = false;
                                                    continue;  // branch miss [j0]
                                                  }
                                                } while (0);
                                                if (bgotonextstatement) {
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }

                                } else {
                                  {
                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                    bool j0valid[1] = {false};
                                    _nj0 = 1;
                                    IkReal x729 = ((7.0) * sj1);
                                    IkReal x730 = ((10.0) * pp);
                                    IkReal x731 = ((7.0) * cj1 * pz);
                                    CheckValue<IkReal> x732 = IKatan2WithCheck(
                                        IkReal((((py * x730)) + (((0.28251) * py)) + (((-1.0) * py * x731)))),
                                        IkReal(((((-1.0) * px * x731)) + ((px * x730)) + (((0.28251) * px)))),
                                        IKFAST_ATAN2_MAGTHRESH);
                                    if (!x732.valid) {
                                      continue;
                                    }
                                    CheckValue<IkReal> x733 = IKPowWithIntegerCheck(
                                        IKsign(((((-1.0) * x729 * (pz * pz))) + ((pp * x729)))), -1);
                                    if (!x733.valid) {
                                      continue;
                                    }
                                    j0array[0] =
                                        ((-1.5707963267949) + (x732.value) + (((1.5707963267949) * (x733.value))));
                                    sj0array[0] = IKsin(j0array[0]);
                                    cj0array[0] = IKcos(j0array[0]);
                                    if (j0array[0] > IKPI) {
                                      j0array[0] -= IK2PI;
                                    } else if (j0array[0] < -IKPI) {
                                      j0array[0] += IK2PI;
                                    }
                                    j0valid[0] = true;
                                    for (int ij0 = 0; ij0 < 1; ++ij0) {
                                      if (!j0valid[ij0]) {
                                        continue;
                                      }
                                      _ij0[0] = ij0;
                                      _ij0[1] = -1;
                                      for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                        if (j0valid[iij0] &&
                                            IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                                          j0valid[iij0] = false;
                                          _ij0[1] = iij0;
                                          break;
                                        }
                                      }
                                      j0 = j0array[ij0];
                                      cj0 = cj0array[ij0];
                                      sj0 = sj0array[ij0];
                                      {
                                        IkReal evalcond[5];
                                        IkReal x734 = IKcos(j0);
                                        IkReal x735 = IKsin(j0);
                                        IkReal x736 = ((0.307) * cj2);
                                        IkReal x737 = (cj1 * pz);
                                        IkReal x738 = (py * sj1);
                                        IkReal x739 = ((0.307) * sj2);
                                        IkReal x740 = ((1.0) * x735);
                                        IkReal x741 = (px * sj1 * x734);
                                        IkReal x742 = ((1.0) * px * x734);
                                        evalcond[0] = ((((-1.0) * px * x740)) + ((py * x734)));
                                        evalcond[1] = ((((-1.0) * cj1 * py * x740)) + (((-1.0) * x739)) + ((pz * sj1)) +
                                                       (((-1.0) * cj1 * x742)));
                                        evalcond[2] = ((-0.028251) + (((0.7) * x741)) + (((0.7) * x735 * x738)) +
                                                       (((0.7) * x737)) + (((-1.0) * pp)));
                                        evalcond[3] = ((0.35) + (((-1.0) * x737)) + (((-1.0) * x738 * x740)) +
                                                       (((-1.0) * x741)) + x736);
                                        evalcond[4] = ((((0.35) * sj1)) + (((-1.0) * cj1 * x739)) +
                                                       (((-1.0) * py * x740)) + ((sj1 * x736)) + (((-1.0) * x742)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                                          continue;
                                        }
                                      }

                                      rotationfunction0(solutions);
                                    }
                                  }
                                }
                              }

                            } else {
                              {
                                IkReal j0array[1], cj0array[1], sj0array[1];
                                bool j0valid[1] = {false};
                                _nj0 = 1;
                                IkReal x743 = ((0.307) * cj2);
                                IkReal x744 = ((1.0) * cj1 * pz);
                                CheckValue<IkReal> x745 =
                                    IKPowWithIntegerCheck(IKsign((((pp * sj1)) + (((-1.0) * sj1 * (pz * pz))))), -1);
                                if (!x745.valid) {
                                  continue;
                                }
                                CheckValue<IkReal> x746 =
                                    IKatan2WithCheck(IkReal((((py * x743)) + (((0.35) * py)) + (((-1.0) * py * x744)))),
                                                     IkReal(((((-1.0) * px * x744)) + ((px * x743)) + (((0.35) * px)))),
                                                     IKFAST_ATAN2_MAGTHRESH);
                                if (!x746.valid) {
                                  continue;
                                }
                                j0array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x745.value))) + (x746.value));
                                sj0array[0] = IKsin(j0array[0]);
                                cj0array[0] = IKcos(j0array[0]);
                                if (j0array[0] > IKPI) {
                                  j0array[0] -= IK2PI;
                                } else if (j0array[0] < -IKPI) {
                                  j0array[0] += IK2PI;
                                }
                                j0valid[0] = true;
                                for (int ij0 = 0; ij0 < 1; ++ij0) {
                                  if (!j0valid[ij0]) {
                                    continue;
                                  }
                                  _ij0[0] = ij0;
                                  _ij0[1] = -1;
                                  for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                    if (j0valid[iij0] &&
                                        IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                                      j0valid[iij0] = false;
                                      _ij0[1] = iij0;
                                      break;
                                    }
                                  }
                                  j0 = j0array[ij0];
                                  cj0 = cj0array[ij0];
                                  sj0 = sj0array[ij0];
                                  {
                                    IkReal evalcond[5];
                                    IkReal x747 = IKcos(j0);
                                    IkReal x748 = IKsin(j0);
                                    IkReal x749 = ((0.307) * cj2);
                                    IkReal x750 = (cj1 * pz);
                                    IkReal x751 = (py * sj1);
                                    IkReal x752 = ((0.307) * sj2);
                                    IkReal x753 = ((1.0) * x748);
                                    IkReal x754 = (px * sj1 * x747);
                                    IkReal x755 = ((1.0) * px * x747);
                                    evalcond[0] = (((py * x747)) + (((-1.0) * px * x753)));
                                    evalcond[1] = ((((-1.0) * cj1 * py * x753)) + (((-1.0) * cj1 * x755)) +
                                                   ((pz * sj1)) + (((-1.0) * x752)));
                                    evalcond[2] = ((-0.028251) + (((0.7) * x748 * x751)) + (((0.7) * x754)) +
                                                   (((0.7) * x750)) + (((-1.0) * pp)));
                                    evalcond[3] = ((0.35) + (((-1.0) * x751 * x753)) + (((-1.0) * x750)) +
                                                   (((-1.0) * x754)) + x749);
                                    evalcond[4] = ((((0.35) * sj1)) + ((sj1 * x749)) + (((-1.0) * py * x753)) +
                                                   (((-1.0) * cj1 * x752)) + (((-1.0) * x755)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                                      continue;
                                    }
                                  }

                                  rotationfunction0(solutions);
                                }
                              }
                            }
                          }

                        } else {
                          {
                            IkReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1] = {false};
                            _nj0 = 1;
                            IkReal x756 = (pz * sj1);
                            IkReal x757 = ((0.307) * sj2);
                            CheckValue<IkReal> x758 = IKatan2WithCheck(IkReal((((py * x756)) + (((-1.0) * py * x757)))),
                                                                       IkReal(((((-1.0) * px * x757)) + ((px * x756)))),
                                                                       IKFAST_ATAN2_MAGTHRESH);
                            if (!x758.valid) {
                              continue;
                            }
                            CheckValue<IkReal> x759 =
                                IKPowWithIntegerCheck(IKsign((((cj1 * pp)) + (((-1.0) * cj1 * (pz * pz))))), -1);
                            if (!x759.valid) {
                              continue;
                            }
                            j0array[0] = ((-1.5707963267949) + (x758.value) + (((1.5707963267949) * (x759.value))));
                            sj0array[0] = IKsin(j0array[0]);
                            cj0array[0] = IKcos(j0array[0]);
                            if (j0array[0] > IKPI) {
                              j0array[0] -= IK2PI;
                            } else if (j0array[0] < -IKPI) {
                              j0array[0] += IK2PI;
                            }
                            j0valid[0] = true;
                            for (int ij0 = 0; ij0 < 1; ++ij0) {
                              if (!j0valid[ij0]) {
                                continue;
                              }
                              _ij0[0] = ij0;
                              _ij0[1] = -1;
                              for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                                  j0valid[iij0] = false;
                                  _ij0[1] = iij0;
                                  break;
                                }
                              }
                              j0 = j0array[ij0];
                              cj0 = cj0array[ij0];
                              sj0 = sj0array[ij0];
                              {
                                IkReal evalcond[5];
                                IkReal x760 = IKcos(j0);
                                IkReal x761 = IKsin(j0);
                                IkReal x762 = ((0.307) * cj2);
                                IkReal x763 = (cj1 * pz);
                                IkReal x764 = (py * sj1);
                                IkReal x765 = ((0.307) * sj2);
                                IkReal x766 = ((1.0) * x761);
                                IkReal x767 = (px * sj1 * x760);
                                IkReal x768 = ((1.0) * px * x760);
                                evalcond[0] = ((((-1.0) * px * x766)) + ((py * x760)));
                                evalcond[1] = ((((-1.0) * cj1 * py * x766)) + (((-1.0) * x765)) +
                                               (((-1.0) * cj1 * x768)) + ((pz * sj1)));
                                evalcond[2] = ((-0.028251) + (((0.7) * x767)) + (((0.7) * x763)) + (((-1.0) * pp)) +
                                               (((0.7) * x761 * x764)));
                                evalcond[3] =
                                    ((0.35) + (((-1.0) * x764 * x766)) + (((-1.0) * x763)) + (((-1.0) * x767)) + x762);
                                evalcond[4] = ((((-1.0) * py * x766)) + ((sj1 * x762)) + (((-1.0) * x768)) +
                                               (((-1.0) * cj1 * x765)) + (((0.35) * sj1)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                                  continue;
                                }
                              }

                              rotationfunction0(solutions);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

            } else {
              {
                IkReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2] = {false};
                _nj0 = 2;
                CheckValue<IkReal> x770 = IKatan2WithCheck(IkReal(py), IkReal(((-1.0) * px)), IKFAST_ATAN2_MAGTHRESH);
                if (!x770.valid) {
                  continue;
                }
                IkReal x769 = x770.value;
                j0array[0] = ((-1.0) * x769);
                sj0array[0] = IKsin(j0array[0]);
                cj0array[0] = IKcos(j0array[0]);
                j0array[1] = ((3.14159265358979) + (((-1.0) * x769)));
                sj0array[1] = IKsin(j0array[1]);
                cj0array[1] = IKcos(j0array[1]);
                if (j0array[0] > IKPI) {
                  j0array[0] -= IK2PI;
                } else if (j0array[0] < -IKPI) {
                  j0array[0] += IK2PI;
                }
                j0valid[0] = true;
                if (j0array[1] > IKPI) {
                  j0array[1] -= IK2PI;
                } else if (j0array[1] < -IKPI) {
                  j0array[1] += IK2PI;
                }
                j0valid[1] = true;
                for (int ij0 = 0; ij0 < 2; ++ij0) {
                  if (!j0valid[ij0]) {
                    continue;
                  }
                  _ij0[0] = ij0;
                  _ij0[1] = -1;
                  for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                    if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                        IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                      j0valid[iij0] = false;
                      _ij0[1] = iij0;
                      break;
                    }
                  }
                  j0 = j0array[ij0];
                  cj0 = cj0array[ij0];
                  sj0 = sj0array[ij0];

                  {
                    IkReal j1eval[3];
                    IkReal x771 = ((307000.0) * cj2);
                    IkReal x772 = (cj0 * px);
                    IkReal x773 = ((307000.0) * sj2);
                    IkReal x774 = (py * sj0);
                    j1eval[0] = ((-1.00860400186133) + (((-1.0) * cj2)));
                    j1eval[1] =
                        ((IKabs(((((-1.0) * x771 * x774)) + (((-1.0) * x771 * x772)) + (((-1.0) * pz * x773)) +
                                 (((-350000.0) * x774)) + (((-350000.0) * x772))))) +
                         (IKabs((((x772 * x773)) + ((x773 * x774)) + (((-350000.0) * pz)) + (((-1.0) * pz * x771))))));
                    j1eval[2] = IKsign(((-216749.0) + (((-214900.0) * cj2))));
                    if (IKabs(j1eval[0]) < 0.0000010000000000 || IKabs(j1eval[1]) < 0.0000010000000000 ||
                        IKabs(j1eval[2]) < 0.0000010000000000) {
                      {
                        IkReal j1eval[3];
                        IkReal x775 = (py * sj0);
                        IkReal x776 = ((1000.0) * pz);
                        IkReal x777 = (pz * sj2);
                        IkReal x778 = (cj0 * px);
                        IkReal x779 = (cj2 * x778);
                        j1eval[0] = ((((-1.0) * cj2 * x775)) + x777 + (((-1.0) * x779)) +
                                     (((-1.1400651465798) * x778)) + (((-1.1400651465798) * x775)));
                        j1eval[1] =
                            ((IKabs(((-122.5) + ((pz * x776)) + (((-94.249) * (cj2 * cj2))) + (((-214.9) * cj2))))) +
                             (IKabs(((((94.249) * cj2 * sj2)) + (((107.45) * sj2)) + (((-1.0) * x775 * x776)) +
                                     (((-1.0) * x776 * x778))))));
                        j1eval[2] = IKsign(((((307.0) * x777)) + (((-307.0) * x779)) + (((-307.0) * cj2 * x775)) +
                                            (((-350.0) * x778)) + (((-350.0) * x775))));
                        if (IKabs(j1eval[0]) < 0.0000010000000000 || IKabs(j1eval[1]) < 0.0000010000000000 ||
                            IKabs(j1eval[2]) < 0.0000010000000000) {
                          {
                            IkReal j1eval[3];
                            IkReal x780 = (cj0 * px);
                            IkReal x781 = ((1.0) * cj2);
                            IkReal x782 = ((7000.0) * pz);
                            IkReal x783 = (py * sj0);
                            IkReal x784 = ((2149.0) * cj2);
                            IkReal x785 = (pz * sj2);
                            IkReal x786 = ((3070.0) * pp);
                            j1eval[0] = ((((-1.0) * x781 * x783)) + x785 + (((-1.0) * x780 * x781)) +
                                         (((-1.1400651465798) * x780)) + (((-1.1400651465798) * x783)));
                            j1eval[1] = ((IKabs((((sj2 * x786)) + (((-1.0) * x782 * x783)) + (((-1.0) * x780 * x782)) +
                                                 (((86.73057) * sj2))))) +
                                         (IKabs(((-98.8785) + (((-86.73057) * cj2)) + (((-1.0) * cj2 * x786)) +
                                                 (((-3500.0) * pp)) + ((pz * x782))))));
                            j1eval[2] = IKsign(((((2149.0) * x785)) + (((-2450.0) * x783)) + (((-2450.0) * x780)) +
                                                (((-1.0) * x780 * x784)) + (((-1.0) * x783 * x784))));
                            if (IKabs(j1eval[0]) < 0.0000010000000000 || IKabs(j1eval[1]) < 0.0000010000000000 ||
                                IKabs(j1eval[2]) < 0.0000010000000000) {
                              continue;  // no branches [j1]

                            } else {
                              {
                                IkReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1] = {false};
                                _nj1 = 1;
                                IkReal x787 = ((7000.0) * pz);
                                IkReal x788 = (cj0 * px);
                                IkReal x789 = (py * sj0);
                                IkReal x790 = ((2149.0) * cj2);
                                IkReal x791 = ((3070.0) * pp);
                                CheckValue<IkReal> x792 = IKatan2WithCheck(
                                    IkReal(((-98.8785) + (((-86.73057) * cj2)) + (((-1.0) * cj2 * x791)) +
                                            (((-3500.0) * pp)) + ((pz * x787)))),
                                    IkReal(((((-1.0) * x787 * x789)) + (((-1.0) * x787 * x788)) + (((86.73057) * sj2)) +
                                            ((sj2 * x791)))),
                                    IKFAST_ATAN2_MAGTHRESH);
                                if (!x792.valid) {
                                  continue;
                                }
                                CheckValue<IkReal> x793 = IKPowWithIntegerCheck(
                                    IKsign(((((-1.0) * x788 * x790)) + (((-2450.0) * x789)) + (((-2450.0) * x788)) +
                                            (((-1.0) * x789 * x790)) + (((2149.0) * pz * sj2)))),
                                    -1);
                                if (!x793.valid) {
                                  continue;
                                }
                                j1array[0] = ((-1.5707963267949) + (x792.value) + (((1.5707963267949) * (x793.value))));
                                sj1array[0] = IKsin(j1array[0]);
                                cj1array[0] = IKcos(j1array[0]);
                                if (j1array[0] > IKPI) {
                                  j1array[0] -= IK2PI;
                                } else if (j1array[0] < -IKPI) {
                                  j1array[0] += IK2PI;
                                }
                                j1valid[0] = true;
                                for (int ij1 = 0; ij1 < 1; ++ij1) {
                                  if (!j1valid[ij1]) {
                                    continue;
                                  }
                                  _ij1[0] = ij1;
                                  _ij1[1] = -1;
                                  for (int iij1 = ij1 + 1; iij1 < 1; ++iij1) {
                                    if (j1valid[iij1] &&
                                        IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH) {
                                      j1valid[iij1] = false;
                                      _ij1[1] = iij1;
                                      break;
                                    }
                                  }
                                  j1 = j1array[ij1];
                                  cj1 = cj1array[ij1];
                                  sj1 = sj1array[ij1];
                                  {
                                    IkReal evalcond[5];
                                    IkReal x794 = IKcos(j1);
                                    IkReal x795 = IKsin(j1);
                                    IkReal x796 = ((0.307) * x794);
                                    IkReal x797 = ((1.0) * py * sj0);
                                    IkReal x798 = (pz * x794);
                                    IkReal x799 = ((1.0) * cj0 * px);
                                    IkReal x800 = ((0.7) * x795);
                                    IkReal x801 = ((0.307) * x795);
                                    evalcond[0] =
                                        ((((-1.0) * cj2 * x796)) + (((-1.0) * sj2 * x801)) + pz + (((-0.35) * x794)));
                                    evalcond[1] = ((((-1.0) * x794 * x799)) + (((-1.0) * x794 * x797)) +
                                                   (((-0.307) * sj2)) + ((pz * x795)));
                                    evalcond[2] = ((-0.028251) + (((0.7) * x798)) + ((py * sj0 * x800)) +
                                                   (((-1.0) * pp)) + ((cj0 * px * x800)));
                                    evalcond[3] = ((0.35) + (((-1.0) * x795 * x799)) + (((-1.0) * x795 * x797)) +
                                                   (((-1.0) * x798)) + (((0.307) * cj2)));
                                    evalcond[4] = ((((-1.0) * x797)) + (((-1.0) * x799)) + ((cj2 * x801)) +
                                                   (((0.35) * x795)) + (((-1.0) * sj2 * x796)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                                      continue;
                                    }
                                  }

                                  rotationfunction0(solutions);
                                }
                              }
                            }
                          }

                        } else {
                          {
                            IkReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1] = {false};
                            _nj1 = 1;
                            IkReal x802 = ((307.0) * cj2);
                            IkReal x803 = (cj0 * px);
                            IkReal x804 = (py * sj0);
                            IkReal x805 = ((1000.0) * pz);
                            CheckValue<IkReal> x806 = IKatan2WithCheck(
                                IkReal(((-122.5) + (((-94.249) * (cj2 * cj2))) + ((pz * x805)) + (((-214.9) * cj2)))),
                                IkReal(((((-1.0) * x804 * x805)) + (((94.249) * cj2 * sj2)) + (((107.45) * sj2)) +
                                        (((-1.0) * x803 * x805)))),
                                IKFAST_ATAN2_MAGTHRESH);
                            if (!x806.valid) {
                              continue;
                            }
                            CheckValue<IkReal> x807 = IKPowWithIntegerCheck(
                                IKsign(((((307.0) * pz * sj2)) + (((-1.0) * x802 * x803)) + (((-1.0) * x802 * x804)) +
                                        (((-350.0) * x804)) + (((-350.0) * x803)))),
                                -1);
                            if (!x807.valid) {
                              continue;
                            }
                            j1array[0] = ((-1.5707963267949) + (x806.value) + (((1.5707963267949) * (x807.value))));
                            sj1array[0] = IKsin(j1array[0]);
                            cj1array[0] = IKcos(j1array[0]);
                            if (j1array[0] > IKPI) {
                              j1array[0] -= IK2PI;
                            } else if (j1array[0] < -IKPI) {
                              j1array[0] += IK2PI;
                            }
                            j1valid[0] = true;
                            for (int ij1 = 0; ij1 < 1; ++ij1) {
                              if (!j1valid[ij1]) {
                                continue;
                              }
                              _ij1[0] = ij1;
                              _ij1[1] = -1;
                              for (int iij1 = ij1 + 1; iij1 < 1; ++iij1) {
                                if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH) {
                                  j1valid[iij1] = false;
                                  _ij1[1] = iij1;
                                  break;
                                }
                              }
                              j1 = j1array[ij1];
                              cj1 = cj1array[ij1];
                              sj1 = sj1array[ij1];
                              {
                                IkReal evalcond[5];
                                IkReal x808 = IKcos(j1);
                                IkReal x809 = IKsin(j1);
                                IkReal x810 = ((0.307) * x808);
                                IkReal x811 = ((1.0) * py * sj0);
                                IkReal x812 = (pz * x808);
                                IkReal x813 = ((1.0) * cj0 * px);
                                IkReal x814 = ((0.7) * x809);
                                IkReal x815 = ((0.307) * x809);
                                evalcond[0] =
                                    ((((-1.0) * cj2 * x810)) + pz + (((-1.0) * sj2 * x815)) + (((-0.35) * x808)));
                                evalcond[1] = ((((-1.0) * x808 * x811)) + (((-1.0) * x808 * x813)) +
                                               (((-0.307) * sj2)) + ((pz * x809)));
                                evalcond[2] = ((-0.028251) + ((cj0 * px * x814)) + (((0.7) * x812)) + (((-1.0) * pp)) +
                                               ((py * sj0 * x814)));
                                evalcond[3] = ((0.35) + (((-1.0) * x809 * x813)) + (((-1.0) * x809 * x811)) +
                                               (((-1.0) * x812)) + (((0.307) * cj2)));
                                evalcond[4] = ((((-1.0) * x811)) + (((-1.0) * x813)) + (((0.35) * x809)) +
                                               (((-1.0) * sj2 * x810)) + ((cj2 * x815)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                                  continue;
                                }
                              }

                              rotationfunction0(solutions);
                            }
                          }
                        }
                      }

                    } else {
                      {
                        IkReal j1array[1], cj1array[1], sj1array[1];
                        bool j1valid[1] = {false};
                        _nj1 = 1;
                        IkReal x816 = ((307000.0) * cj2);
                        IkReal x817 = (cj0 * px);
                        IkReal x818 = ((307000.0) * sj2);
                        IkReal x819 = (py * sj0);
                        CheckValue<IkReal> x820 = IKatan2WithCheck(
                            IkReal(((((-1.0) * x816 * x819)) + (((-1.0) * x816 * x817)) + (((-1.0) * pz * x818)) +
                                    (((-350000.0) * x819)) + (((-350000.0) * x817)))),
                            IkReal(((((-1.0) * pz * x816)) + (((-350000.0) * pz)) + ((x817 * x818)) + ((x818 * x819)))),
                            IKFAST_ATAN2_MAGTHRESH);
                        if (!x820.valid) {
                          continue;
                        }
                        CheckValue<IkReal> x821 =
                            IKPowWithIntegerCheck(IKsign(((-216749.0) + (((-214900.0) * cj2)))), -1);
                        if (!x821.valid) {
                          continue;
                        }
                        j1array[0] = ((-1.5707963267949) + (x820.value) + (((1.5707963267949) * (x821.value))));
                        sj1array[0] = IKsin(j1array[0]);
                        cj1array[0] = IKcos(j1array[0]);
                        if (j1array[0] > IKPI) {
                          j1array[0] -= IK2PI;
                        } else if (j1array[0] < -IKPI) {
                          j1array[0] += IK2PI;
                        }
                        j1valid[0] = true;
                        for (int ij1 = 0; ij1 < 1; ++ij1) {
                          if (!j1valid[ij1]) {
                            continue;
                          }
                          _ij1[0] = ij1;
                          _ij1[1] = -1;
                          for (int iij1 = ij1 + 1; iij1 < 1; ++iij1) {
                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH) {
                              j1valid[iij1] = false;
                              _ij1[1] = iij1;
                              break;
                            }
                          }
                          j1 = j1array[ij1];
                          cj1 = cj1array[ij1];
                          sj1 = sj1array[ij1];
                          {
                            IkReal evalcond[5];
                            IkReal x822 = IKcos(j1);
                            IkReal x823 = IKsin(j1);
                            IkReal x824 = ((0.307) * x822);
                            IkReal x825 = ((1.0) * py * sj0);
                            IkReal x826 = (pz * x822);
                            IkReal x827 = ((1.0) * cj0 * px);
                            IkReal x828 = ((0.7) * x823);
                            IkReal x829 = ((0.307) * x823);
                            evalcond[0] = ((((-0.35) * x822)) + pz + (((-1.0) * sj2 * x829)) + (((-1.0) * cj2 * x824)));
                            evalcond[1] = (((pz * x823)) + (((-1.0) * x822 * x827)) + (((-1.0) * x822 * x825)) +
                                           (((-0.307) * sj2)));
                            evalcond[2] = ((-0.028251) + ((py * sj0 * x828)) + (((0.7) * x826)) + (((-1.0) * pp)) +
                                           ((cj0 * px * x828)));
                            evalcond[3] = ((0.35) + (((-1.0) * x823 * x827)) + (((-1.0) * x823 * x825)) +
                                           (((-1.0) * x826)) + (((0.307) * cj2)));
                            evalcond[4] = ((((-1.0) * x827)) + (((-1.0) * x825)) + (((-1.0) * sj2 * x824)) +
                                           ((cj2 * x829)) + (((0.35) * x823)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                              continue;
                            }
                          }

                          rotationfunction0(solutions);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return solutions.GetNumSolutions() > 0;
  }
  inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
    for (int rotationiter = 0; rotationiter < 1; ++rotationiter) {
      IkReal x75 = (r11 * sj0);
      IkReal x76 = (cj0 * r02);
      IkReal x77 = (r10 * sj0);
      IkReal x78 = ((1.0) * sj0);
      IkReal x79 = (cj2 * sj1);
      IkReal x80 = (cj1 * sj2);
      IkReal x81 = (r12 * sj0);
      IkReal x82 = (((sj1 * sj2)) + ((cj1 * cj2)));
      IkReal x83 = (x80 + (((-1.0) * x79)));
      IkReal x84 = (x79 + (((-1.0) * x80)));
      IkReal x85 = (sj0 * x84);
      IkReal x86 = (cj0 * x84);
      IkReal x87 = (cj0 * x82);
      new_r00 = (((x77 * x82)) + ((r00 * x87)) + ((r20 * x83)));
      new_r01 = (((r21 * x83)) + ((r01 * x87)) + ((x75 * x82)));
      new_r02 = (((x81 * x82)) + ((x76 * x82)) + ((r22 * x83)));
      new_r10 = ((((-1.0) * r00 * x78)) + ((cj0 * r10)));
      new_r11 = ((((-1.0) * r01 * x78)) + ((cj0 * r11)));
      new_r12 = ((((-1.0) * r02 * x78)) + ((cj0 * r12)));
      new_r20 = (((x77 * x84)) + ((r00 * x86)) + ((r20 * x82)));
      new_r21 = (((r21 * x82)) + ((r01 * x86)) + ((x75 * x84)));
      new_r22 = (((x81 * x84)) + ((x76 * x84)) + ((r22 * x82)));
      {
        IkReal j4array[2], cj4array[2], sj4array[2];
        bool j4valid[2] = {false};
        _nj4 = 2;
        cj4array[0] = new_r22;
        if (cj4array[0] >= -1 - IKFAST_SINCOS_THRESH && cj4array[0] <= 1 + IKFAST_SINCOS_THRESH) {
          j4valid[0] = j4valid[1] = true;
          j4array[0] = IKacos(cj4array[0]);
          sj4array[0] = IKsin(j4array[0]);
          cj4array[1] = cj4array[0];
          j4array[1] = -j4array[0];
          sj4array[1] = -sj4array[0];
        } else if (isnan(cj4array[0])) {
          // probably any value will work
          j4valid[0] = true;
          cj4array[0] = 1;
          sj4array[0] = 0;
          j4array[0] = 0;
        }
        for (int ij4 = 0; ij4 < 2; ++ij4) {
          if (!j4valid[ij4]) {
            continue;
          }
          _ij4[0] = ij4;
          _ij4[1] = -1;
          for (int iij4 = ij4 + 1; iij4 < 2; ++iij4) {
            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH) {
              j4valid[iij4] = false;
              _ij4[1] = iij4;
              break;
            }
          }
          j4 = j4array[ij4];
          cj4 = cj4array[ij4];
          sj4 = sj4array[ij4];

          {
            IkReal j3eval[3];
            j3eval[0] = sj4;
            j3eval[1] = IKsign(sj4);
            j3eval[2] = ((IKabs(new_r12)) + (IKabs(new_r02)));
            if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 ||
                IKabs(j3eval[2]) < 0.0000010000000000) {
              {
                IkReal j5eval[3];
                j5eval[0] = sj4;
                j5eval[1] = IKsign(sj4);
                j5eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 ||
                    IKabs(j5eval[2]) < 0.0000010000000000) {
                  {
                    IkReal j3eval[2];
                    j3eval[0] = new_r12;
                    j3eval[1] = sj4;
                    if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000) {
                      {
                        IkReal evalcond[5];
                        bool bgotonextstatement = true;
                        do {
                          evalcond[0] =
                              ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                          evalcond[1] = new_r20;
                          evalcond[2] = new_r02;
                          evalcond[3] = new_r12;
                          evalcond[4] = new_r21;
                          if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                              IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                              IKabs(evalcond[4]) < 0.0000050000000000) {
                            bgotonextstatement = false;
                            IkReal j5mul = 1;
                            j5 = 0;
                            j3mul = -1.0;
                            if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(new_r00) - 1) <= IKFAST_SINCOS_THRESH)
                              continue;
                            j3 = IKatan2(((-1.0) * new_r01), new_r00);
                            {
                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                              vinfos[0].jointtype = 1;
                              vinfos[0].foffset = j0;
                              vinfos[0].indices[0] = _ij0[0];
                              vinfos[0].indices[1] = _ij0[1];
                              vinfos[0].maxsolutions = _nj0;
                              vinfos[1].jointtype = 1;
                              vinfos[1].foffset = j1;
                              vinfos[1].indices[0] = _ij1[0];
                              vinfos[1].indices[1] = _ij1[1];
                              vinfos[1].maxsolutions = _nj1;
                              vinfos[2].jointtype = 1;
                              vinfos[2].foffset = j2;
                              vinfos[2].indices[0] = _ij2[0];
                              vinfos[2].indices[1] = _ij2[1];
                              vinfos[2].maxsolutions = _nj2;
                              vinfos[3].jointtype = 1;
                              vinfos[3].foffset = j3;
                              vinfos[3].fmul = j3mul;
                              vinfos[3].freeind = 0;
                              vinfos[3].maxsolutions = 0;
                              vinfos[4].jointtype = 1;
                              vinfos[4].foffset = j4;
                              vinfos[4].indices[0] = _ij4[0];
                              vinfos[4].indices[1] = _ij4[1];
                              vinfos[4].maxsolutions = _nj4;
                              vinfos[5].jointtype = 1;
                              vinfos[5].foffset = j5;
                              vinfos[5].fmul = j5mul;
                              vinfos[5].freeind = 0;
                              vinfos[5].maxsolutions = 0;
                              std::vector<int> vfree(1);
                              vfree[0] = 5;
                              solutions.AddSolution(vinfos, vfree);
                            }
                          }
                        } while (0);
                        if (bgotonextstatement) {
                          bool bgotonextstatement = true;
                          do {
                            evalcond[0] = ((-3.14159265358979) +
                                           (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j4)))),
                                                   6.28318530717959)));
                            evalcond[1] = new_r20;
                            evalcond[2] = new_r02;
                            evalcond[3] = new_r12;
                            evalcond[4] = new_r21;
                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                                IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                                IKabs(evalcond[4]) < 0.0000050000000000) {
                              bgotonextstatement = false;
                              IkReal j5mul = 1;
                              j5 = 0;
                              j3mul = 1.0;
                              if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(((-1.0) * new_r00)) - 1) <=
                                      IKFAST_SINCOS_THRESH)
                                continue;
                              j3 = IKatan2(((-1.0) * new_r01), ((-1.0) * new_r00));
                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 1;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 1;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 1;
                                vinfos[3].foffset = j3;
                                vinfos[3].fmul = j3mul;
                                vinfos[3].freeind = 0;
                                vinfos[3].maxsolutions = 0;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].fmul = j5mul;
                                vinfos[5].freeind = 0;
                                vinfos[5].maxsolutions = 0;
                                std::vector<int> vfree(1);
                                vfree[0] = 5;
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          } while (0);
                          if (bgotonextstatement) {
                            bool bgotonextstatement = true;
                            do {
                              evalcond[0] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                              if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                bgotonextstatement = false;
                                {
                                  IkReal j3eval[1];
                                  new_r02 = 0;
                                  new_r12 = 0;
                                  new_r20 = 0;
                                  new_r21 = 0;
                                  IkReal x88 = new_r22 * new_r22;
                                  IkReal x89 = ((16.0) * new_r10);
                                  IkReal x90 = ((16.0) * new_r01);
                                  IkReal x91 = ((16.0) * new_r22);
                                  IkReal x92 = ((8.0) * new_r11);
                                  IkReal x93 = ((8.0) * new_r00);
                                  IkReal x94 = (x88 * x89);
                                  IkReal x95 = (x88 * x90);
                                  j3eval[0] = ((IKabs((((new_r22 * x92)) + (((-1.0) * x93))))) +
                                               (IKabs((x89 + (((-1.0) * x94))))) + (IKabs((x90 + (((-1.0) * x95))))) +
                                               (IKabs((x95 + (((-1.0) * x90))))) +
                                               (IKabs(((((32.0) * new_r11)) + (((-16.0) * new_r11 * x88)) +
                                                       (((-1.0) * new_r00 * x91))))) +
                                               (IKabs((x94 + (((-1.0) * x89))))) +
                                               (IKabs((((x88 * x92)) + (((-1.0) * new_r22 * x93))))) +
                                               (IKabs(((((16.0) * new_r00)) + ((new_r11 * x91)) +
                                                       (((-32.0) * new_r00 * x88))))));
                                  if (IKabs(j3eval[0]) < 0.0000000100000000) {
                                    continue;  // no branches [j3, j5]

                                  } else {
                                    IkReal op[4 + 1], zeror[4];
                                    int numroots;
                                    IkReal j3evalpoly[1];
                                    IkReal x96 = new_r22 * new_r22;
                                    IkReal x97 = ((16.0) * new_r10);
                                    IkReal x98 = (new_r11 * new_r22);
                                    IkReal x99 = (x96 * x97);
                                    IkReal x100 = ((((8.0) * x98)) + (((-8.0) * new_r00)));
                                    op[0] = x100;
                                    op[1] = (x97 + (((-1.0) * x99)));
                                    op[2] = ((((16.0) * x98)) + (((16.0) * new_r00)) + (((-32.0) * new_r00 * x96)));
                                    op[3] = (x99 + (((-1.0) * x97)));
                                    op[4] = x100;
                                    polyroots4(op, zeror, numroots);
                                    IkReal j3array[4], cj3array[4], sj3array[4], tempj3array[1];
                                    int numsolutions = 0;
                                    for (int ij3 = 0; ij3 < numroots; ++ij3) {
                                      IkReal htj3 = zeror[ij3];
                                      tempj3array[0] = ((2.0) * (atan(htj3)));
                                      for (int kj3 = 0; kj3 < 1; ++kj3) {
                                        j3array[numsolutions] = tempj3array[kj3];
                                        if (j3array[numsolutions] > IKPI) {
                                          j3array[numsolutions] -= IK2PI;
                                        } else if (j3array[numsolutions] < -IKPI) {
                                          j3array[numsolutions] += IK2PI;
                                        }
                                        sj3array[numsolutions] = IKsin(j3array[numsolutions]);
                                        cj3array[numsolutions] = IKcos(j3array[numsolutions]);
                                        numsolutions++;
                                      }
                                    }
                                    bool j3valid[4] = {true, true, true, true};
                                    _nj3 = 4;
                                    for (int ij3 = 0; ij3 < numsolutions; ++ij3) {
                                      if (!j3valid[ij3]) {
                                        continue;
                                      }
                                      j3 = j3array[ij3];
                                      cj3 = cj3array[ij3];
                                      sj3 = sj3array[ij3];
                                      htj3 = IKtan(j3 / 2);

                                      IkReal x101 = new_r22 * new_r22;
                                      IkReal x102 = ((16.0) * new_r01);
                                      IkReal x103 = (new_r00 * new_r22);
                                      IkReal x104 = ((8.0) * x103);
                                      IkReal x105 = (new_r11 * x101);
                                      IkReal x106 = ((8.0) * x105);
                                      IkReal x107 = (x101 * x102);
                                      j3evalpoly[0] =
                                          ((((htj3 * htj3) *
                                             (((((32.0) * new_r11)) + (((-16.0) * x103)) + (((-16.0) * x105)))))) +
                                           (((htj3 * htj3 * htj3 * htj3) * (((((-1.0) * x104)) + x106)))) +
                                           (((-1.0) * x104)) + x106 +
                                           (((htj3 * htj3 * htj3) * (((((-1.0) * x102)) + x107)))) +
                                           ((htj3 * (((((-1.0) * x107)) + x102)))));
                                      if (IKabs(j3evalpoly[0]) > 0.0000001000000000) {
                                        continue;
                                      }
                                      _ij3[0] = ij3;
                                      _ij3[1] = -1;
                                      for (int iij3 = ij3 + 1; iij3 < numsolutions; ++iij3) {
                                        if (j3valid[iij3] &&
                                            IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH) {
                                          j3valid[iij3] = false;
                                          _ij3[1] = iij3;
                                          break;
                                        }
                                      }
                                      {
                                        IkReal j5eval[3];
                                        new_r02 = 0;
                                        new_r12 = 0;
                                        new_r20 = 0;
                                        new_r21 = 0;
                                        IkReal x108 = cj3 * cj3;
                                        IkReal x109 = (cj3 * new_r22);
                                        IkReal x110 = ((-1.0) + (((-1.0) * x108 * (new_r22 * new_r22))) + x108);
                                        j5eval[0] = x110;
                                        j5eval[1] = ((IKabs((((new_r01 * sj3)) + (((-1.0) * new_r00 * x109))))) +
                                                     (IKabs((((new_r00 * sj3)) + ((new_r01 * x109))))));
                                        j5eval[2] = IKsign(x110);
                                        if (IKabs(j5eval[0]) < 0.0000010000000000 ||
                                            IKabs(j5eval[1]) < 0.0000010000000000 ||
                                            IKabs(j5eval[2]) < 0.0000010000000000) {
                                          {
                                            IkReal j5eval[1];
                                            new_r02 = 0;
                                            new_r12 = 0;
                                            new_r20 = 0;
                                            new_r21 = 0;
                                            j5eval[0] = new_r22;
                                            if (IKabs(j5eval[0]) < 0.0000010000000000) {
                                              {
                                                IkReal j5eval[2];
                                                new_r02 = 0;
                                                new_r12 = 0;
                                                new_r20 = 0;
                                                new_r21 = 0;
                                                IkReal x111 = new_r22 * new_r22;
                                                j5eval[0] = (((cj3 * x111)) + (((-1.0) * cj3)));
                                                j5eval[1] = ((((-1.0) * sj3)) + ((sj3 * x111)));
                                                if (IKabs(j5eval[0]) < 0.0000010000000000 ||
                                                    IKabs(j5eval[1]) < 0.0000010000000000) {
                                                  {
                                                    IkReal evalcond[1];
                                                    bool bgotonextstatement = true;
                                                    do {
                                                      evalcond[0] = ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((-1.5707963267949) + j3)))),
                                                                             6.28318530717959)));
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j5array[1], cj5array[1], sj5array[1];
                                                          bool j5valid[1] = {false};
                                                          _nj5 = 1;
                                                          if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                    IKsqr(((-1.0) * new_r01)) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j5array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r01));
                                                          sj5array[0] = IKsin(j5array[0]);
                                                          cj5array[0] = IKcos(j5array[0]);
                                                          if (j5array[0] > IKPI) {
                                                            j5array[0] -= IK2PI;
                                                          } else if (j5array[0] < -IKPI) {
                                                            j5array[0] += IK2PI;
                                                          }
                                                          j5valid[0] = true;
                                                          for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                            if (!j5valid[ij5]) {
                                                              continue;
                                                            }
                                                            _ij5[0] = ij5;
                                                            _ij5[1] = -1;
                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                              if (j5valid[iij5] &&
                                                                  IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j5valid[iij5] = false;
                                                                _ij5[1] = iij5;
                                                                break;
                                                              }
                                                            }
                                                            j5 = j5array[ij5];
                                                            cj5 = cj5array[ij5];
                                                            sj5 = sj5array[ij5];
                                                            {
                                                              IkReal evalcond[4];
                                                              IkReal x112 = IKsin(j5);
                                                              IkReal x113 = IKcos(j5);
                                                              evalcond[0] = x112;
                                                              evalcond[1] = ((-1.0) * x113);
                                                              evalcond[2] = ((((-1.0) * new_r00)) + (((-1.0) * x112)));
                                                              evalcond[3] = ((((-1.0) * new_r01)) + (((-1.0) * x113)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 1;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 1;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 1;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement) {
                                                      bool bgotonextstatement = true;
                                                      do {
                                                        evalcond[0] = ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((1.5707963267949) + j3)))),
                                                                               6.28318530717959)));
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                          bgotonextstatement = false;
                                                          {
                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                            bool j5valid[1] = {false};
                                                            _nj5 = 1;
                                                            if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j5array[0] = IKatan2(new_r00, new_r01);
                                                            sj5array[0] = IKsin(j5array[0]);
                                                            cj5array[0] = IKcos(j5array[0]);
                                                            if (j5array[0] > IKPI) {
                                                              j5array[0] -= IK2PI;
                                                            } else if (j5array[0] < -IKPI) {
                                                              j5array[0] += IK2PI;
                                                            }
                                                            j5valid[0] = true;
                                                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                              if (!j5valid[ij5]) {
                                                                continue;
                                                              }
                                                              _ij5[0] = ij5;
                                                              _ij5[1] = -1;
                                                              for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                if (j5valid[iij5] &&
                                                                    IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                        IKFAST_SOLUTION_THRESH) {
                                                                  j5valid[iij5] = false;
                                                                  _ij5[1] = iij5;
                                                                  break;
                                                                }
                                                              }
                                                              j5 = j5array[ij5];
                                                              cj5 = cj5array[ij5];
                                                              sj5 = sj5array[ij5];
                                                              {
                                                                IkReal evalcond[4];
                                                                IkReal x114 = IKsin(j5);
                                                                IkReal x115 = IKcos(j5);
                                                                evalcond[0] = x114;
                                                                evalcond[1] = ((-1.0) * x115);
                                                                evalcond[2] = (new_r00 + (((-1.0) * x114)));
                                                                evalcond[3] = (new_r01 + (((-1.0) * x115)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 1;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement) {
                                                        bool bgotonextstatement = true;
                                                        do {
                                                          evalcond[0] = ((-3.14159265358979) +
                                                                         (IKfmod(((3.14159265358979) + (IKabs(j3))),
                                                                                 6.28318530717959)));
                                                          if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                            bgotonextstatement = false;
                                                            {
                                                              IkReal j5array[1], cj5array[1], sj5array[1];
                                                              bool j5valid[1] = {false};
                                                              _nj5 = 1;
                                                              if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <=
                                                                      IKFAST_SINCOS_THRESH)
                                                                continue;
                                                              j5array[0] = IKatan2(new_r10, new_r11);
                                                              sj5array[0] = IKsin(j5array[0]);
                                                              cj5array[0] = IKcos(j5array[0]);
                                                              if (j5array[0] > IKPI) {
                                                                j5array[0] -= IK2PI;
                                                              } else if (j5array[0] < -IKPI) {
                                                                j5array[0] += IK2PI;
                                                              }
                                                              j5valid[0] = true;
                                                              for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                if (!j5valid[ij5]) {
                                                                  continue;
                                                                }
                                                                _ij5[0] = ij5;
                                                                _ij5[1] = -1;
                                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                  if (j5valid[iij5] &&
                                                                      IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                          IKFAST_SOLUTION_THRESH &&
                                                                      IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                          IKFAST_SOLUTION_THRESH) {
                                                                    j5valid[iij5] = false;
                                                                    _ij5[1] = iij5;
                                                                    break;
                                                                  }
                                                                }
                                                                j5 = j5array[ij5];
                                                                cj5 = cj5array[ij5];
                                                                sj5 = sj5array[ij5];
                                                                {
                                                                  IkReal evalcond[4];
                                                                  IkReal x116 = IKsin(j5);
                                                                  IkReal x117 = IKcos(j5);
                                                                  evalcond[0] = x116;
                                                                  evalcond[1] = ((-1.0) * x117);
                                                                  evalcond[2] = (new_r10 + (((-1.0) * x116)));
                                                                  evalcond[3] = (new_r11 + (((-1.0) * x117)));
                                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                    continue;
                                                                  }
                                                                }

                                                                {
                                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                      6);
                                                                  vinfos[0].jointtype = 1;
                                                                  vinfos[0].foffset = j0;
                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                  vinfos[0].maxsolutions = _nj0;
                                                                  vinfos[1].jointtype = 1;
                                                                  vinfos[1].foffset = j1;
                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                  vinfos[1].maxsolutions = _nj1;
                                                                  vinfos[2].jointtype = 1;
                                                                  vinfos[2].foffset = j2;
                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                  vinfos[2].maxsolutions = _nj2;
                                                                  vinfos[3].jointtype = 1;
                                                                  vinfos[3].foffset = j3;
                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                  vinfos[3].maxsolutions = _nj3;
                                                                  vinfos[4].jointtype = 1;
                                                                  vinfos[4].foffset = j4;
                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                  vinfos[4].maxsolutions = _nj4;
                                                                  vinfos[5].jointtype = 1;
                                                                  vinfos[5].foffset = j5;
                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                  vinfos[5].maxsolutions = _nj5;
                                                                  std::vector<int> vfree(0);
                                                                  solutions.AddSolution(vinfos, vfree);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } while (0);
                                                        if (bgotonextstatement) {
                                                          bool bgotonextstatement = true;
                                                          do {
                                                            evalcond[0] =
                                                                ((-3.14159265358979) +
                                                                 (IKfmod(((3.14159265358979) +
                                                                          (IKabs(((-3.14159265358979) + j3)))),
                                                                         6.28318530717959)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                bool j5valid[1] = {false};
                                                                _nj5 = 1;
                                                                if (IKabs(((-1.0) * new_r10)) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(((-1.0) * new_r11)) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                          IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                        IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j5array[0] =
                                                                    IKatan2(((-1.0) * new_r10), ((-1.0) * new_r11));
                                                                sj5array[0] = IKsin(j5array[0]);
                                                                cj5array[0] = IKcos(j5array[0]);
                                                                if (j5array[0] > IKPI) {
                                                                  j5array[0] -= IK2PI;
                                                                } else if (j5array[0] < -IKPI) {
                                                                  j5array[0] += IK2PI;
                                                                }
                                                                j5valid[0] = true;
                                                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                  if (!j5valid[ij5]) {
                                                                    continue;
                                                                  }
                                                                  _ij5[0] = ij5;
                                                                  _ij5[1] = -1;
                                                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                    if (j5valid[iij5] &&
                                                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j5valid[iij5] = false;
                                                                      _ij5[1] = iij5;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j5 = j5array[ij5];
                                                                  cj5 = cj5array[ij5];
                                                                  sj5 = sj5array[ij5];
                                                                  {
                                                                    IkReal evalcond[4];
                                                                    IkReal x118 = IKsin(j5);
                                                                    IkReal x119 = IKcos(j5);
                                                                    evalcond[0] = x118;
                                                                    evalcond[1] = ((-1.0) * x119);
                                                                    evalcond[2] =
                                                                        ((((-1.0) * new_r10)) + (((-1.0) * x118)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * new_r11)) + (((-1.0) * x119)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(6);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement) {
                                                            bool bgotonextstatement = true;
                                                            do {
                                                              CheckValue<IkReal> x120 = IKPowWithIntegerCheck(
                                                                  ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                              if (!x120.valid) {
                                                                continue;
                                                              }
                                                              if ((x120.value) < -0.00001) continue;
                                                              IkReal gconst0 = ((-1.0) * (IKsqrt(x120.value)));
                                                              evalcond[0] =
                                                                  ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-1.0) + (IKsign(sj3))))) +
                                                                            (IKabs((cj3 + (((-1.0) * gconst0)))))),
                                                                           6.28318530717959)));
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j5eval[1];
                                                                  new_r02 = 0;
                                                                  new_r12 = 0;
                                                                  new_r20 = 0;
                                                                  new_r21 = 0;
                                                                  if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) <
                                                                      -0.00001)
                                                                    continue;
                                                                  sj3 = IKsqrt(
                                                                      ((1.0) + (((-1.0) * (gconst0 * gconst0)))));
                                                                  cj3 = gconst0;
                                                                  if ((gconst0) < -1 - IKFAST_SINCOS_THRESH ||
                                                                      (gconst0) > 1 + IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                  j3 = IKacos(gconst0);
                                                                  CheckValue<IkReal> x121 = IKPowWithIntegerCheck(
                                                                      ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                  if (!x121.valid) {
                                                                    continue;
                                                                  }
                                                                  if ((x121.value) < -0.00001) continue;
                                                                  IkReal gconst0 = ((-1.0) * (IKsqrt(x121.value)));
                                                                  j5eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                  if (IKabs(j5eval[0]) < 0.0000010000000000) {
                                                                    {
                                                                      IkReal j5array[1], cj5array[1], sj5array[1];
                                                                      bool j5valid[1] = {false};
                                                                      _nj5 = 1;
                                                                      if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) <
                                                                          -0.00001)
                                                                        continue;
                                                                      CheckValue<IkReal> x122 =
                                                                          IKPowWithIntegerCheck(gconst0, -1);
                                                                      if (!x122.valid) {
                                                                        continue;
                                                                      }
                                                                      if (IKabs(((((-1.0) * new_r00 *
                                                                                   (IKsqrt(((1.0) + (((-1.0) *
                                                                                                      (gconst0 *
                                                                                                       gconst0)))))))) +
                                                                                 ((gconst0 * new_r10)))) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs((new_r11 * (x122.value))) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr(((((-1.0) * new_r00 *
                                                                                         (IKsqrt(((1.0) +
                                                                                                  (((-1.0) *
                                                                                                    (gconst0 *
                                                                                                     gconst0)))))))) +
                                                                                       ((gconst0 * new_r10)))) +
                                                                                IKsqr((new_r11 * (x122.value))) - 1) <=
                                                                              IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j5array[0] = IKatan2(
                                                                          ((((-1.0) * new_r00 *
                                                                             (IKsqrt((
                                                                                 (1.0) +
                                                                                 (((-1.0) * (gconst0 * gconst0)))))))) +
                                                                           ((gconst0 * new_r10))),
                                                                          (new_r11 * (x122.value)));
                                                                      sj5array[0] = IKsin(j5array[0]);
                                                                      cj5array[0] = IKcos(j5array[0]);
                                                                      if (j5array[0] > IKPI) {
                                                                        j5array[0] -= IK2PI;
                                                                      } else if (j5array[0] < -IKPI) {
                                                                        j5array[0] += IK2PI;
                                                                      }
                                                                      j5valid[0] = true;
                                                                      for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                        if (!j5valid[ij5]) {
                                                                          continue;
                                                                        }
                                                                        _ij5[0] = ij5;
                                                                        _ij5[1] = -1;
                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                          if (j5valid[iij5] &&
                                                                              IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                                  IKFAST_SOLUTION_THRESH) {
                                                                            j5valid[iij5] = false;
                                                                            _ij5[1] = iij5;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j5 = j5array[ij5];
                                                                        cj5 = cj5array[ij5];
                                                                        sj5 = sj5array[ij5];
                                                                        {
                                                                          IkReal evalcond[8];
                                                                          IkReal x123 = IKcos(j5);
                                                                          IkReal x124 = IKsin(j5);
                                                                          IkReal x125 = ((1.0) * x124);
                                                                          IkReal x126 = ((1.0) * x123);
                                                                          if ((((1.0) +
                                                                                (((-1.0) * (gconst0 * gconst0))))) <
                                                                              -0.00001)
                                                                            continue;
                                                                          IkReal x127 = IKsqrt(
                                                                              ((1.0) +
                                                                               (((-1.0) * (gconst0 * gconst0)))));
                                                                          IkReal x128 = ((1.0) * x127);
                                                                          evalcond[0] = x124;
                                                                          evalcond[1] = ((-1.0) * x123);
                                                                          evalcond[2] =
                                                                              ((((-1.0) * gconst0 * x126)) + new_r11);
                                                                          evalcond[3] =
                                                                              ((((-1.0) * gconst0 * x125)) + new_r10);
                                                                          evalcond[4] = (((x123 * x127)) + new_r01);
                                                                          evalcond[5] = (((x124 * x127)) + new_r00);
                                                                          evalcond[6] = ((((-1.0) * new_r00 * x128)) +
                                                                                         (((-1.0) * x125)) +
                                                                                         ((gconst0 * new_r10)));
                                                                          evalcond[7] = ((((-1.0) * new_r01 * x128)) +
                                                                                         (((-1.0) * x126)) +
                                                                                         ((gconst0 * new_r11)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[4]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[5]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[6]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[7]) >
                                                                                  IKFAST_EVALCOND_THRESH) {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(6);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 1;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 1;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 1;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }

                                                                  } else {
                                                                    {
                                                                      IkReal j5array[1], cj5array[1], sj5array[1];
                                                                      bool j5valid[1] = {false};
                                                                      _nj5 = 1;
                                                                      CheckValue<IkReal> x129 =
                                                                          IKPowWithIntegerCheck(IKsign(gconst0), -1);
                                                                      if (!x129.valid) {
                                                                        continue;
                                                                      }
                                                                      CheckValue<IkReal> x130 = IKatan2WithCheck(
                                                                          IkReal(new_r10), IkReal(new_r11),
                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                      if (!x130.valid) {
                                                                        continue;
                                                                      }
                                                                      j5array[0] =
                                                                          ((-1.5707963267949) +
                                                                           (((1.5707963267949) * (x129.value))) +
                                                                           (x130.value));
                                                                      sj5array[0] = IKsin(j5array[0]);
                                                                      cj5array[0] = IKcos(j5array[0]);
                                                                      if (j5array[0] > IKPI) {
                                                                        j5array[0] -= IK2PI;
                                                                      } else if (j5array[0] < -IKPI) {
                                                                        j5array[0] += IK2PI;
                                                                      }
                                                                      j5valid[0] = true;
                                                                      for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                        if (!j5valid[ij5]) {
                                                                          continue;
                                                                        }
                                                                        _ij5[0] = ij5;
                                                                        _ij5[1] = -1;
                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                          if (j5valid[iij5] &&
                                                                              IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                                  IKFAST_SOLUTION_THRESH) {
                                                                            j5valid[iij5] = false;
                                                                            _ij5[1] = iij5;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j5 = j5array[ij5];
                                                                        cj5 = cj5array[ij5];
                                                                        sj5 = sj5array[ij5];
                                                                        {
                                                                          IkReal evalcond[8];
                                                                          IkReal x131 = IKcos(j5);
                                                                          IkReal x132 = IKsin(j5);
                                                                          IkReal x133 = ((1.0) * x132);
                                                                          IkReal x134 = ((1.0) * x131);
                                                                          if ((((1.0) +
                                                                                (((-1.0) * (gconst0 * gconst0))))) <
                                                                              -0.00001)
                                                                            continue;
                                                                          IkReal x135 = IKsqrt(
                                                                              ((1.0) +
                                                                               (((-1.0) * (gconst0 * gconst0)))));
                                                                          IkReal x136 = ((1.0) * x135);
                                                                          evalcond[0] = x132;
                                                                          evalcond[1] = ((-1.0) * x131);
                                                                          evalcond[2] =
                                                                              ((((-1.0) * gconst0 * x134)) + new_r11);
                                                                          evalcond[3] =
                                                                              ((((-1.0) * gconst0 * x133)) + new_r10);
                                                                          evalcond[4] = (((x131 * x135)) + new_r01);
                                                                          evalcond[5] = (((x132 * x135)) + new_r00);
                                                                          evalcond[6] = ((((-1.0) * new_r00 * x136)) +
                                                                                         (((-1.0) * x133)) +
                                                                                         ((gconst0 * new_r10)));
                                                                          evalcond[7] = ((((-1.0) * new_r01 * x136)) +
                                                                                         (((-1.0) * x134)) +
                                                                                         ((gconst0 * new_r11)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[4]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[5]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[6]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[7]) >
                                                                                  IKFAST_EVALCOND_THRESH) {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(6);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 1;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 1;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 1;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement) {
                                                              bool bgotonextstatement = true;
                                                              do {
                                                                CheckValue<IkReal> x137 = IKPowWithIntegerCheck(
                                                                    ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                if (!x137.valid) {
                                                                  continue;
                                                                }
                                                                if ((x137.value) < -0.00001) continue;
                                                                IkReal gconst0 = ((-1.0) * (IKsqrt(x137.value)));
                                                                evalcond[0] =
                                                                    ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs((cj3 + (((-1.0) * gconst0))))) +
                                                                              (IKabs(((1.0) + (IKsign(sj3)))))),
                                                                             6.28318530717959)));
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j5eval[1];
                                                                    new_r02 = 0;
                                                                    new_r12 = 0;
                                                                    new_r20 = 0;
                                                                    new_r21 = 0;
                                                                    if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) <
                                                                        -0.00001)
                                                                      continue;
                                                                    sj3 =
                                                                        ((-1.0) *
                                                                         (IKsqrt(((1.0) +
                                                                                  (((-1.0) * (gconst0 * gconst0)))))));
                                                                    cj3 = gconst0;
                                                                    if ((gconst0) < -1 - IKFAST_SINCOS_THRESH ||
                                                                        (gconst0) > 1 + IKFAST_SINCOS_THRESH)
                                                                      continue;
                                                                    j3 = ((-1.0) * (IKacos(gconst0)));
                                                                    CheckValue<IkReal> x138 = IKPowWithIntegerCheck(
                                                                        ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                    if (!x138.valid) {
                                                                      continue;
                                                                    }
                                                                    if ((x138.value) < -0.00001) continue;
                                                                    IkReal gconst0 = ((-1.0) * (IKsqrt(x138.value)));
                                                                    j5eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                    if (IKabs(j5eval[0]) < 0.0000010000000000) {
                                                                      {
                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                        bool j5valid[1] = {false};
                                                                        _nj5 = 1;
                                                                        if ((((1.0) +
                                                                              (((-1.0) * (gconst0 * gconst0))))) <
                                                                            -0.00001)
                                                                          continue;
                                                                        CheckValue<IkReal> x139 =
                                                                            IKPowWithIntegerCheck(gconst0, -1);
                                                                        if (!x139.valid) {
                                                                          continue;
                                                                        }
                                                                        if (IKabs((
                                                                                ((new_r00 *
                                                                                  (IKsqrt(((1.0) +
                                                                                           (((-1.0) * (gconst0 *
                                                                                                       gconst0)))))))) +
                                                                                ((gconst0 * new_r10)))) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs((new_r11 * (x139.value))) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(IKsqr((((new_r00 *
                                                                                           (IKsqrt(((1.0) +
                                                                                                    (((-1.0) *
                                                                                                      (gconst0 *
                                                                                                       gconst0)))))))) +
                                                                                         ((gconst0 * new_r10)))) +
                                                                                  IKsqr((new_r11 * (x139.value))) -
                                                                                  1) <= IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j5array[0] = IKatan2(
                                                                            (((new_r00 *
                                                                               (IKsqrt(((1.0) +
                                                                                        (((-1.0) *
                                                                                          (gconst0 * gconst0)))))))) +
                                                                             ((gconst0 * new_r10))),
                                                                            (new_r11 * (x139.value)));
                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                        if (j5array[0] > IKPI) {
                                                                          j5array[0] -= IK2PI;
                                                                        } else if (j5array[0] < -IKPI) {
                                                                          j5array[0] += IK2PI;
                                                                        }
                                                                        j5valid[0] = true;
                                                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                          if (!j5valid[ij5]) {
                                                                            continue;
                                                                          }
                                                                          _ij5[0] = ij5;
                                                                          _ij5[1] = -1;
                                                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                            if (j5valid[iij5] &&
                                                                                IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                                    IKFAST_SOLUTION_THRESH) {
                                                                              j5valid[iij5] = false;
                                                                              _ij5[1] = iij5;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j5 = j5array[ij5];
                                                                          cj5 = cj5array[ij5];
                                                                          sj5 = sj5array[ij5];
                                                                          {
                                                                            IkReal evalcond[8];
                                                                            IkReal x140 = IKcos(j5);
                                                                            IkReal x141 = IKsin(j5);
                                                                            IkReal x142 = ((1.0) * x141);
                                                                            IkReal x143 = ((1.0) * x140);
                                                                            if ((((1.0) +
                                                                                  (((-1.0) * (gconst0 * gconst0))))) <
                                                                                -0.00001)
                                                                              continue;
                                                                            IkReal x144 = IKsqrt(
                                                                                ((1.0) +
                                                                                 (((-1.0) * (gconst0 * gconst0)))));
                                                                            evalcond[0] = x141;
                                                                            evalcond[1] = ((-1.0) * x140);
                                                                            evalcond[2] =
                                                                                ((((-1.0) * gconst0 * x143)) + new_r11);
                                                                            evalcond[3] =
                                                                                ((((-1.0) * gconst0 * x142)) + new_r10);
                                                                            evalcond[4] =
                                                                                ((((-1.0) * x143 * x144)) + new_r01);
                                                                            evalcond[5] =
                                                                                ((((-1.0) * x142 * x144)) + new_r00);
                                                                            evalcond[6] = ((((-1.0) * x142)) +
                                                                                           ((new_r00 * x144)) +
                                                                                           ((gconst0 * new_r10)));
                                                                            evalcond[7] = ((((-1.0) * x143)) +
                                                                                           ((new_r01 * x144)) +
                                                                                           ((gconst0 * new_r11)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[6]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[7]) >
                                                                                    IKFAST_EVALCOND_THRESH) {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<
                                                                                IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(6);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }

                                                                    } else {
                                                                      {
                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                        bool j5valid[1] = {false};
                                                                        _nj5 = 1;
                                                                        CheckValue<IkReal> x145 =
                                                                            IKPowWithIntegerCheck(IKsign(gconst0), -1);
                                                                        if (!x145.valid) {
                                                                          continue;
                                                                        }
                                                                        CheckValue<IkReal> x146 = IKatan2WithCheck(
                                                                            IkReal(new_r10), IkReal(new_r11),
                                                                            IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x146.valid) {
                                                                          continue;
                                                                        }
                                                                        j5array[0] =
                                                                            ((-1.5707963267949) +
                                                                             (((1.5707963267949) * (x145.value))) +
                                                                             (x146.value));
                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                        if (j5array[0] > IKPI) {
                                                                          j5array[0] -= IK2PI;
                                                                        } else if (j5array[0] < -IKPI) {
                                                                          j5array[0] += IK2PI;
                                                                        }
                                                                        j5valid[0] = true;
                                                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                          if (!j5valid[ij5]) {
                                                                            continue;
                                                                          }
                                                                          _ij5[0] = ij5;
                                                                          _ij5[1] = -1;
                                                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                            if (j5valid[iij5] &&
                                                                                IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                                    IKFAST_SOLUTION_THRESH) {
                                                                              j5valid[iij5] = false;
                                                                              _ij5[1] = iij5;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j5 = j5array[ij5];
                                                                          cj5 = cj5array[ij5];
                                                                          sj5 = sj5array[ij5];
                                                                          {
                                                                            IkReal evalcond[8];
                                                                            IkReal x147 = IKcos(j5);
                                                                            IkReal x148 = IKsin(j5);
                                                                            IkReal x149 = ((1.0) * x148);
                                                                            IkReal x150 = ((1.0) * x147);
                                                                            if ((((1.0) +
                                                                                  (((-1.0) * (gconst0 * gconst0))))) <
                                                                                -0.00001)
                                                                              continue;
                                                                            IkReal x151 = IKsqrt(
                                                                                ((1.0) +
                                                                                 (((-1.0) * (gconst0 * gconst0)))));
                                                                            evalcond[0] = x148;
                                                                            evalcond[1] = ((-1.0) * x147);
                                                                            evalcond[2] =
                                                                                ((((-1.0) * gconst0 * x150)) + new_r11);
                                                                            evalcond[3] =
                                                                                ((((-1.0) * gconst0 * x149)) + new_r10);
                                                                            evalcond[4] =
                                                                                ((((-1.0) * x150 * x151)) + new_r01);
                                                                            evalcond[5] =
                                                                                (new_r00 + (((-1.0) * x149 * x151)));
                                                                            evalcond[6] = ((((-1.0) * x149)) +
                                                                                           ((new_r00 * x151)) +
                                                                                           ((gconst0 * new_r10)));
                                                                            evalcond[7] = ((((-1.0) * x150)) +
                                                                                           ((new_r01 * x151)) +
                                                                                           ((gconst0 * new_r11)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[6]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[7]) >
                                                                                    IKFAST_EVALCOND_THRESH) {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<
                                                                                IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(6);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement) {
                                                                bool bgotonextstatement = true;
                                                                do {
                                                                  CheckValue<IkReal> x152 = IKPowWithIntegerCheck(
                                                                      ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                  if (!x152.valid) {
                                                                    continue;
                                                                  }
                                                                  if ((x152.value) < -0.00001) continue;
                                                                  IkReal gconst1 = IKsqrt(x152.value);
                                                                  evalcond[0] =
                                                                      ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs((cj3 + (((-1.0) * gconst1))))) +
                                                                                (IKabs(((-1.0) + (IKsign(sj3)))))),
                                                                               6.28318530717959)));
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j5eval[1];
                                                                      new_r02 = 0;
                                                                      new_r12 = 0;
                                                                      new_r20 = 0;
                                                                      new_r21 = 0;
                                                                      if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) <
                                                                          -0.00001)
                                                                        continue;
                                                                      sj3 = IKsqrt(
                                                                          ((1.0) + (((-1.0) * (gconst1 * gconst1)))));
                                                                      cj3 = gconst1;
                                                                      if ((gconst1) < -1 - IKFAST_SINCOS_THRESH ||
                                                                          (gconst1) > 1 + IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j3 = IKacos(gconst1);
                                                                      CheckValue<IkReal> x153 = IKPowWithIntegerCheck(
                                                                          ((1.0) + (((-1.0) * (new_r22 * new_r22)))),
                                                                          -1);
                                                                      if (!x153.valid) {
                                                                        continue;
                                                                      }
                                                                      if ((x153.value) < -0.00001) continue;
                                                                      IkReal gconst1 = IKsqrt(x153.value);
                                                                      j5eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                      if (IKabs(j5eval[0]) < 0.0000010000000000) {
                                                                        {
                                                                          IkReal j5array[1], cj5array[1], sj5array[1];
                                                                          bool j5valid[1] = {false};
                                                                          _nj5 = 1;
                                                                          if ((((1.0) +
                                                                                (((-1.0) * (gconst1 * gconst1))))) <
                                                                              -0.00001)
                                                                            continue;
                                                                          CheckValue<IkReal> x154 =
                                                                              IKPowWithIntegerCheck(gconst1, -1);
                                                                          if (!x154.valid) {
                                                                            continue;
                                                                          }
                                                                          if (IKabs((((gconst1 * new_r10)) +
                                                                                     (((-1.0) * new_r00 *
                                                                                       (IKsqrt(((1.0) +
                                                                                                (((-1.0) *
                                                                                                  (gconst1 *
                                                                                                   gconst1)))))))))) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs((new_r11 * (x154.value))) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(
                                                                                  IKsqr(
                                                                                      (((gconst1 * new_r10)) +
                                                                                       (((-1.0) * new_r00 *
                                                                                         (IKsqrt(((1.0) +
                                                                                                  (((-1.0) *
                                                                                                    (gconst1 *
                                                                                                     gconst1)))))))))) +
                                                                                  IKsqr((new_r11 * (x154.value))) -
                                                                                  1) <= IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                          j5array[0] = IKatan2(
                                                                              (((gconst1 * new_r10)) +
                                                                               (((-1.0) * new_r00 *
                                                                                 (IKsqrt(((1.0) +
                                                                                          (((-1.0) *
                                                                                            (gconst1 * gconst1))))))))),
                                                                              (new_r11 * (x154.value)));
                                                                          sj5array[0] = IKsin(j5array[0]);
                                                                          cj5array[0] = IKcos(j5array[0]);
                                                                          if (j5array[0] > IKPI) {
                                                                            j5array[0] -= IK2PI;
                                                                          } else if (j5array[0] < -IKPI) {
                                                                            j5array[0] += IK2PI;
                                                                          }
                                                                          j5valid[0] = true;
                                                                          for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                            if (!j5valid[ij5]) {
                                                                              continue;
                                                                            }
                                                                            _ij5[0] = ij5;
                                                                            _ij5[1] = -1;
                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                              if (j5valid[iij5] &&
                                                                                  IKabs(cj5array[ij5] -
                                                                                        cj5array[iij5]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj5array[ij5] -
                                                                                        sj5array[iij5]) <
                                                                                      IKFAST_SOLUTION_THRESH) {
                                                                                j5valid[iij5] = false;
                                                                                _ij5[1] = iij5;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j5 = j5array[ij5];
                                                                            cj5 = cj5array[ij5];
                                                                            sj5 = sj5array[ij5];
                                                                            {
                                                                              IkReal evalcond[8];
                                                                              IkReal x155 = IKcos(j5);
                                                                              IkReal x156 = IKsin(j5);
                                                                              IkReal x157 = ((1.0) * x156);
                                                                              IkReal x158 = ((1.0) * x155);
                                                                              if ((((1.0) +
                                                                                    (((-1.0) * (gconst1 * gconst1))))) <
                                                                                  -0.00001)
                                                                                continue;
                                                                              IkReal x159 = IKsqrt(
                                                                                  ((1.0) +
                                                                                   (((-1.0) * (gconst1 * gconst1)))));
                                                                              IkReal x160 = ((1.0) * x159);
                                                                              evalcond[0] = x156;
                                                                              evalcond[1] = ((-1.0) * x155);
                                                                              evalcond[2] =
                                                                                  ((((-1.0) * gconst1 * x158)) +
                                                                                   new_r11);
                                                                              evalcond[3] =
                                                                                  ((((-1.0) * gconst1 * x157)) +
                                                                                   new_r10);
                                                                              evalcond[4] = (((x155 * x159)) + new_r01);
                                                                              evalcond[5] = (((x156 * x159)) + new_r00);
                                                                              evalcond[6] =
                                                                                  ((((-1.0) * new_r00 * x160)) +
                                                                                   (((-1.0) * x157)) +
                                                                                   ((gconst1 * new_r10)));
                                                                              evalcond[7] =
                                                                                  ((((-1.0) * x158)) +
                                                                                   ((gconst1 * new_r11)) +
                                                                                   (((-1.0) * new_r01 * x160)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[6]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[7]) >
                                                                                      IKFAST_EVALCOND_THRESH) {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<
                                                                                  IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(6);
                                                                              vinfos[0].jointtype = 1;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 1;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 1;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 1;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }

                                                                      } else {
                                                                        {
                                                                          IkReal j5array[1], cj5array[1], sj5array[1];
                                                                          bool j5valid[1] = {false};
                                                                          _nj5 = 1;
                                                                          CheckValue<IkReal> x161 =
                                                                              IKPowWithIntegerCheck(IKsign(gconst1),
                                                                                                    -1);
                                                                          if (!x161.valid) {
                                                                            continue;
                                                                          }
                                                                          CheckValue<IkReal> x162 = IKatan2WithCheck(
                                                                              IkReal(new_r10), IkReal(new_r11),
                                                                              IKFAST_ATAN2_MAGTHRESH);
                                                                          if (!x162.valid) {
                                                                            continue;
                                                                          }
                                                                          j5array[0] =
                                                                              ((-1.5707963267949) +
                                                                               (((1.5707963267949) * (x161.value))) +
                                                                               (x162.value));
                                                                          sj5array[0] = IKsin(j5array[0]);
                                                                          cj5array[0] = IKcos(j5array[0]);
                                                                          if (j5array[0] > IKPI) {
                                                                            j5array[0] -= IK2PI;
                                                                          } else if (j5array[0] < -IKPI) {
                                                                            j5array[0] += IK2PI;
                                                                          }
                                                                          j5valid[0] = true;
                                                                          for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                            if (!j5valid[ij5]) {
                                                                              continue;
                                                                            }
                                                                            _ij5[0] = ij5;
                                                                            _ij5[1] = -1;
                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                              if (j5valid[iij5] &&
                                                                                  IKabs(cj5array[ij5] -
                                                                                        cj5array[iij5]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj5array[ij5] -
                                                                                        sj5array[iij5]) <
                                                                                      IKFAST_SOLUTION_THRESH) {
                                                                                j5valid[iij5] = false;
                                                                                _ij5[1] = iij5;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j5 = j5array[ij5];
                                                                            cj5 = cj5array[ij5];
                                                                            sj5 = sj5array[ij5];
                                                                            {
                                                                              IkReal evalcond[8];
                                                                              IkReal x163 = IKcos(j5);
                                                                              IkReal x164 = IKsin(j5);
                                                                              IkReal x165 = ((1.0) * x164);
                                                                              IkReal x166 = ((1.0) * x163);
                                                                              if ((((1.0) +
                                                                                    (((-1.0) * (gconst1 * gconst1))))) <
                                                                                  -0.00001)
                                                                                continue;
                                                                              IkReal x167 = IKsqrt(
                                                                                  ((1.0) +
                                                                                   (((-1.0) * (gconst1 * gconst1)))));
                                                                              IkReal x168 = ((1.0) * x167);
                                                                              evalcond[0] = x164;
                                                                              evalcond[1] = ((-1.0) * x163);
                                                                              evalcond[2] =
                                                                                  ((((-1.0) * gconst1 * x166)) +
                                                                                   new_r11);
                                                                              evalcond[3] =
                                                                                  ((((-1.0) * gconst1 * x165)) +
                                                                                   new_r10);
                                                                              evalcond[4] = (new_r01 + ((x163 * x167)));
                                                                              evalcond[5] = (((x164 * x167)) + new_r00);
                                                                              evalcond[6] =
                                                                                  ((((-1.0) * new_r00 * x168)) +
                                                                                   (((-1.0) * x165)) +
                                                                                   ((gconst1 * new_r10)));
                                                                              evalcond[7] =
                                                                                  ((((-1.0) * x166)) +
                                                                                   ((gconst1 * new_r11)) +
                                                                                   (((-1.0) * new_r01 * x168)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[6]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[7]) >
                                                                                      IKFAST_EVALCOND_THRESH) {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<
                                                                                  IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(6);
                                                                              vinfos[0].jointtype = 1;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 1;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 1;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 1;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement) {
                                                                  bool bgotonextstatement = true;
                                                                  do {
                                                                    CheckValue<IkReal> x169 = IKPowWithIntegerCheck(
                                                                        ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                    if (!x169.valid) {
                                                                      continue;
                                                                    }
                                                                    if ((x169.value) < -0.00001) continue;
                                                                    IkReal gconst1 = IKsqrt(x169.value);
                                                                    evalcond[0] =
                                                                        ((-3.14159265358979) +
                                                                         (IKfmod(
                                                                             ((3.14159265358979) +
                                                                              (IKabs((cj3 + (((-1.0) * gconst1))))) +
                                                                              (IKabs(((1.0) + (IKsign(sj3)))))),
                                                                             6.28318530717959)));
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j5eval[1];
                                                                        new_r02 = 0;
                                                                        new_r12 = 0;
                                                                        new_r20 = 0;
                                                                        new_r21 = 0;
                                                                        if ((((1.0) +
                                                                              (((-1.0) * (gconst1 * gconst1))))) <
                                                                            -0.00001)
                                                                          continue;
                                                                        sj3 = ((-1.0) *
                                                                               (IKsqrt((
                                                                                   (1.0) +
                                                                                   (((-1.0) * (gconst1 * gconst1)))))));
                                                                        cj3 = gconst1;
                                                                        if ((gconst1) < -1 - IKFAST_SINCOS_THRESH ||
                                                                            (gconst1) > 1 + IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j3 = ((-1.0) * (IKacos(gconst1)));
                                                                        CheckValue<IkReal> x170 = IKPowWithIntegerCheck(
                                                                            ((1.0) + (((-1.0) * (new_r22 * new_r22)))),
                                                                            -1);
                                                                        if (!x170.valid) {
                                                                          continue;
                                                                        }
                                                                        if ((x170.value) < -0.00001) continue;
                                                                        IkReal gconst1 = IKsqrt(x170.value);
                                                                        j5eval[0] =
                                                                            ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                        if (IKabs(j5eval[0]) < 0.0000010000000000) {
                                                                          {
                                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                                            bool j5valid[1] = {false};
                                                                            _nj5 = 1;
                                                                            if ((((1.0) +
                                                                                  (((-1.0) * (gconst1 * gconst1))))) <
                                                                                -0.00001)
                                                                              continue;
                                                                            CheckValue<IkReal> x171 =
                                                                                IKPowWithIntegerCheck(gconst1, -1);
                                                                            if (!x171.valid) {
                                                                              continue;
                                                                            }
                                                                            if (IKabs((((gconst1 * new_r10)) +
                                                                                       ((new_r00 *
                                                                                         (IKsqrt(((1.0) +
                                                                                                  (((-1.0) *
                                                                                                    (gconst1 *
                                                                                                     gconst1)))))))))) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs((new_r11 * (x171.value))) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(
                                                                                    IKsqr((((gconst1 * new_r10)) +
                                                                                           ((new_r00 *
                                                                                             (IKsqrt(
                                                                                                 ((1.0) +
                                                                                                  (((-1.0) *
                                                                                                    (gconst1 *
                                                                                                     gconst1)))))))))) +
                                                                                    IKsqr((new_r11 * (x171.value))) -
                                                                                    1) <= IKFAST_SINCOS_THRESH)
                                                                              continue;
                                                                            j5array[0] = IKatan2(
                                                                                (((gconst1 * new_r10)) +
                                                                                 ((new_r00 *
                                                                                   (IKsqrt(((1.0) + (((-1.0) *
                                                                                                      (gconst1 *
                                                                                                       gconst1))))))))),
                                                                                (new_r11 * (x171.value)));
                                                                            sj5array[0] = IKsin(j5array[0]);
                                                                            cj5array[0] = IKcos(j5array[0]);
                                                                            if (j5array[0] > IKPI) {
                                                                              j5array[0] -= IK2PI;
                                                                            } else if (j5array[0] < -IKPI) {
                                                                              j5array[0] += IK2PI;
                                                                            }
                                                                            j5valid[0] = true;
                                                                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                              if (!j5valid[ij5]) {
                                                                                continue;
                                                                              }
                                                                              _ij5[0] = ij5;
                                                                              _ij5[1] = -1;
                                                                              for (int iij5 = ij5 + 1; iij5 < 1;
                                                                                   ++iij5) {
                                                                                if (j5valid[iij5] &&
                                                                                    IKabs(cj5array[ij5] -
                                                                                          cj5array[iij5]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj5array[ij5] -
                                                                                          sj5array[iij5]) <
                                                                                        IKFAST_SOLUTION_THRESH) {
                                                                                  j5valid[iij5] = false;
                                                                                  _ij5[1] = iij5;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j5 = j5array[ij5];
                                                                              cj5 = cj5array[ij5];
                                                                              sj5 = sj5array[ij5];
                                                                              {
                                                                                IkReal evalcond[8];
                                                                                IkReal x172 = IKcos(j5);
                                                                                IkReal x173 = IKsin(j5);
                                                                                IkReal x174 = ((1.0) * x173);
                                                                                IkReal x175 = ((1.0) * x172);
                                                                                if ((((1.0) + (((-1.0) * (gconst1 *
                                                                                                          gconst1))))) <
                                                                                    -0.00001)
                                                                                  continue;
                                                                                IkReal x176 = IKsqrt(
                                                                                    ((1.0) +
                                                                                     (((-1.0) * (gconst1 * gconst1)))));
                                                                                evalcond[0] = x173;
                                                                                evalcond[1] = ((-1.0) * x172);
                                                                                evalcond[2] =
                                                                                    ((((-1.0) * gconst1 * x175)) +
                                                                                     new_r11);
                                                                                evalcond[3] =
                                                                                    ((((-1.0) * gconst1 * x174)) +
                                                                                     new_r10);
                                                                                evalcond[4] =
                                                                                    ((((-1.0) * x175 * x176)) +
                                                                                     new_r01);
                                                                                evalcond[5] =
                                                                                    ((((-1.0) * x174 * x176)) +
                                                                                     new_r00);
                                                                                evalcond[6] = (((new_r00 * x176)) +
                                                                                               (((-1.0) * x174)) +
                                                                                               ((gconst1 * new_r10)));
                                                                                evalcond[7] = (((new_r01 * x176)) +
                                                                                               (((-1.0) * x175)) +
                                                                                               ((gconst1 * new_r11)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[6]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[7]) >
                                                                                        IKFAST_EVALCOND_THRESH) {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(6);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 1;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 1;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 1;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }

                                                                        } else {
                                                                          {
                                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                                            bool j5valid[1] = {false};
                                                                            _nj5 = 1;
                                                                            CheckValue<IkReal> x177 =
                                                                                IKPowWithIntegerCheck(IKsign(gconst1),
                                                                                                      -1);
                                                                            if (!x177.valid) {
                                                                              continue;
                                                                            }
                                                                            CheckValue<IkReal> x178 = IKatan2WithCheck(
                                                                                IkReal(new_r10), IkReal(new_r11),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x178.valid) {
                                                                              continue;
                                                                            }
                                                                            j5array[0] =
                                                                                ((-1.5707963267949) +
                                                                                 (((1.5707963267949) * (x177.value))) +
                                                                                 (x178.value));
                                                                            sj5array[0] = IKsin(j5array[0]);
                                                                            cj5array[0] = IKcos(j5array[0]);
                                                                            if (j5array[0] > IKPI) {
                                                                              j5array[0] -= IK2PI;
                                                                            } else if (j5array[0] < -IKPI) {
                                                                              j5array[0] += IK2PI;
                                                                            }
                                                                            j5valid[0] = true;
                                                                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                              if (!j5valid[ij5]) {
                                                                                continue;
                                                                              }
                                                                              _ij5[0] = ij5;
                                                                              _ij5[1] = -1;
                                                                              for (int iij5 = ij5 + 1; iij5 < 1;
                                                                                   ++iij5) {
                                                                                if (j5valid[iij5] &&
                                                                                    IKabs(cj5array[ij5] -
                                                                                          cj5array[iij5]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj5array[ij5] -
                                                                                          sj5array[iij5]) <
                                                                                        IKFAST_SOLUTION_THRESH) {
                                                                                  j5valid[iij5] = false;
                                                                                  _ij5[1] = iij5;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j5 = j5array[ij5];
                                                                              cj5 = cj5array[ij5];
                                                                              sj5 = sj5array[ij5];
                                                                              {
                                                                                IkReal evalcond[8];
                                                                                IkReal x179 = IKcos(j5);
                                                                                IkReal x180 = IKsin(j5);
                                                                                IkReal x181 = ((1.0) * x180);
                                                                                IkReal x182 = ((1.0) * x179);
                                                                                if ((((1.0) + (((-1.0) * (gconst1 *
                                                                                                          gconst1))))) <
                                                                                    -0.00001)
                                                                                  continue;
                                                                                IkReal x183 = IKsqrt(
                                                                                    ((1.0) +
                                                                                     (((-1.0) * (gconst1 * gconst1)))));
                                                                                evalcond[0] = x180;
                                                                                evalcond[1] = ((-1.0) * x179);
                                                                                evalcond[2] =
                                                                                    (new_r11 +
                                                                                     (((-1.0) * gconst1 * x182)));
                                                                                evalcond[3] =
                                                                                    (new_r10 +
                                                                                     (((-1.0) * gconst1 * x181)));
                                                                                evalcond[4] =
                                                                                    (new_r01 +
                                                                                     (((-1.0) * x182 * x183)));
                                                                                evalcond[5] =
                                                                                    (new_r00 +
                                                                                     (((-1.0) * x181 * x183)));
                                                                                evalcond[6] = (((new_r00 * x183)) +
                                                                                               ((gconst1 * new_r10)) +
                                                                                               (((-1.0) * x181)));
                                                                                evalcond[7] = (((new_r01 * x183)) +
                                                                                               ((gconst1 * new_r11)) +
                                                                                               (((-1.0) * x182)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[6]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[7]) >
                                                                                        IKFAST_EVALCOND_THRESH) {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(6);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 1;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 1;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 1;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement) {
                                                                    bool bgotonextstatement = true;
                                                                    do {
                                                                      if (1) {
                                                                        bgotonextstatement = false;
                                                                        continue;  // branch miss [j5]
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement) {
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }

                                                } else {
                                                  {
                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                    bool j5valid[1] = {false};
                                                    _nj5 = 1;
                                                    IkReal x184 = new_r22 * new_r22;
                                                    CheckValue<IkReal> x185 =
                                                        IKPowWithIntegerCheck((((cj3 * x184)) + (((-1.0) * cj3))), -1);
                                                    if (!x185.valid) {
                                                      continue;
                                                    }
                                                    CheckValue<IkReal> x186 =
                                                        IKPowWithIntegerCheck(((((-1.0) * sj3)) + ((sj3 * x184))), -1);
                                                    if (!x186.valid) {
                                                      continue;
                                                    }
                                                    if (IKabs(((x185.value) * (((((-1.0) * new_r01 * new_r22)) +
                                                                                (((-1.0) * new_r10)))))) <
                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(((x186.value) * ((((new_r10 * new_r22)) + new_r01)))) <
                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(((x185.value) * (((((-1.0) * new_r01 * new_r22)) +
                                                                                      (((-1.0) * new_r10)))))) +
                                                              IKsqr(((x186.value) *
                                                                     ((((new_r10 * new_r22)) + new_r01)))) -
                                                              1) <= IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j5array[0] = IKatan2(
                                                        ((x185.value) *
                                                         (((((-1.0) * new_r01 * new_r22)) + (((-1.0) * new_r10))))),
                                                        ((x186.value) * ((((new_r10 * new_r22)) + new_r01))));
                                                    sj5array[0] = IKsin(j5array[0]);
                                                    cj5array[0] = IKcos(j5array[0]);
                                                    if (j5array[0] > IKPI) {
                                                      j5array[0] -= IK2PI;
                                                    } else if (j5array[0] < -IKPI) {
                                                      j5array[0] += IK2PI;
                                                    }
                                                    j5valid[0] = true;
                                                    for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                      if (!j5valid[ij5]) {
                                                        continue;
                                                      }
                                                      _ij5[0] = ij5;
                                                      _ij5[1] = -1;
                                                      for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                        if (j5valid[iij5] &&
                                                            IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                IKFAST_SOLUTION_THRESH) {
                                                          j5valid[iij5] = false;
                                                          _ij5[1] = iij5;
                                                          break;
                                                        }
                                                      }
                                                      j5 = j5array[ij5];
                                                      cj5 = cj5array[ij5];
                                                      sj5 = sj5array[ij5];
                                                      {
                                                        IkReal evalcond[10];
                                                        IkReal x187 = IKsin(j5);
                                                        IkReal x188 = IKcos(j5);
                                                        IkReal x189 = (cj3 * new_r22);
                                                        IkReal x190 = (new_r22 * sj3);
                                                        IkReal x191 = ((1.0) * sj3);
                                                        IkReal x192 = ((1.0) * x188);
                                                        IkReal x193 = (sj3 * x187);
                                                        IkReal x194 = ((1.0) * x187);
                                                        evalcond[0] = (((new_r11 * sj3)) + ((new_r22 * x187)) +
                                                                       ((cj3 * new_r01)));
                                                        evalcond[1] = (((new_r11 * x190)) + ((new_r01 * x189)) + x187);
                                                        evalcond[2] = ((((-1.0) * x194)) + ((cj3 * new_r10)) +
                                                                       (((-1.0) * new_r00 * x191)));
                                                        evalcond[3] = ((((-1.0) * x192)) + (((-1.0) * new_r01 * x191)) +
                                                                       ((cj3 * new_r11)));
                                                        evalcond[4] = (((sj3 * x188)) + ((x187 * x189)) + new_r01);
                                                        evalcond[5] = (((new_r10 * sj3)) + (((-1.0) * new_r22 * x192)) +
                                                                       ((cj3 * new_r00)));
                                                        evalcond[6] = ((((-1.0) * x189 * x192)) + x193 + new_r00);
                                                        evalcond[7] =
                                                            (((x187 * x190)) + new_r11 + (((-1.0) * cj3 * x192)));
                                                        evalcond[8] = (((new_r10 * x190)) + ((new_r00 * x189)) +
                                                                       (((-1.0) * x192)));
                                                        evalcond[9] = ((((-1.0) * x190 * x192)) + new_r10 +
                                                                       (((-1.0) * cj3 * x194)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH) {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        vinfos[3].jointtype = 1;
                                                        vinfos[3].foffset = j3;
                                                        vinfos[3].indices[0] = _ij3[0];
                                                        vinfos[3].indices[1] = _ij3[1];
                                                        vinfos[3].maxsolutions = _nj3;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j4;
                                                        vinfos[4].indices[0] = _ij4[0];
                                                        vinfos[4].indices[1] = _ij4[1];
                                                        vinfos[4].maxsolutions = _nj4;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j5;
                                                        vinfos[5].indices[0] = _ij5[0];
                                                        vinfos[5].indices[1] = _ij5[1];
                                                        vinfos[5].maxsolutions = _nj5;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              }

                                            } else {
                                              {
                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1] = {false};
                                                _nj5 = 1;
                                                IkReal x195 = ((1.0) * new_r01);
                                                CheckValue<IkReal> x196 = IKPowWithIntegerCheck(new_r22, -1);
                                                if (!x196.valid) {
                                                  continue;
                                                }
                                                if (IKabs(((x196.value) *
                                                           (((((-1.0) * new_r11 * sj3)) + (((-1.0) * cj3 * x195)))))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(((((-1.0) * sj3 * x195)) + ((cj3 * new_r11)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(((x196.value) * (((((-1.0) * new_r11 * sj3)) +
                                                                                  (((-1.0) * cj3 * x195)))))) +
                                                          IKsqr(((((-1.0) * sj3 * x195)) + ((cj3 * new_r11)))) - 1) <=
                                                        IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j5array[0] =
                                                    IKatan2(((x196.value) *
                                                             (((((-1.0) * new_r11 * sj3)) + (((-1.0) * cj3 * x195))))),
                                                            ((((-1.0) * sj3 * x195)) + ((cj3 * new_r11))));
                                                sj5array[0] = IKsin(j5array[0]);
                                                cj5array[0] = IKcos(j5array[0]);
                                                if (j5array[0] > IKPI) {
                                                  j5array[0] -= IK2PI;
                                                } else if (j5array[0] < -IKPI) {
                                                  j5array[0] += IK2PI;
                                                }
                                                j5valid[0] = true;
                                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                  if (!j5valid[ij5]) {
                                                    continue;
                                                  }
                                                  _ij5[0] = ij5;
                                                  _ij5[1] = -1;
                                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                    if (j5valid[iij5] &&
                                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                            IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                            IKFAST_SOLUTION_THRESH) {
                                                      j5valid[iij5] = false;
                                                      _ij5[1] = iij5;
                                                      break;
                                                    }
                                                  }
                                                  j5 = j5array[ij5];
                                                  cj5 = cj5array[ij5];
                                                  sj5 = sj5array[ij5];
                                                  {
                                                    IkReal evalcond[10];
                                                    IkReal x197 = IKsin(j5);
                                                    IkReal x198 = IKcos(j5);
                                                    IkReal x199 = (cj3 * new_r22);
                                                    IkReal x200 = (new_r22 * sj3);
                                                    IkReal x201 = ((1.0) * sj3);
                                                    IkReal x202 = ((1.0) * x198);
                                                    IkReal x203 = (sj3 * x197);
                                                    IkReal x204 = ((1.0) * x197);
                                                    evalcond[0] =
                                                        (((new_r11 * sj3)) + ((new_r22 * x197)) + ((cj3 * new_r01)));
                                                    evalcond[1] = (((new_r01 * x199)) + ((new_r11 * x200)) + x197);
                                                    evalcond[2] = ((((-1.0) * new_r00 * x201)) + (((-1.0) * x204)) +
                                                                   ((cj3 * new_r10)));
                                                    evalcond[3] = ((((-1.0) * x202)) + ((cj3 * new_r11)) +
                                                                   (((-1.0) * new_r01 * x201)));
                                                    evalcond[4] = (((sj3 * x198)) + new_r01 + ((x197 * x199)));
                                                    evalcond[5] = ((((-1.0) * new_r22 * x202)) + ((new_r10 * sj3)) +
                                                                   ((cj3 * new_r00)));
                                                    evalcond[6] = (x203 + (((-1.0) * x199 * x202)) + new_r00);
                                                    evalcond[7] = (((x197 * x200)) + new_r11 + (((-1.0) * cj3 * x202)));
                                                    evalcond[8] =
                                                        (((new_r00 * x199)) + ((new_r10 * x200)) + (((-1.0) * x202)));
                                                    evalcond[9] =
                                                        ((((-1.0) * x200 * x202)) + new_r10 + (((-1.0) * cj3 * x204)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH) {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                    vinfos[0].jointtype = 1;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 1;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 1;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 1;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          }

                                        } else {
                                          {
                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1] = {false};
                                            _nj5 = 1;
                                            IkReal x205 = cj3 * cj3;
                                            IkReal x206 = (cj3 * new_r22);
                                            CheckValue<IkReal> x207 = IKatan2WithCheck(
                                                IkReal((((new_r00 * sj3)) + ((new_r01 * x206)))),
                                                IkReal((((new_r01 * sj3)) + (((-1.0) * new_r00 * x206)))),
                                                IKFAST_ATAN2_MAGTHRESH);
                                            if (!x207.valid) {
                                              continue;
                                            }
                                            CheckValue<IkReal> x208 = IKPowWithIntegerCheck(
                                                IKsign(((-1.0) + (((-1.0) * x205 * (new_r22 * new_r22))) + x205)), -1);
                                            if (!x208.valid) {
                                              continue;
                                            }
                                            j5array[0] = ((-1.5707963267949) + (x207.value) +
                                                          (((1.5707963267949) * (x208.value))));
                                            sj5array[0] = IKsin(j5array[0]);
                                            cj5array[0] = IKcos(j5array[0]);
                                            if (j5array[0] > IKPI) {
                                              j5array[0] -= IK2PI;
                                            } else if (j5array[0] < -IKPI) {
                                              j5array[0] += IK2PI;
                                            }
                                            j5valid[0] = true;
                                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                                              if (!j5valid[ij5]) {
                                                continue;
                                              }
                                              _ij5[0] = ij5;
                                              _ij5[1] = -1;
                                              for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                if (j5valid[iij5] &&
                                                    IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                                  j5valid[iij5] = false;
                                                  _ij5[1] = iij5;
                                                  break;
                                                }
                                              }
                                              j5 = j5array[ij5];
                                              cj5 = cj5array[ij5];
                                              sj5 = sj5array[ij5];
                                              {
                                                IkReal evalcond[10];
                                                IkReal x209 = IKsin(j5);
                                                IkReal x210 = IKcos(j5);
                                                IkReal x211 = (cj3 * new_r22);
                                                IkReal x212 = (new_r22 * sj3);
                                                IkReal x213 = ((1.0) * sj3);
                                                IkReal x214 = ((1.0) * x210);
                                                IkReal x215 = (sj3 * x209);
                                                IkReal x216 = ((1.0) * x209);
                                                evalcond[0] =
                                                    (((new_r11 * sj3)) + ((new_r22 * x209)) + ((cj3 * new_r01)));
                                                evalcond[1] = (x209 + ((new_r01 * x211)) + ((new_r11 * x212)));
                                                evalcond[2] = (((cj3 * new_r10)) + (((-1.0) * x216)) +
                                                               (((-1.0) * new_r00 * x213)));
                                                evalcond[3] = ((((-1.0) * new_r01 * x213)) + ((cj3 * new_r11)) +
                                                               (((-1.0) * x214)));
                                                evalcond[4] = (((x209 * x211)) + ((sj3 * x210)) + new_r01);
                                                evalcond[5] = (((new_r10 * sj3)) + (((-1.0) * new_r22 * x214)) +
                                                               ((cj3 * new_r00)));
                                                evalcond[6] = (x215 + (((-1.0) * x211 * x214)) + new_r00);
                                                evalcond[7] = ((((-1.0) * cj3 * x214)) + ((x209 * x212)) + new_r11);
                                                evalcond[8] =
                                                    (((new_r00 * x211)) + (((-1.0) * x214)) + ((new_r10 * x212)));
                                                evalcond[9] =
                                                    ((((-1.0) * cj3 * x216)) + new_r10 + (((-1.0) * x212 * x214)));
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH) {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                vinfos[0].jointtype = 1;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 1;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 1;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 1;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            } while (0);
                            if (bgotonextstatement) {
                              bool bgotonextstatement = true;
                              do {
                                if (1) {
                                  bgotonextstatement = false;
                                  continue;  // branch miss [j3, j5]
                                }
                              } while (0);
                              if (bgotonextstatement) {
                              }
                            }
                          }
                        }
                      }

                    } else {
                      {
                        IkReal j3array[1], cj3array[1], sj3array[1];
                        bool j3valid[1] = {false};
                        _nj3 = 1;
                        CheckValue<IkReal> x218 = IKPowWithIntegerCheck(sj4, -1);
                        if (!x218.valid) {
                          continue;
                        }
                        IkReal x217 = x218.value;
                        CheckValue<IkReal> x219 = IKPowWithIntegerCheck(new_r12, -1);
                        if (!x219.valid) {
                          continue;
                        }
                        if (IKabs((x217 * (x219.value) *
                                   (((1.0) + (((-1.0) * (cj4 * cj4))) + (((-1.0) * (new_r02 * new_r02))))))) <
                                IKFAST_ATAN2_MAGTHRESH &&
                            IKabs((new_r02 * x217)) < IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(IKsqr((x217 * (x219.value) *
                                         (((1.0) + (((-1.0) * (cj4 * cj4))) + (((-1.0) * (new_r02 * new_r02))))))) +
                                  IKsqr((new_r02 * x217)) - 1) <= IKFAST_SINCOS_THRESH)
                          continue;
                        j3array[0] = IKatan2((x217 * (x219.value) *
                                              (((1.0) + (((-1.0) * (cj4 * cj4))) + (((-1.0) * (new_r02 * new_r02)))))),
                                             (new_r02 * x217));
                        sj3array[0] = IKsin(j3array[0]);
                        cj3array[0] = IKcos(j3array[0]);
                        if (j3array[0] > IKPI) {
                          j3array[0] -= IK2PI;
                        } else if (j3array[0] < -IKPI) {
                          j3array[0] += IK2PI;
                        }
                        j3valid[0] = true;
                        for (int ij3 = 0; ij3 < 1; ++ij3) {
                          if (!j3valid[ij3]) {
                            continue;
                          }
                          _ij3[0] = ij3;
                          _ij3[1] = -1;
                          for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                            if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH) {
                              j3valid[iij3] = false;
                              _ij3[1] = iij3;
                              break;
                            }
                          }
                          j3 = j3array[ij3];
                          cj3 = cj3array[ij3];
                          sj3 = sj3array[ij3];
                          {
                            IkReal evalcond[8];
                            IkReal x220 = IKcos(j3);
                            IkReal x221 = IKsin(j3);
                            IkReal x222 = ((1.0) * sj4);
                            IkReal x223 = ((1.0) * cj4);
                            IkReal x224 = (new_r02 * x220);
                            IkReal x225 = (new_r12 * x221);
                            evalcond[0] = ((((-1.0) * x220 * x222)) + new_r02);
                            evalcond[1] = ((((-1.0) * x221 * x222)) + new_r12);
                            evalcond[2] = (((new_r12 * x220)) + (((-1.0) * new_r02 * x221)));
                            evalcond[3] = (x225 + x224 + (((-1.0) * x222)));
                            evalcond[4] = ((((-1.0) * new_r22 * x222)) + ((cj4 * x224)) + ((cj4 * x225)));
                            evalcond[5] = ((((-1.0) * new_r00 * x220 * x222)) + (((-1.0) * new_r10 * x221 * x222)) +
                                           (((-1.0) * new_r20 * x223)));
                            evalcond[6] = ((((-1.0) * new_r11 * x221 * x222)) + (((-1.0) * new_r01 * x220 * x222)) +
                                           (((-1.0) * new_r21 * x223)));
                            evalcond[7] = ((1.0) + (((-1.0) * x222 * x224)) + (((-1.0) * x222 * x225)) +
                                           (((-1.0) * new_r22 * x223)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                              continue;
                            }
                          }

                          {
                            IkReal j5eval[3];
                            j5eval[0] = sj4;
                            j5eval[1] = IKsign(sj4);
                            j5eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 ||
                                IKabs(j5eval[2]) < 0.0000010000000000) {
                              {
                                IkReal j5eval[2];
                                j5eval[0] = sj3;
                                j5eval[1] = sj4;
                                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000) {
                                  {
                                    IkReal j5eval[3];
                                    j5eval[0] = cj3;
                                    j5eval[1] = cj4;
                                    j5eval[2] = sj4;
                                    if (IKabs(j5eval[0]) < 0.0000010000000000 ||
                                        IKabs(j5eval[1]) < 0.0000010000000000 ||
                                        IKabs(j5eval[2]) < 0.0000010000000000) {
                                      {
                                        IkReal evalcond[5];
                                        bool bgotonextstatement = true;
                                        do {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j3)))),
                                                       6.28318530717959)));
                                          evalcond[1] = new_r02;
                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                              IKabs(evalcond[1]) < 0.0000050000000000) {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j5eval[3];
                                              sj3 = 1.0;
                                              cj3 = 0;
                                              j3 = 1.5707963267949;
                                              j5eval[0] = sj4;
                                              j5eval[1] = IKsign(sj4);
                                              j5eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                              if (IKabs(j5eval[0]) < 0.0000010000000000 ||
                                                  IKabs(j5eval[1]) < 0.0000010000000000 ||
                                                  IKabs(j5eval[2]) < 0.0000010000000000) {
                                                {
                                                  IkReal j5eval[3];
                                                  sj3 = 1.0;
                                                  cj3 = 0;
                                                  j3 = 1.5707963267949;
                                                  j5eval[0] = cj4;
                                                  j5eval[1] = IKsign(cj4);
                                                  j5eval[2] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                  if (IKabs(j5eval[0]) < 0.0000010000000000 ||
                                                      IKabs(j5eval[1]) < 0.0000010000000000 ||
                                                      IKabs(j5eval[2]) < 0.0000010000000000) {
                                                    {
                                                      IkReal j5eval[1];
                                                      sj3 = 1.0;
                                                      cj3 = 0;
                                                      j3 = 1.5707963267949;
                                                      j5eval[0] = sj4;
                                                      if (IKabs(j5eval[0]) < 0.0000010000000000) {
                                                        {
                                                          IkReal evalcond[4];
                                                          bool bgotonextstatement = true;
                                                          do {
                                                            evalcond[0] = ((-3.14159265358979) +
                                                                           (IKfmod(((3.14159265358979) + (IKabs(j4))),
                                                                                   6.28318530717959)));
                                                            evalcond[1] = new_r20;
                                                            evalcond[2] = new_r12;
                                                            evalcond[3] = new_r21;
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                IKabs(evalcond[3]) < 0.0000050000000000) {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                bool j5valid[1] = {false};
                                                                _nj5 = 1;
                                                                if (IKabs(((-1.0) * new_r11)) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((-1.0) * new_r11)) + IKsqr(new_r10) -
                                                                          1) <= IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j5array[0] = IKatan2(((-1.0) * new_r11), new_r10);
                                                                sj5array[0] = IKsin(j5array[0]);
                                                                cj5array[0] = IKcos(j5array[0]);
                                                                if (j5array[0] > IKPI) {
                                                                  j5array[0] -= IK2PI;
                                                                } else if (j5array[0] < -IKPI) {
                                                                  j5array[0] += IK2PI;
                                                                }
                                                                j5valid[0] = true;
                                                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                  if (!j5valid[ij5]) {
                                                                    continue;
                                                                  }
                                                                  _ij5[0] = ij5;
                                                                  _ij5[1] = -1;
                                                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                    if (j5valid[iij5] &&
                                                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j5valid[iij5] = false;
                                                                      _ij5[1] = iij5;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j5 = j5array[ij5];
                                                                  cj5 = cj5array[ij5];
                                                                  sj5 = sj5array[ij5];
                                                                  {
                                                                    IkReal evalcond[4];
                                                                    IkReal x226 = IKsin(j5);
                                                                    IkReal x227 = ((1.0) * (IKcos(j5)));
                                                                    evalcond[0] = (x226 + new_r11);
                                                                    evalcond[1] = (new_r10 + (((-1.0) * x227)));
                                                                    evalcond[2] =
                                                                        ((((-1.0) * new_r00)) + (((-1.0) * x226)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * new_r01)) + (((-1.0) * x227)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(6);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement) {
                                                            bool bgotonextstatement = true;
                                                            do {
                                                              evalcond[0] =
                                                                  ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-3.14159265358979) + j4)))),
                                                                           6.28318530717959)));
                                                              evalcond[1] = new_r20;
                                                              evalcond[2] = new_r12;
                                                              evalcond[3] = new_r21;
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                  IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                  IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                  IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j5array[1], cj5array[1], sj5array[1];
                                                                  bool j5valid[1] = {false};
                                                                  _nj5 = 1;
                                                                  if (IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                                      IKabs(((-1.0) * new_r10)) <
                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                      IKabs(IKsqr(new_r11) + IKsqr(((-1.0) * new_r10)) -
                                                                            1) <= IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                  j5array[0] = IKatan2(new_r11, ((-1.0) * new_r10));
                                                                  sj5array[0] = IKsin(j5array[0]);
                                                                  cj5array[0] = IKcos(j5array[0]);
                                                                  if (j5array[0] > IKPI) {
                                                                    j5array[0] -= IK2PI;
                                                                  } else if (j5array[0] < -IKPI) {
                                                                    j5array[0] += IK2PI;
                                                                  }
                                                                  j5valid[0] = true;
                                                                  for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                    if (!j5valid[ij5]) {
                                                                      continue;
                                                                    }
                                                                    _ij5[0] = ij5;
                                                                    _ij5[1] = -1;
                                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                      if (j5valid[iij5] &&
                                                                          IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                              IKFAST_SOLUTION_THRESH &&
                                                                          IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                              IKFAST_SOLUTION_THRESH) {
                                                                        j5valid[iij5] = false;
                                                                        _ij5[1] = iij5;
                                                                        break;
                                                                      }
                                                                    }
                                                                    j5 = j5array[ij5];
                                                                    cj5 = cj5array[ij5];
                                                                    sj5 = sj5array[ij5];
                                                                    {
                                                                      IkReal evalcond[4];
                                                                      IkReal x228 = IKcos(j5);
                                                                      IkReal x229 = ((1.0) * (IKsin(j5)));
                                                                      evalcond[0] = (x228 + new_r10);
                                                                      evalcond[1] = (new_r11 + (((-1.0) * x229)));
                                                                      evalcond[2] =
                                                                          ((((-1.0) * new_r00)) + (((-1.0) * x229)));
                                                                      evalcond[3] =
                                                                          ((((-1.0) * new_r01)) + (((-1.0) * x228)));
                                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                        continue;
                                                                      }
                                                                    }

                                                                    {
                                                                      std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                          vinfos(6);
                                                                      vinfos[0].jointtype = 1;
                                                                      vinfos[0].foffset = j0;
                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                      vinfos[0].maxsolutions = _nj0;
                                                                      vinfos[1].jointtype = 1;
                                                                      vinfos[1].foffset = j1;
                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                      vinfos[1].maxsolutions = _nj1;
                                                                      vinfos[2].jointtype = 1;
                                                                      vinfos[2].foffset = j2;
                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                      vinfos[2].maxsolutions = _nj2;
                                                                      vinfos[3].jointtype = 1;
                                                                      vinfos[3].foffset = j3;
                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                      vinfos[3].maxsolutions = _nj3;
                                                                      vinfos[4].jointtype = 1;
                                                                      vinfos[4].foffset = j4;
                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                      vinfos[4].maxsolutions = _nj4;
                                                                      vinfos[5].jointtype = 1;
                                                                      vinfos[5].foffset = j5;
                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                      vinfos[5].maxsolutions = _nj5;
                                                                      std::vector<int> vfree(0);
                                                                      solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement) {
                                                              bool bgotonextstatement = true;
                                                              do {
                                                                evalcond[0] =
                                                                    ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((-1.5707963267949) + j4)))),
                                                                             6.28318530717959)));
                                                                evalcond[1] = new_r22;
                                                                evalcond[2] = new_r11;
                                                                evalcond[3] = new_r10;
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                    IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                    IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                    IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                                    bool j5valid[1] = {false};
                                                                    _nj5 = 1;
                                                                    if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(((-1.0) * new_r20)) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(IKsqr(new_r21) +
                                                                              IKsqr(((-1.0) * new_r20)) - 1) <=
                                                                            IKFAST_SINCOS_THRESH)
                                                                      continue;
                                                                    j5array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                    if (j5array[0] > IKPI) {
                                                                      j5array[0] -= IK2PI;
                                                                    } else if (j5array[0] < -IKPI) {
                                                                      j5array[0] += IK2PI;
                                                                    }
                                                                    j5valid[0] = true;
                                                                    for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                      if (!j5valid[ij5]) {
                                                                        continue;
                                                                      }
                                                                      _ij5[0] = ij5;
                                                                      _ij5[1] = -1;
                                                                      for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                        if (j5valid[iij5] &&
                                                                            IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                                IKFAST_SOLUTION_THRESH &&
                                                                            IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                                IKFAST_SOLUTION_THRESH) {
                                                                          j5valid[iij5] = false;
                                                                          _ij5[1] = iij5;
                                                                          break;
                                                                        }
                                                                      }
                                                                      j5 = j5array[ij5];
                                                                      cj5 = cj5array[ij5];
                                                                      sj5 = sj5array[ij5];
                                                                      {
                                                                        IkReal evalcond[4];
                                                                        IkReal x230 = IKcos(j5);
                                                                        IkReal x231 = ((1.0) * (IKsin(j5)));
                                                                        evalcond[0] = (x230 + new_r20);
                                                                        evalcond[1] = ((((-1.0) * x231)) + new_r21);
                                                                        evalcond[2] =
                                                                            ((((-1.0) * x231)) + (((-1.0) * new_r00)));
                                                                        evalcond[3] =
                                                                            ((((-1.0) * new_r01)) + (((-1.0) * x230)));
                                                                        if (IKabs(evalcond[0]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[1]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[2]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[3]) >
                                                                                IKFAST_EVALCOND_THRESH) {
                                                                          continue;
                                                                        }
                                                                      }

                                                                      {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                            vinfos(6);
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        vinfos[3].jointtype = 1;
                                                                        vinfos[3].foffset = j3;
                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                        vinfos[3].maxsolutions = _nj3;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j4;
                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                        vinfos[4].maxsolutions = _nj4;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j5;
                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                        vinfos[5].maxsolutions = _nj5;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement) {
                                                                bool bgotonextstatement = true;
                                                                do {
                                                                  evalcond[0] =
                                                                      ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((1.5707963267949) + j4)))),
                                                                               6.28318530717959)));
                                                                  evalcond[1] = new_r22;
                                                                  evalcond[2] = new_r11;
                                                                  evalcond[3] = new_r10;
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j5array[1], cj5array[1], sj5array[1];
                                                                      bool j5valid[1] = {false};
                                                                      _nj5 = 1;
                                                                      if (IKabs(((-1.0) * new_r21)) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr(((-1.0) * new_r21)) +
                                                                                IKsqr(new_r20) - 1) <=
                                                                              IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j5array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                      sj5array[0] = IKsin(j5array[0]);
                                                                      cj5array[0] = IKcos(j5array[0]);
                                                                      if (j5array[0] > IKPI) {
                                                                        j5array[0] -= IK2PI;
                                                                      } else if (j5array[0] < -IKPI) {
                                                                        j5array[0] += IK2PI;
                                                                      }
                                                                      j5valid[0] = true;
                                                                      for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                        if (!j5valid[ij5]) {
                                                                          continue;
                                                                        }
                                                                        _ij5[0] = ij5;
                                                                        _ij5[1] = -1;
                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                          if (j5valid[iij5] &&
                                                                              IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                                  IKFAST_SOLUTION_THRESH) {
                                                                            j5valid[iij5] = false;
                                                                            _ij5[1] = iij5;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j5 = j5array[ij5];
                                                                        cj5 = cj5array[ij5];
                                                                        sj5 = sj5array[ij5];
                                                                        {
                                                                          IkReal evalcond[4];
                                                                          IkReal x232 = IKsin(j5);
                                                                          IkReal x233 = ((1.0) * (IKcos(j5)));
                                                                          evalcond[0] = (x232 + new_r21);
                                                                          evalcond[1] = ((((-1.0) * x233)) + new_r20);
                                                                          evalcond[2] = ((((-1.0) * new_r00)) +
                                                                                         (((-1.0) * x232)));
                                                                          evalcond[3] = ((((-1.0) * x233)) +
                                                                                         (((-1.0) * new_r01)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH) {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(6);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 1;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 1;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 1;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement) {
                                                                  bool bgotonextstatement = true;
                                                                  do {
                                                                    evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                        bool j5valid[1] = {false};
                                                                        _nj5 = 1;
                                                                        if (IKabs(((-1.0) * new_r00)) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(((-1.0) * new_r01)) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                                  IKsqr(((-1.0) * new_r01)) - 1) <=
                                                                                IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j5array[0] = IKatan2(((-1.0) * new_r00),
                                                                                             ((-1.0) * new_r01));
                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                        if (j5array[0] > IKPI) {
                                                                          j5array[0] -= IK2PI;
                                                                        } else if (j5array[0] < -IKPI) {
                                                                          j5array[0] += IK2PI;
                                                                        }
                                                                        j5valid[0] = true;
                                                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                          if (!j5valid[ij5]) {
                                                                            continue;
                                                                          }
                                                                          _ij5[0] = ij5;
                                                                          _ij5[1] = -1;
                                                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                            if (j5valid[iij5] &&
                                                                                IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                                    IKFAST_SOLUTION_THRESH) {
                                                                              j5valid[iij5] = false;
                                                                              _ij5[1] = iij5;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j5 = j5array[ij5];
                                                                          cj5 = cj5array[ij5];
                                                                          sj5 = sj5array[ij5];
                                                                          {
                                                                            IkReal evalcond[6];
                                                                            IkReal x234 = IKsin(j5);
                                                                            IkReal x235 = IKcos(j5);
                                                                            IkReal x236 = ((-1.0) * x235);
                                                                            evalcond[0] = x234;
                                                                            evalcond[1] = (new_r22 * x234);
                                                                            evalcond[2] = x236;
                                                                            evalcond[3] = (new_r22 * x236);
                                                                            evalcond[4] = ((((-1.0) * new_r00)) +
                                                                                           (((-1.0) * x234)));
                                                                            evalcond[5] = ((((-1.0) * new_r01)) +
                                                                                           (((-1.0) * x235)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH) {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<
                                                                                IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(6);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement) {
                                                                    bool bgotonextstatement = true;
                                                                    do {
                                                                      if (1) {
                                                                        bgotonextstatement = false;
                                                                        continue;  // branch miss [j5]
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement) {
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }

                                                      } else {
                                                        {
                                                          IkReal j5array[1], cj5array[1], sj5array[1];
                                                          bool j5valid[1] = {false};
                                                          _nj5 = 1;
                                                          CheckValue<IkReal> x237 = IKPowWithIntegerCheck(sj4, -1);
                                                          if (!x237.valid) {
                                                            continue;
                                                          }
                                                          if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(((-1.0) * new_r20 * (x237.value))) <
                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                    IKsqr(((-1.0) * new_r20 * (x237.value))) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j5array[0] = IKatan2(((-1.0) * new_r00),
                                                                               ((-1.0) * new_r20 * (x237.value)));
                                                          sj5array[0] = IKsin(j5array[0]);
                                                          cj5array[0] = IKcos(j5array[0]);
                                                          if (j5array[0] > IKPI) {
                                                            j5array[0] -= IK2PI;
                                                          } else if (j5array[0] < -IKPI) {
                                                            j5array[0] += IK2PI;
                                                          }
                                                          j5valid[0] = true;
                                                          for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                            if (!j5valid[ij5]) {
                                                              continue;
                                                            }
                                                            _ij5[0] = ij5;
                                                            _ij5[1] = -1;
                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                              if (j5valid[iij5] &&
                                                                  IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j5valid[iij5] = false;
                                                                _ij5[1] = iij5;
                                                                break;
                                                              }
                                                            }
                                                            j5 = j5array[ij5];
                                                            cj5 = cj5array[ij5];
                                                            sj5 = sj5array[ij5];
                                                            {
                                                              IkReal evalcond[8];
                                                              IkReal x238 = IKsin(j5);
                                                              IkReal x239 = IKcos(j5);
                                                              IkReal x240 = ((1.0) * sj4);
                                                              IkReal x241 = ((1.0) * x239);
                                                              IkReal x242 = ((1.0) * x238);
                                                              evalcond[0] = (((sj4 * x239)) + new_r20);
                                                              evalcond[1] = (((cj4 * x238)) + new_r11);
                                                              evalcond[2] = ((((-1.0) * x238 * x240)) + new_r21);
                                                              evalcond[3] = ((((-1.0) * cj4 * x241)) + new_r10);
                                                              evalcond[4] = ((((-1.0) * new_r00)) + (((-1.0) * x242)));
                                                              evalcond[5] = ((((-1.0) * new_r01)) + (((-1.0) * x241)));
                                                              evalcond[6] = (((cj4 * new_r11)) +
                                                                             (((-1.0) * new_r21 * x240)) + x238);
                                                              evalcond[7] =
                                                                  (((cj4 * new_r10)) + (((-1.0) * new_r20 * x240)) +
                                                                   (((-1.0) * x241)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 1;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 1;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 1;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }

                                                  } else {
                                                    {
                                                      IkReal j5array[1], cj5array[1], sj5array[1];
                                                      bool j5valid[1] = {false};
                                                      _nj5 = 1;
                                                      CheckValue<IkReal> x243 = IKPowWithIntegerCheck(IKsign(cj4), -1);
                                                      if (!x243.valid) {
                                                        continue;
                                                      }
                                                      CheckValue<IkReal> x244 =
                                                          IKatan2WithCheck(IkReal(((-1.0) * new_r11)), IkReal(new_r10),
                                                                           IKFAST_ATAN2_MAGTHRESH);
                                                      if (!x244.valid) {
                                                        continue;
                                                      }
                                                      j5array[0] =
                                                          ((-1.5707963267949) + (((1.5707963267949) * (x243.value))) +
                                                           (x244.value));
                                                      sj5array[0] = IKsin(j5array[0]);
                                                      cj5array[0] = IKcos(j5array[0]);
                                                      if (j5array[0] > IKPI) {
                                                        j5array[0] -= IK2PI;
                                                      } else if (j5array[0] < -IKPI) {
                                                        j5array[0] += IK2PI;
                                                      }
                                                      j5valid[0] = true;
                                                      for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                        if (!j5valid[ij5]) {
                                                          continue;
                                                        }
                                                        _ij5[0] = ij5;
                                                        _ij5[1] = -1;
                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                          if (j5valid[iij5] &&
                                                              IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                  IKFAST_SOLUTION_THRESH) {
                                                            j5valid[iij5] = false;
                                                            _ij5[1] = iij5;
                                                            break;
                                                          }
                                                        }
                                                        j5 = j5array[ij5];
                                                        cj5 = cj5array[ij5];
                                                        sj5 = sj5array[ij5];
                                                        {
                                                          IkReal evalcond[8];
                                                          IkReal x245 = IKsin(j5);
                                                          IkReal x246 = IKcos(j5);
                                                          IkReal x247 = ((1.0) * sj4);
                                                          IkReal x248 = ((1.0) * x246);
                                                          IkReal x249 = ((1.0) * x245);
                                                          evalcond[0] = (new_r20 + ((sj4 * x246)));
                                                          evalcond[1] = (((cj4 * x245)) + new_r11);
                                                          evalcond[2] = ((((-1.0) * x245 * x247)) + new_r21);
                                                          evalcond[3] = ((((-1.0) * cj4 * x248)) + new_r10);
                                                          evalcond[4] = ((((-1.0) * new_r00)) + (((-1.0) * x249)));
                                                          evalcond[5] = ((((-1.0) * new_r01)) + (((-1.0) * x248)));
                                                          evalcond[6] =
                                                              (((cj4 * new_r11)) + (((-1.0) * new_r21 * x247)) + x245);
                                                          evalcond[7] =
                                                              (((cj4 * new_r10)) + (((-1.0) * new_r20 * x247)) +
                                                               (((-1.0) * x248)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                            continue;
                                                          }
                                                        }

                                                        {
                                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                          vinfos[0].jointtype = 1;
                                                          vinfos[0].foffset = j0;
                                                          vinfos[0].indices[0] = _ij0[0];
                                                          vinfos[0].indices[1] = _ij0[1];
                                                          vinfos[0].maxsolutions = _nj0;
                                                          vinfos[1].jointtype = 1;
                                                          vinfos[1].foffset = j1;
                                                          vinfos[1].indices[0] = _ij1[0];
                                                          vinfos[1].indices[1] = _ij1[1];
                                                          vinfos[1].maxsolutions = _nj1;
                                                          vinfos[2].jointtype = 1;
                                                          vinfos[2].foffset = j2;
                                                          vinfos[2].indices[0] = _ij2[0];
                                                          vinfos[2].indices[1] = _ij2[1];
                                                          vinfos[2].maxsolutions = _nj2;
                                                          vinfos[3].jointtype = 1;
                                                          vinfos[3].foffset = j3;
                                                          vinfos[3].indices[0] = _ij3[0];
                                                          vinfos[3].indices[1] = _ij3[1];
                                                          vinfos[3].maxsolutions = _nj3;
                                                          vinfos[4].jointtype = 1;
                                                          vinfos[4].foffset = j4;
                                                          vinfos[4].indices[0] = _ij4[0];
                                                          vinfos[4].indices[1] = _ij4[1];
                                                          vinfos[4].maxsolutions = _nj4;
                                                          vinfos[5].jointtype = 1;
                                                          vinfos[5].foffset = j5;
                                                          vinfos[5].indices[0] = _ij5[0];
                                                          vinfos[5].indices[1] = _ij5[1];
                                                          vinfos[5].maxsolutions = _nj5;
                                                          std::vector<int> vfree(0);
                                                          solutions.AddSolution(vinfos, vfree);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }

                                              } else {
                                                {
                                                  IkReal j5array[1], cj5array[1], sj5array[1];
                                                  bool j5valid[1] = {false};
                                                  _nj5 = 1;
                                                  CheckValue<IkReal> x250 = IKPowWithIntegerCheck(IKsign(sj4), -1);
                                                  if (!x250.valid) {
                                                    continue;
                                                  }
                                                  CheckValue<IkReal> x251 =
                                                      IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)),
                                                                       IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x251.valid) {
                                                    continue;
                                                  }
                                                  j5array[0] = ((-1.5707963267949) +
                                                                (((1.5707963267949) * (x250.value))) + (x251.value));
                                                  sj5array[0] = IKsin(j5array[0]);
                                                  cj5array[0] = IKcos(j5array[0]);
                                                  if (j5array[0] > IKPI) {
                                                    j5array[0] -= IK2PI;
                                                  } else if (j5array[0] < -IKPI) {
                                                    j5array[0] += IK2PI;
                                                  }
                                                  j5valid[0] = true;
                                                  for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                    if (!j5valid[ij5]) {
                                                      continue;
                                                    }
                                                    _ij5[0] = ij5;
                                                    _ij5[1] = -1;
                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                      if (j5valid[iij5] &&
                                                          IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j5valid[iij5] = false;
                                                        _ij5[1] = iij5;
                                                        break;
                                                      }
                                                    }
                                                    j5 = j5array[ij5];
                                                    cj5 = cj5array[ij5];
                                                    sj5 = sj5array[ij5];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x252 = IKsin(j5);
                                                      IkReal x253 = IKcos(j5);
                                                      IkReal x254 = ((1.0) * sj4);
                                                      IkReal x255 = ((1.0) * x253);
                                                      IkReal x256 = ((1.0) * x252);
                                                      evalcond[0] = (((sj4 * x253)) + new_r20);
                                                      evalcond[1] = (new_r11 + ((cj4 * x252)));
                                                      evalcond[2] = ((((-1.0) * x252 * x254)) + new_r21);
                                                      evalcond[3] = ((((-1.0) * cj4 * x255)) + new_r10);
                                                      evalcond[4] = ((((-1.0) * new_r00)) + (((-1.0) * x256)));
                                                      evalcond[5] = ((((-1.0) * new_r01)) + (((-1.0) * x255)));
                                                      evalcond[6] =
                                                          ((((-1.0) * new_r21 * x254)) + ((cj4 * new_r11)) + x252);
                                                      evalcond[7] = (((cj4 * new_r10)) + (((-1.0) * new_r20 * x254)) +
                                                                     (((-1.0) * x255)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 1;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 1;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 1;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement) {
                                          bool bgotonextstatement = true;
                                          do {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j3)))),
                                                         6.28318530717959)));
                                            evalcond[1] = new_r02;
                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                IKabs(evalcond[1]) < 0.0000050000000000) {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1] = {false};
                                                _nj5 = 1;
                                                if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <= IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j5array[0] = IKatan2(new_r00, new_r01);
                                                sj5array[0] = IKsin(j5array[0]);
                                                cj5array[0] = IKcos(j5array[0]);
                                                if (j5array[0] > IKPI) {
                                                  j5array[0] -= IK2PI;
                                                } else if (j5array[0] < -IKPI) {
                                                  j5array[0] += IK2PI;
                                                }
                                                j5valid[0] = true;
                                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                  if (!j5valid[ij5]) {
                                                    continue;
                                                  }
                                                  _ij5[0] = ij5;
                                                  _ij5[1] = -1;
                                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                    if (j5valid[iij5] &&
                                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                            IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                            IKFAST_SOLUTION_THRESH) {
                                                      j5valid[iij5] = false;
                                                      _ij5[1] = iij5;
                                                      break;
                                                    }
                                                  }
                                                  j5 = j5array[ij5];
                                                  cj5 = cj5array[ij5];
                                                  sj5 = sj5array[ij5];
                                                  {
                                                    IkReal evalcond[8];
                                                    IkReal x257 = IKcos(j5);
                                                    IkReal x258 = IKsin(j5);
                                                    IkReal x259 = ((1.0) * cj4);
                                                    IkReal x260 = ((1.0) * sj4);
                                                    IkReal x261 = ((1.0) * x257);
                                                    IkReal x262 = ((1.0) * x258);
                                                    evalcond[0] = (((sj4 * x257)) + new_r20);
                                                    evalcond[1] = (new_r00 + (((-1.0) * x262)));
                                                    evalcond[2] = (new_r01 + (((-1.0) * x261)));
                                                    evalcond[3] = ((((-1.0) * x258 * x260)) + new_r21);
                                                    evalcond[4] = ((((-1.0) * new_r11)) + ((cj4 * x258)));
                                                    evalcond[5] = ((((-1.0) * x257 * x259)) + (((-1.0) * new_r10)));
                                                    evalcond[6] = ((((-1.0) * new_r11 * x259)) +
                                                                   (((-1.0) * new_r21 * x260)) + x258);
                                                    evalcond[7] = ((((-1.0) * new_r10 * x259)) +
                                                                   (((-1.0) * new_r20 * x260)) + (((-1.0) * x261)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                    vinfos[0].jointtype = 1;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 1;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 1;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 1;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement) {
                                            bool bgotonextstatement = true;
                                            do {
                                              evalcond[0] =
                                                  ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j4)))),
                                                           6.28318530717959)));
                                              evalcond[1] = new_r22;
                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                  IKabs(evalcond[1]) < 0.0000050000000000) {
                                                bgotonextstatement = false;
                                                {
                                                  IkReal j5array[1], cj5array[1], sj5array[1];
                                                  bool j5valid[1] = {false};
                                                  _nj5 = 1;
                                                  if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <=
                                                          IKFAST_SINCOS_THRESH)
                                                    continue;
                                                  j5array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                  sj5array[0] = IKsin(j5array[0]);
                                                  cj5array[0] = IKcos(j5array[0]);
                                                  if (j5array[0] > IKPI) {
                                                    j5array[0] -= IK2PI;
                                                  } else if (j5array[0] < -IKPI) {
                                                    j5array[0] += IK2PI;
                                                  }
                                                  j5valid[0] = true;
                                                  for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                    if (!j5valid[ij5]) {
                                                      continue;
                                                    }
                                                    _ij5[0] = ij5;
                                                    _ij5[1] = -1;
                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                      if (j5valid[iij5] &&
                                                          IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j5valid[iij5] = false;
                                                        _ij5[1] = iij5;
                                                        break;
                                                      }
                                                    }
                                                    j5 = j5array[ij5];
                                                    cj5 = cj5array[ij5];
                                                    sj5 = sj5array[ij5];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x263 = IKcos(j5);
                                                      IkReal x264 = IKsin(j5);
                                                      IkReal x265 = ((1.0) * sj3);
                                                      IkReal x266 = ((1.0) * x264);
                                                      IkReal x267 = ((1.0) * x263);
                                                      evalcond[0] = (x263 + new_r20);
                                                      evalcond[1] = (new_r21 + (((-1.0) * x266)));
                                                      evalcond[2] = (((sj3 * x263)) + new_r01);
                                                      evalcond[3] = (((sj3 * x264)) + new_r00);
                                                      evalcond[4] = ((((-1.0) * cj3 * x267)) + new_r11);
                                                      evalcond[5] = (new_r10 + (((-1.0) * new_r02 * x266)));
                                                      evalcond[6] = ((((-1.0) * new_r00 * x265)) + ((cj3 * new_r10)) +
                                                                     (((-1.0) * x266)));
                                                      evalcond[7] = ((((-1.0) * new_r01 * x265)) + ((cj3 * new_r11)) +
                                                                     (((-1.0) * x267)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 1;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 1;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 1;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            } while (0);
                                            if (bgotonextstatement) {
                                              bool bgotonextstatement = true;
                                              do {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j4)))),
                                                             6.28318530717959)));
                                                evalcond[1] = new_r22;
                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                    IKabs(evalcond[1]) < 0.0000050000000000) {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                    bool j5valid[1] = {false};
                                                    _nj5 = 1;
                                                    if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <=
                                                            IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j5array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                    sj5array[0] = IKsin(j5array[0]);
                                                    cj5array[0] = IKcos(j5array[0]);
                                                    if (j5array[0] > IKPI) {
                                                      j5array[0] -= IK2PI;
                                                    } else if (j5array[0] < -IKPI) {
                                                      j5array[0] += IK2PI;
                                                    }
                                                    j5valid[0] = true;
                                                    for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                      if (!j5valid[ij5]) {
                                                        continue;
                                                      }
                                                      _ij5[0] = ij5;
                                                      _ij5[1] = -1;
                                                      for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                        if (j5valid[iij5] &&
                                                            IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                IKFAST_SOLUTION_THRESH) {
                                                          j5valid[iij5] = false;
                                                          _ij5[1] = iij5;
                                                          break;
                                                        }
                                                      }
                                                      j5 = j5array[ij5];
                                                      cj5 = cj5array[ij5];
                                                      sj5 = sj5array[ij5];
                                                      {
                                                        IkReal evalcond[8];
                                                        IkReal x268 = IKcos(j5);
                                                        IkReal x269 = IKsin(j5);
                                                        IkReal x270 = ((1.0) * sj3);
                                                        IkReal x271 = ((1.0) * x268);
                                                        evalcond[0] = (x269 + new_r21);
                                                        evalcond[1] = ((((-1.0) * x271)) + new_r20);
                                                        evalcond[2] = (((sj3 * x268)) + new_r01);
                                                        evalcond[3] = (((sj3 * x269)) + new_r00);
                                                        evalcond[4] = (new_r10 + ((new_r02 * x269)));
                                                        evalcond[5] = ((((-1.0) * cj3 * x271)) + new_r11);
                                                        evalcond[6] = ((((-1.0) * x269)) + (((-1.0) * new_r00 * x270)) +
                                                                       ((cj3 * new_r10)));
                                                        evalcond[7] = ((((-1.0) * new_r01 * x270)) + ((cj3 * new_r11)) +
                                                                       (((-1.0) * x271)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        vinfos[3].jointtype = 1;
                                                        vinfos[3].foffset = j3;
                                                        vinfos[3].indices[0] = _ij3[0];
                                                        vinfos[3].indices[1] = _ij3[1];
                                                        vinfos[3].maxsolutions = _nj3;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j4;
                                                        vinfos[4].indices[0] = _ij4[0];
                                                        vinfos[4].indices[1] = _ij4[1];
                                                        vinfos[4].maxsolutions = _nj4;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j5;
                                                        vinfos[5].indices[0] = _ij5[0];
                                                        vinfos[5].indices[1] = _ij5[1];
                                                        vinfos[5].maxsolutions = _nj5;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement) {
                                                bool bgotonextstatement = true;
                                                do {
                                                  evalcond[0] =
                                                      ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                                                  evalcond[1] = new_r20;
                                                  evalcond[2] = new_r02;
                                                  evalcond[3] = new_r12;
                                                  evalcond[4] = new_r21;
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                      IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                      IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                      IKabs(evalcond[3]) < 0.0000050000000000 &&
                                                      IKabs(evalcond[4]) < 0.0000050000000000) {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j5array[1], cj5array[1], sj5array[1];
                                                      bool j5valid[1] = {false};
                                                      _nj5 = 1;
                                                      IkReal x272 = ((1.0) * new_r01);
                                                      if (IKabs(
                                                              ((((-1.0) * cj3 * x272)) + (((-1.0) * new_r00 * sj3)))) <
                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                          IKabs(((((-1.0) * sj3 * x272)) + ((cj3 * new_r00)))) <
                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                          IKabs(IKsqr(((((-1.0) * cj3 * x272)) +
                                                                       (((-1.0) * new_r00 * sj3)))) +
                                                                IKsqr(((((-1.0) * sj3 * x272)) + ((cj3 * new_r00)))) -
                                                                1) <= IKFAST_SINCOS_THRESH)
                                                        continue;
                                                      j5array[0] = IKatan2(
                                                          ((((-1.0) * cj3 * x272)) + (((-1.0) * new_r00 * sj3))),
                                                          ((((-1.0) * sj3 * x272)) + ((cj3 * new_r00))));
                                                      sj5array[0] = IKsin(j5array[0]);
                                                      cj5array[0] = IKcos(j5array[0]);
                                                      if (j5array[0] > IKPI) {
                                                        j5array[0] -= IK2PI;
                                                      } else if (j5array[0] < -IKPI) {
                                                        j5array[0] += IK2PI;
                                                      }
                                                      j5valid[0] = true;
                                                      for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                        if (!j5valid[ij5]) {
                                                          continue;
                                                        }
                                                        _ij5[0] = ij5;
                                                        _ij5[1] = -1;
                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                          if (j5valid[iij5] &&
                                                              IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                  IKFAST_SOLUTION_THRESH) {
                                                            j5valid[iij5] = false;
                                                            _ij5[1] = iij5;
                                                            break;
                                                          }
                                                        }
                                                        j5 = j5array[ij5];
                                                        cj5 = cj5array[ij5];
                                                        sj5 = sj5array[ij5];
                                                        {
                                                          IkReal evalcond[8];
                                                          IkReal x273 = IKsin(j5);
                                                          IkReal x274 = IKcos(j5);
                                                          IkReal x275 = ((1.0) * sj3);
                                                          IkReal x276 = ((1.0) * x274);
                                                          IkReal x277 = (sj3 * x273);
                                                          IkReal x278 = ((1.0) * x273);
                                                          IkReal x279 = (cj3 * x276);
                                                          evalcond[0] = (((new_r11 * sj3)) + x273 + ((cj3 * new_r01)));
                                                          evalcond[1] = (((sj3 * x274)) + new_r01 + ((cj3 * x273)));
                                                          evalcond[2] = (((new_r10 * sj3)) + (((-1.0) * x276)) +
                                                                         ((cj3 * new_r00)));
                                                          evalcond[3] = ((((-1.0) * new_r00 * x275)) +
                                                                         ((cj3 * new_r10)) + (((-1.0) * x278)));
                                                          evalcond[4] = ((((-1.0) * new_r01 * x275)) +
                                                                         ((cj3 * new_r11)) + (((-1.0) * x276)));
                                                          evalcond[5] = (x277 + (((-1.0) * x279)) + new_r00);
                                                          evalcond[6] = (x277 + (((-1.0) * x279)) + new_r11);
                                                          evalcond[7] = ((((-1.0) * x274 * x275)) +
                                                                         (((-1.0) * cj3 * x278)) + new_r10);
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                            continue;
                                                          }
                                                        }

                                                        {
                                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                          vinfos[0].jointtype = 1;
                                                          vinfos[0].foffset = j0;
                                                          vinfos[0].indices[0] = _ij0[0];
                                                          vinfos[0].indices[1] = _ij0[1];
                                                          vinfos[0].maxsolutions = _nj0;
                                                          vinfos[1].jointtype = 1;
                                                          vinfos[1].foffset = j1;
                                                          vinfos[1].indices[0] = _ij1[0];
                                                          vinfos[1].indices[1] = _ij1[1];
                                                          vinfos[1].maxsolutions = _nj1;
                                                          vinfos[2].jointtype = 1;
                                                          vinfos[2].foffset = j2;
                                                          vinfos[2].indices[0] = _ij2[0];
                                                          vinfos[2].indices[1] = _ij2[1];
                                                          vinfos[2].maxsolutions = _nj2;
                                                          vinfos[3].jointtype = 1;
                                                          vinfos[3].foffset = j3;
                                                          vinfos[3].indices[0] = _ij3[0];
                                                          vinfos[3].indices[1] = _ij3[1];
                                                          vinfos[3].maxsolutions = _nj3;
                                                          vinfos[4].jointtype = 1;
                                                          vinfos[4].foffset = j4;
                                                          vinfos[4].indices[0] = _ij4[0];
                                                          vinfos[4].indices[1] = _ij4[1];
                                                          vinfos[4].maxsolutions = _nj4;
                                                          vinfos[5].jointtype = 1;
                                                          vinfos[5].foffset = j5;
                                                          vinfos[5].indices[0] = _ij5[0];
                                                          vinfos[5].indices[1] = _ij5[1];
                                                          vinfos[5].maxsolutions = _nj5;
                                                          std::vector<int> vfree(0);
                                                          solutions.AddSolution(vinfos, vfree);
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement) {
                                                  bool bgotonextstatement = true;
                                                  do {
                                                    evalcond[0] = ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-3.14159265358979) + j4)))),
                                                                           6.28318530717959)));
                                                    evalcond[1] = new_r20;
                                                    evalcond[2] = new_r02;
                                                    evalcond[3] = new_r12;
                                                    evalcond[4] = new_r21;
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[3]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[4]) < 0.0000050000000000) {
                                                      bgotonextstatement = false;
                                                      {
                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                        bool j5valid[1] = {false};
                                                        _nj5 = 1;
                                                        IkReal x280 = ((1.0) * sj3);
                                                        if (IKabs(((((-1.0) * new_r00 * x280)) + ((cj3 * new_r01)))) <
                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(((((-1.0) * cj3 * new_r00)) +
                                                                   (((-1.0) * new_r01 * x280)))) <
                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(IKsqr(((((-1.0) * new_r00 * x280)) +
                                                                         ((cj3 * new_r01)))) +
                                                                  IKsqr(((((-1.0) * cj3 * new_r00)) +
                                                                         (((-1.0) * new_r01 * x280)))) -
                                                                  1) <= IKFAST_SINCOS_THRESH)
                                                          continue;
                                                        j5array[0] = IKatan2(
                                                            ((((-1.0) * new_r00 * x280)) + ((cj3 * new_r01))),
                                                            ((((-1.0) * cj3 * new_r00)) + (((-1.0) * new_r01 * x280))));
                                                        sj5array[0] = IKsin(j5array[0]);
                                                        cj5array[0] = IKcos(j5array[0]);
                                                        if (j5array[0] > IKPI) {
                                                          j5array[0] -= IK2PI;
                                                        } else if (j5array[0] < -IKPI) {
                                                          j5array[0] += IK2PI;
                                                        }
                                                        j5valid[0] = true;
                                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                          if (!j5valid[ij5]) {
                                                            continue;
                                                          }
                                                          _ij5[0] = ij5;
                                                          _ij5[1] = -1;
                                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                            if (j5valid[iij5] &&
                                                                IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j5valid[iij5] = false;
                                                              _ij5[1] = iij5;
                                                              break;
                                                            }
                                                          }
                                                          j5 = j5array[ij5];
                                                          cj5 = cj5array[ij5];
                                                          sj5 = sj5array[ij5];
                                                          {
                                                            IkReal evalcond[8];
                                                            IkReal x281 = IKsin(j5);
                                                            IkReal x282 = IKcos(j5);
                                                            IkReal x283 = ((1.0) * sj3);
                                                            IkReal x284 = ((1.0) * x281);
                                                            IkReal x285 = (sj3 * x282);
                                                            IkReal x286 = ((1.0) * x282);
                                                            IkReal x287 = (cj3 * x284);
                                                            evalcond[0] =
                                                                (((new_r10 * sj3)) + x282 + ((cj3 * new_r00)));
                                                            evalcond[1] = (((new_r11 * sj3)) + ((cj3 * new_r01)) +
                                                                           (((-1.0) * x284)));
                                                            evalcond[2] = (((sj3 * x281)) + ((cj3 * x282)) + new_r00);
                                                            evalcond[3] = ((((-1.0) * new_r00 * x283)) +
                                                                           ((cj3 * new_r10)) + (((-1.0) * x284)));
                                                            evalcond[4] = ((((-1.0) * new_r01 * x283)) +
                                                                           ((cj3 * new_r11)) + (((-1.0) * x286)));
                                                            evalcond[5] = (x285 + (((-1.0) * x287)) + new_r01);
                                                            evalcond[6] = (x285 + (((-1.0) * x287)) + new_r10);
                                                            evalcond[7] = ((((-1.0) * cj3 * x286)) +
                                                                           (((-1.0) * x281 * x283)) + new_r11);
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                              continue;
                                                            }
                                                          }

                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 1;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 1;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 1;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {
                                                    bool bgotonextstatement = true;
                                                    do {
                                                      evalcond[0] = ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) + (IKabs(j3))),
                                                                             6.28318530717959)));
                                                      evalcond[1] = new_r12;
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                          IKabs(evalcond[1]) < 0.0000050000000000) {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j5array[1], cj5array[1], sj5array[1];
                                                          bool j5valid[1] = {false};
                                                          _nj5 = 1;
                                                          if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j5array[0] = IKatan2(new_r10, new_r11);
                                                          sj5array[0] = IKsin(j5array[0]);
                                                          cj5array[0] = IKcos(j5array[0]);
                                                          if (j5array[0] > IKPI) {
                                                            j5array[0] -= IK2PI;
                                                          } else if (j5array[0] < -IKPI) {
                                                            j5array[0] += IK2PI;
                                                          }
                                                          j5valid[0] = true;
                                                          for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                            if (!j5valid[ij5]) {
                                                              continue;
                                                            }
                                                            _ij5[0] = ij5;
                                                            _ij5[1] = -1;
                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                              if (j5valid[iij5] &&
                                                                  IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j5valid[iij5] = false;
                                                                _ij5[1] = iij5;
                                                                break;
                                                              }
                                                            }
                                                            j5 = j5array[ij5];
                                                            cj5 = cj5array[ij5];
                                                            sj5 = sj5array[ij5];
                                                            {
                                                              IkReal evalcond[8];
                                                              IkReal x288 = IKcos(j5);
                                                              IkReal x289 = IKsin(j5);
                                                              IkReal x290 = ((1.0) * sj4);
                                                              IkReal x291 = ((1.0) * x288);
                                                              IkReal x292 = ((1.0) * x289);
                                                              evalcond[0] = (((new_r02 * x288)) + new_r20);
                                                              evalcond[1] = ((((-1.0) * x292)) + new_r10);
                                                              evalcond[2] = ((((-1.0) * x291)) + new_r11);
                                                              evalcond[3] = (new_r01 + ((cj4 * x289)));
                                                              evalcond[4] = (new_r21 + (((-1.0) * new_r02 * x292)));
                                                              evalcond[5] = ((((-1.0) * cj4 * x291)) + new_r00);
                                                              evalcond[6] = (((cj4 * new_r01)) +
                                                                             (((-1.0) * new_r21 * x290)) + x289);
                                                              evalcond[7] =
                                                                  (((cj4 * new_r00)) + (((-1.0) * new_r20 * x290)) +
                                                                   (((-1.0) * x291)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 1;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 1;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 1;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement) {
                                                      bool bgotonextstatement = true;
                                                      do {
                                                        evalcond[0] = ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((-3.14159265358979) + j3)))),
                                                                               6.28318530717959)));
                                                        evalcond[1] = new_r12;
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                            IKabs(evalcond[1]) < 0.0000050000000000) {
                                                          bgotonextstatement = false;
                                                          {
                                                            IkReal j5eval[3];
                                                            sj3 = 0;
                                                            cj3 = -1.0;
                                                            j3 = 3.14159265358979;
                                                            j5eval[0] = new_r02;
                                                            j5eval[1] = IKsign(new_r02);
                                                            j5eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                            if (IKabs(j5eval[0]) < 0.0000010000000000 ||
                                                                IKabs(j5eval[1]) < 0.0000010000000000 ||
                                                                IKabs(j5eval[2]) < 0.0000010000000000) {
                                                              {
                                                                IkReal j5eval[1];
                                                                sj3 = 0;
                                                                cj3 = -1.0;
                                                                j3 = 3.14159265358979;
                                                                j5eval[0] = new_r02;
                                                                if (IKabs(j5eval[0]) < 0.0000010000000000) {
                                                                  {
                                                                    IkReal j5eval[2];
                                                                    sj3 = 0;
                                                                    cj3 = -1.0;
                                                                    j3 = 3.14159265358979;
                                                                    j5eval[0] = new_r02;
                                                                    j5eval[1] = cj4;
                                                                    if (IKabs(j5eval[0]) < 0.0000010000000000 ||
                                                                        IKabs(j5eval[1]) < 0.0000010000000000) {
                                                                      {
                                                                        IkReal evalcond[4];
                                                                        bool bgotonextstatement = true;
                                                                        do {
                                                                          evalcond[0] =
                                                                              ((-3.14159265358979) +
                                                                               (IKfmod(
                                                                                   ((3.14159265358979) +
                                                                                    (IKabs(((-1.5707963267949) + j4)))),
                                                                                   6.28318530717959)));
                                                                          evalcond[1] = new_r22;
                                                                          evalcond[2] = new_r01;
                                                                          evalcond[3] = new_r00;
                                                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                              IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                              IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                              IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                              IkReal j5array[1], cj5array[1],
                                                                                  sj5array[1];
                                                                              bool j5valid[1] = {false};
                                                                              _nj5 = 1;
                                                                              if (IKabs(new_r21) <
                                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                                  IKabs(((-1.0) * new_r20)) <
                                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                                  IKabs(IKsqr(new_r21) +
                                                                                        IKsqr(((-1.0) * new_r20)) -
                                                                                        1) <= IKFAST_SINCOS_THRESH)
                                                                                continue;
                                                                              j5array[0] =
                                                                                  IKatan2(new_r21, ((-1.0) * new_r20));
                                                                              sj5array[0] = IKsin(j5array[0]);
                                                                              cj5array[0] = IKcos(j5array[0]);
                                                                              if (j5array[0] > IKPI) {
                                                                                j5array[0] -= IK2PI;
                                                                              } else if (j5array[0] < -IKPI) {
                                                                                j5array[0] += IK2PI;
                                                                              }
                                                                              j5valid[0] = true;
                                                                              for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                                if (!j5valid[ij5]) {
                                                                                  continue;
                                                                                }
                                                                                _ij5[0] = ij5;
                                                                                _ij5[1] = -1;
                                                                                for (int iij5 = ij5 + 1; iij5 < 1;
                                                                                     ++iij5) {
                                                                                  if (j5valid[iij5] &&
                                                                                      IKabs(cj5array[ij5] -
                                                                                            cj5array[iij5]) <
                                                                                          IKFAST_SOLUTION_THRESH &&
                                                                                      IKabs(sj5array[ij5] -
                                                                                            sj5array[iij5]) <
                                                                                          IKFAST_SOLUTION_THRESH) {
                                                                                    j5valid[iij5] = false;
                                                                                    _ij5[1] = iij5;
                                                                                    break;
                                                                                  }
                                                                                }
                                                                                j5 = j5array[ij5];
                                                                                cj5 = cj5array[ij5];
                                                                                sj5 = sj5array[ij5];
                                                                                {
                                                                                  IkReal evalcond[4];
                                                                                  IkReal x293 = IKcos(j5);
                                                                                  IkReal x294 = ((1.0) * (IKsin(j5)));
                                                                                  evalcond[0] = (x293 + new_r20);
                                                                                  evalcond[1] =
                                                                                      ((((-1.0) * x294)) + new_r21);
                                                                                  evalcond[2] = ((((-1.0) * x294)) +
                                                                                                 (((-1.0) * new_r10)));
                                                                                  evalcond[3] = ((((-1.0) * x293)) +
                                                                                                 (((-1.0) * new_r11)));
                                                                                  if (IKabs(evalcond[0]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[1]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[2]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[3]) >
                                                                                          IKFAST_EVALCOND_THRESH) {
                                                                                    continue;
                                                                                  }
                                                                                }

                                                                                {
                                                                                  std::vector<
                                                                                      IkSingleDOFSolutionBase<IkReal> >
                                                                                      vinfos(6);
                                                                                  vinfos[0].jointtype = 1;
                                                                                  vinfos[0].foffset = j0;
                                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                                  vinfos[0].maxsolutions = _nj0;
                                                                                  vinfos[1].jointtype = 1;
                                                                                  vinfos[1].foffset = j1;
                                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                                  vinfos[1].maxsolutions = _nj1;
                                                                                  vinfos[2].jointtype = 1;
                                                                                  vinfos[2].foffset = j2;
                                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                                  vinfos[2].maxsolutions = _nj2;
                                                                                  vinfos[3].jointtype = 1;
                                                                                  vinfos[3].foffset = j3;
                                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                                  vinfos[3].maxsolutions = _nj3;
                                                                                  vinfos[4].jointtype = 1;
                                                                                  vinfos[4].foffset = j4;
                                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                                  vinfos[4].maxsolutions = _nj4;
                                                                                  vinfos[5].jointtype = 1;
                                                                                  vinfos[5].foffset = j5;
                                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                                  vinfos[5].maxsolutions = _nj5;
                                                                                  std::vector<int> vfree(0);
                                                                                  solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        } while (0);
                                                                        if (bgotonextstatement) {
                                                                          bool bgotonextstatement = true;
                                                                          do {
                                                                            evalcond[0] =
                                                                                ((-3.14159265358979) +
                                                                                 (IKfmod(((3.14159265358979) +
                                                                                          (IKabs(((1.5707963267949) +
                                                                                                  j4)))),
                                                                                         6.28318530717959)));
                                                                            evalcond[1] = new_r22;
                                                                            evalcond[2] = new_r01;
                                                                            evalcond[3] = new_r00;
                                                                            if (IKabs(evalcond[0]) <
                                                                                    0.0000050000000000 &&
                                                                                IKabs(evalcond[1]) <
                                                                                    0.0000050000000000 &&
                                                                                IKabs(evalcond[2]) <
                                                                                    0.0000050000000000 &&
                                                                                IKabs(evalcond[3]) <
                                                                                    0.0000050000000000) {
                                                                              bgotonextstatement = false;
                                                                              {
                                                                                IkReal j5array[1], cj5array[1],
                                                                                    sj5array[1];
                                                                                bool j5valid[1] = {false};
                                                                                _nj5 = 1;
                                                                                if (IKabs(((-1.0) * new_r21)) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs(new_r20) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs(IKsqr(((-1.0) * new_r21)) +
                                                                                          IKsqr(new_r20) - 1) <=
                                                                                        IKFAST_SINCOS_THRESH)
                                                                                  continue;
                                                                                j5array[0] = IKatan2(((-1.0) * new_r21),
                                                                                                     new_r20);
                                                                                sj5array[0] = IKsin(j5array[0]);
                                                                                cj5array[0] = IKcos(j5array[0]);
                                                                                if (j5array[0] > IKPI) {
                                                                                  j5array[0] -= IK2PI;
                                                                                } else if (j5array[0] < -IKPI) {
                                                                                  j5array[0] += IK2PI;
                                                                                }
                                                                                j5valid[0] = true;
                                                                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                                  if (!j5valid[ij5]) {
                                                                                    continue;
                                                                                  }
                                                                                  _ij5[0] = ij5;
                                                                                  _ij5[1] = -1;
                                                                                  for (int iij5 = ij5 + 1; iij5 < 1;
                                                                                       ++iij5) {
                                                                                    if (j5valid[iij5] &&
                                                                                        IKabs(cj5array[ij5] -
                                                                                              cj5array[iij5]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj5array[ij5] -
                                                                                              sj5array[iij5]) <
                                                                                            IKFAST_SOLUTION_THRESH) {
                                                                                      j5valid[iij5] = false;
                                                                                      _ij5[1] = iij5;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j5 = j5array[ij5];
                                                                                  cj5 = cj5array[ij5];
                                                                                  sj5 = sj5array[ij5];
                                                                                  {
                                                                                    IkReal evalcond[4];
                                                                                    IkReal x295 = IKsin(j5);
                                                                                    IkReal x296 = ((1.0) * (IKcos(j5)));
                                                                                    evalcond[0] = (x295 + new_r21);
                                                                                    evalcond[1] =
                                                                                        ((((-1.0) * x296)) + new_r20);
                                                                                    evalcond[2] =
                                                                                        ((((-1.0) * x295)) +
                                                                                         (((-1.0) * new_r10)));
                                                                                    evalcond[3] =
                                                                                        ((((-1.0) * x296)) +
                                                                                         (((-1.0) * new_r11)));
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH) {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<IkSingleDOFSolutionBase<
                                                                                        IkReal> >
                                                                                        vinfos(6);
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 1;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos,
                                                                                                          vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          } while (0);
                                                                          if (bgotonextstatement) {
                                                                            bool bgotonextstatement = true;
                                                                            do {
                                                                              evalcond[0] = IKabs(new_r02);
                                                                              evalcond[1] = new_r20;
                                                                              evalcond[2] = new_r21;
                                                                              if (IKabs(evalcond[0]) <
                                                                                      0.0000050000000000 &&
                                                                                  IKabs(evalcond[1]) <
                                                                                      0.0000050000000000 &&
                                                                                  IKabs(evalcond[2]) <
                                                                                      0.0000050000000000) {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                  IkReal j5array[1], cj5array[1],
                                                                                      sj5array[1];
                                                                                  bool j5valid[1] = {false};
                                                                                  _nj5 = 1;
                                                                                  if (IKabs((cj4 * new_r01)) <
                                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                                      IKabs(((-1.0) * new_r11)) <
                                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                                      IKabs(IKsqr((cj4 * new_r01)) +
                                                                                            IKsqr(((-1.0) * new_r11)) -
                                                                                            1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                  j5array[0] =
                                                                                      IKatan2((cj4 * new_r01),
                                                                                              ((-1.0) * new_r11));
                                                                                  sj5array[0] = IKsin(j5array[0]);
                                                                                  cj5array[0] = IKcos(j5array[0]);
                                                                                  if (j5array[0] > IKPI) {
                                                                                    j5array[0] -= IK2PI;
                                                                                  } else if (j5array[0] < -IKPI) {
                                                                                    j5array[0] += IK2PI;
                                                                                  }
                                                                                  j5valid[0] = true;
                                                                                  for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                                    if (!j5valid[ij5]) {
                                                                                      continue;
                                                                                    }
                                                                                    _ij5[0] = ij5;
                                                                                    _ij5[1] = -1;
                                                                                    for (int iij5 = ij5 + 1; iij5 < 1;
                                                                                         ++iij5) {
                                                                                      if (j5valid[iij5] &&
                                                                                          IKabs(cj5array[ij5] -
                                                                                                cj5array[iij5]) <
                                                                                              IKFAST_SOLUTION_THRESH &&
                                                                                          IKabs(sj5array[ij5] -
                                                                                                sj5array[iij5]) <
                                                                                              IKFAST_SOLUTION_THRESH) {
                                                                                        j5valid[iij5] = false;
                                                                                        _ij5[1] = iij5;
                                                                                        break;
                                                                                      }
                                                                                    }
                                                                                    j5 = j5array[ij5];
                                                                                    cj5 = cj5array[ij5];
                                                                                    sj5 = sj5array[ij5];
                                                                                    {
                                                                                      IkReal evalcond[6];
                                                                                      IkReal x297 = IKsin(j5);
                                                                                      IkReal x298 = IKcos(j5);
                                                                                      IkReal x299 = ((1.0) * new_r00);
                                                                                      IkReal x300 = ((1.0) * new_r01);
                                                                                      IkReal x301 = ((1.0) * x298);
                                                                                      evalcond[0] =
                                                                                          ((((-1.0) * cj4 * x300)) +
                                                                                           x297);
                                                                                      evalcond[1] =
                                                                                          ((((-1.0) * x297)) +
                                                                                           (((-1.0) * new_r10)));
                                                                                      evalcond[2] =
                                                                                          ((((-1.0) * new_r11)) +
                                                                                           (((-1.0) * x301)));
                                                                                      evalcond[3] = (((cj4 * x297)) +
                                                                                                     (((-1.0) * x300)));
                                                                                      evalcond[4] =
                                                                                          ((((-1.0) * x299)) +
                                                                                           (((-1.0) * cj4 * x301)));
                                                                                      evalcond[5] =
                                                                                          ((((-1.0) * cj4 * x299)) +
                                                                                           (((-1.0) * x301)));
                                                                                      if (IKabs(evalcond[0]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[1]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[2]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[3]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[4]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[5]) >
                                                                                              IKFAST_EVALCOND_THRESH) {
                                                                                        continue;
                                                                                      }
                                                                                    }

                                                                                    {
                                                                                      std::vector<
                                                                                          IkSingleDOFSolutionBase<
                                                                                              IkReal> >
                                                                                          vinfos(6);
                                                                                      vinfos[0].jointtype = 1;
                                                                                      vinfos[0].foffset = j0;
                                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                                      vinfos[0].maxsolutions = _nj0;
                                                                                      vinfos[1].jointtype = 1;
                                                                                      vinfos[1].foffset = j1;
                                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                                      vinfos[1].maxsolutions = _nj1;
                                                                                      vinfos[2].jointtype = 1;
                                                                                      vinfos[2].foffset = j2;
                                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                                      vinfos[2].maxsolutions = _nj2;
                                                                                      vinfos[3].jointtype = 1;
                                                                                      vinfos[3].foffset = j3;
                                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                                      vinfos[3].maxsolutions = _nj3;
                                                                                      vinfos[4].jointtype = 1;
                                                                                      vinfos[4].foffset = j4;
                                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                                      vinfos[4].maxsolutions = _nj4;
                                                                                      vinfos[5].jointtype = 1;
                                                                                      vinfos[5].foffset = j5;
                                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                                      vinfos[5].maxsolutions = _nj5;
                                                                                      std::vector<int> vfree(0);
                                                                                      solutions.AddSolution(vinfos,
                                                                                                            vfree);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            } while (0);
                                                                            if (bgotonextstatement) {
                                                                              bool bgotonextstatement = true;
                                                                              do {
                                                                                evalcond[0] = ((IKabs(new_r20)) +
                                                                                               (IKabs(new_r21)));
                                                                                if (IKabs(evalcond[0]) <
                                                                                    0.0000050000000000) {
                                                                                  bgotonextstatement = false;
                                                                                  {
                                                                                    IkReal j5array[1], cj5array[1],
                                                                                        sj5array[1];
                                                                                    bool j5valid[1] = {false};
                                                                                    _nj5 = 1;
                                                                                    if (IKabs(((-1.0) * new_r10)) <
                                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                                        IKabs(((-1.0) * new_r11)) <
                                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                                        IKabs(
                                                                                            IKsqr(((-1.0) * new_r10)) +
                                                                                            IKsqr(((-1.0) * new_r11)) -
                                                                                            1) <= IKFAST_SINCOS_THRESH)
                                                                                      continue;
                                                                                    j5array[0] =
                                                                                        IKatan2(((-1.0) * new_r10),
                                                                                                ((-1.0) * new_r11));
                                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                                    if (j5array[0] > IKPI) {
                                                                                      j5array[0] -= IK2PI;
                                                                                    } else if (j5array[0] < -IKPI) {
                                                                                      j5array[0] += IK2PI;
                                                                                    }
                                                                                    j5valid[0] = true;
                                                                                    for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                                      if (!j5valid[ij5]) {
                                                                                        continue;
                                                                                      }
                                                                                      _ij5[0] = ij5;
                                                                                      _ij5[1] = -1;
                                                                                      for (int iij5 = ij5 + 1; iij5 < 1;
                                                                                           ++iij5) {
                                                                                        if (j5valid[iij5] &&
                                                                                            IKabs(cj5array[ij5] -
                                                                                                  cj5array[iij5]) <
                                                                                                IKFAST_SOLUTION_THRESH &&
                                                                                            IKabs(sj5array[ij5] -
                                                                                                  sj5array[iij5]) <
                                                                                                IKFAST_SOLUTION_THRESH) {
                                                                                          j5valid[iij5] = false;
                                                                                          _ij5[1] = iij5;
                                                                                          break;
                                                                                        }
                                                                                      }
                                                                                      j5 = j5array[ij5];
                                                                                      cj5 = cj5array[ij5];
                                                                                      sj5 = sj5array[ij5];
                                                                                      {
                                                                                        IkReal evalcond[6];
                                                                                        IkReal x302 = IKsin(j5);
                                                                                        IkReal x303 = IKcos(j5);
                                                                                        IkReal x304 = ((-1.0) * x303);
                                                                                        evalcond[0] = x302;
                                                                                        evalcond[1] = (new_r22 * x302);
                                                                                        evalcond[2] = x304;
                                                                                        evalcond[3] = (new_r22 * x304);
                                                                                        evalcond[4] =
                                                                                            ((((-1.0) * x302)) +
                                                                                             (((-1.0) * new_r10)));
                                                                                        evalcond[5] =
                                                                                            ((((-1.0) * x303)) +
                                                                                             (((-1.0) * new_r11)));
                                                                                        if (IKabs(evalcond[0]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[1]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[2]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[3]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[4]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[5]) >
                                                                                                IKFAST_EVALCOND_THRESH) {
                                                                                          continue;
                                                                                        }
                                                                                      }

                                                                                      {
                                                                                        std::vector<
                                                                                            IkSingleDOFSolutionBase<
                                                                                                IkReal> >
                                                                                            vinfos(6);
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 1;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 1;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 1;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos,
                                                                                                              vfree);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              } while (0);
                                                                              if (bgotonextstatement) {
                                                                                bool bgotonextstatement = true;
                                                                                do {
                                                                                  if (1) {
                                                                                    bgotonextstatement = false;
                                                                                    continue;  // branch miss [j5]
                                                                                  }
                                                                                } while (0);
                                                                                if (bgotonextstatement) {
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }

                                                                    } else {
                                                                      {
                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                        bool j5valid[1] = {false};
                                                                        _nj5 = 1;
                                                                        CheckValue<IkReal> x305 =
                                                                            IKPowWithIntegerCheck(new_r02, -1);
                                                                        if (!x305.valid) {
                                                                          continue;
                                                                        }
                                                                        CheckValue<IkReal> x306 =
                                                                            IKPowWithIntegerCheck(cj4, -1);
                                                                        if (!x306.valid) {
                                                                          continue;
                                                                        }
                                                                        if (IKabs(((-1.0) * new_r21 * (x305.value))) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(((-1.0) * new_r00 * (x306.value))) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(IKsqr(((-1.0) * new_r21 *
                                                                                         (x305.value))) +
                                                                                  IKsqr(((-1.0) * new_r00 *
                                                                                         (x306.value))) -
                                                                                  1) <= IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j5array[0] =
                                                                            IKatan2(((-1.0) * new_r21 * (x305.value)),
                                                                                    ((-1.0) * new_r00 * (x306.value)));
                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                        if (j5array[0] > IKPI) {
                                                                          j5array[0] -= IK2PI;
                                                                        } else if (j5array[0] < -IKPI) {
                                                                          j5array[0] += IK2PI;
                                                                        }
                                                                        j5valid[0] = true;
                                                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                          if (!j5valid[ij5]) {
                                                                            continue;
                                                                          }
                                                                          _ij5[0] = ij5;
                                                                          _ij5[1] = -1;
                                                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                            if (j5valid[iij5] &&
                                                                                IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                                    IKFAST_SOLUTION_THRESH) {
                                                                              j5valid[iij5] = false;
                                                                              _ij5[1] = iij5;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j5 = j5array[ij5];
                                                                          cj5 = cj5array[ij5];
                                                                          sj5 = sj5array[ij5];
                                                                          {
                                                                            IkReal evalcond[8];
                                                                            IkReal x307 = IKsin(j5);
                                                                            IkReal x308 = IKcos(j5);
                                                                            IkReal x309 = ((1.0) * new_r00);
                                                                            IkReal x310 = ((1.0) * new_r01);
                                                                            IkReal x311 = ((1.0) * sj4);
                                                                            IkReal x312 = ((1.0) * x308);
                                                                            evalcond[0] =
                                                                                (((new_r02 * x307)) + new_r21);
                                                                            evalcond[1] =
                                                                                ((((-1.0) * new_r02 * x312)) + new_r20);
                                                                            evalcond[2] = ((((-1.0) * x307)) +
                                                                                           (((-1.0) * new_r10)));
                                                                            evalcond[3] = ((((-1.0) * x312)) +
                                                                                           (((-1.0) * new_r11)));
                                                                            evalcond[4] =
                                                                                ((((-1.0) * x310)) + ((cj4 * x307)));
                                                                            evalcond[5] = ((((-1.0) * cj4 * x312)) +
                                                                                           (((-1.0) * x309)));
                                                                            evalcond[6] =
                                                                                ((((-1.0) * new_r21 * x311)) +
                                                                                 (((-1.0) * cj4 * x310)) + x307);
                                                                            evalcond[7] = ((((-1.0) * new_r20 * x311)) +
                                                                                           (((-1.0) * cj4 * x309)) +
                                                                                           (((-1.0) * x312)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[6]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[7]) >
                                                                                    IKFAST_EVALCOND_THRESH) {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<
                                                                                IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(6);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }

                                                                } else {
                                                                  {
                                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                                    bool j5valid[1] = {false};
                                                                    _nj5 = 1;
                                                                    CheckValue<IkReal> x313 =
                                                                        IKPowWithIntegerCheck(new_r02, -1);
                                                                    if (!x313.valid) {
                                                                      continue;
                                                                    }
                                                                    if (IKabs(((-1.0) * new_r10)) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs((new_r20 * (x313.value))) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                              IKsqr((new_r20 * (x313.value))) - 1) <=
                                                                            IKFAST_SINCOS_THRESH)
                                                                      continue;
                                                                    j5array[0] = IKatan2(((-1.0) * new_r10),
                                                                                         (new_r20 * (x313.value)));
                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                    if (j5array[0] > IKPI) {
                                                                      j5array[0] -= IK2PI;
                                                                    } else if (j5array[0] < -IKPI) {
                                                                      j5array[0] += IK2PI;
                                                                    }
                                                                    j5valid[0] = true;
                                                                    for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                      if (!j5valid[ij5]) {
                                                                        continue;
                                                                      }
                                                                      _ij5[0] = ij5;
                                                                      _ij5[1] = -1;
                                                                      for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                        if (j5valid[iij5] &&
                                                                            IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                                IKFAST_SOLUTION_THRESH &&
                                                                            IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                                IKFAST_SOLUTION_THRESH) {
                                                                          j5valid[iij5] = false;
                                                                          _ij5[1] = iij5;
                                                                          break;
                                                                        }
                                                                      }
                                                                      j5 = j5array[ij5];
                                                                      cj5 = cj5array[ij5];
                                                                      sj5 = sj5array[ij5];
                                                                      {
                                                                        IkReal evalcond[8];
                                                                        IkReal x314 = IKsin(j5);
                                                                        IkReal x315 = IKcos(j5);
                                                                        IkReal x316 = ((1.0) * new_r00);
                                                                        IkReal x317 = ((1.0) * new_r01);
                                                                        IkReal x318 = ((1.0) * sj4);
                                                                        IkReal x319 = ((1.0) * x315);
                                                                        evalcond[0] = (((new_r02 * x314)) + new_r21);
                                                                        evalcond[1] =
                                                                            ((((-1.0) * new_r02 * x319)) + new_r20);
                                                                        evalcond[2] =
                                                                            ((((-1.0) * new_r10)) + (((-1.0) * x314)));
                                                                        evalcond[3] =
                                                                            ((((-1.0) * x319)) + (((-1.0) * new_r11)));
                                                                        evalcond[4] =
                                                                            (((cj4 * x314)) + (((-1.0) * x317)));
                                                                        evalcond[5] = ((((-1.0) * cj4 * x319)) +
                                                                                       (((-1.0) * x316)));
                                                                        evalcond[6] = ((((-1.0) * new_r21 * x318)) +
                                                                                       (((-1.0) * cj4 * x317)) + x314);
                                                                        evalcond[7] = ((((-1.0) * new_r20 * x318)) +
                                                                                       (((-1.0) * cj4 * x316)) +
                                                                                       (((-1.0) * x319)));
                                                                        if (IKabs(evalcond[0]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[1]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[2]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[3]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[4]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[5]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[6]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[7]) >
                                                                                IKFAST_EVALCOND_THRESH) {
                                                                          continue;
                                                                        }
                                                                      }

                                                                      {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                            vinfos(6);
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        vinfos[3].jointtype = 1;
                                                                        vinfos[3].foffset = j3;
                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                        vinfos[3].maxsolutions = _nj3;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j4;
                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                        vinfos[4].maxsolutions = _nj4;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j5;
                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                        vinfos[5].maxsolutions = _nj5;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }

                                                            } else {
                                                              {
                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                bool j5valid[1] = {false};
                                                                _nj5 = 1;
                                                                CheckValue<IkReal> x320 = IKatan2WithCheck(
                                                                    IkReal(((-1.0) * new_r21)), IkReal(new_r20),
                                                                    IKFAST_ATAN2_MAGTHRESH);
                                                                if (!x320.valid) {
                                                                  continue;
                                                                }
                                                                CheckValue<IkReal> x321 =
                                                                    IKPowWithIntegerCheck(IKsign(new_r02), -1);
                                                                if (!x321.valid) {
                                                                  continue;
                                                                }
                                                                j5array[0] = ((-1.5707963267949) + (x320.value) +
                                                                              (((1.5707963267949) * (x321.value))));
                                                                sj5array[0] = IKsin(j5array[0]);
                                                                cj5array[0] = IKcos(j5array[0]);
                                                                if (j5array[0] > IKPI) {
                                                                  j5array[0] -= IK2PI;
                                                                } else if (j5array[0] < -IKPI) {
                                                                  j5array[0] += IK2PI;
                                                                }
                                                                j5valid[0] = true;
                                                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                  if (!j5valid[ij5]) {
                                                                    continue;
                                                                  }
                                                                  _ij5[0] = ij5;
                                                                  _ij5[1] = -1;
                                                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                    if (j5valid[iij5] &&
                                                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j5valid[iij5] = false;
                                                                      _ij5[1] = iij5;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j5 = j5array[ij5];
                                                                  cj5 = cj5array[ij5];
                                                                  sj5 = sj5array[ij5];
                                                                  {
                                                                    IkReal evalcond[8];
                                                                    IkReal x322 = IKsin(j5);
                                                                    IkReal x323 = IKcos(j5);
                                                                    IkReal x324 = ((1.0) * new_r00);
                                                                    IkReal x325 = ((1.0) * new_r01);
                                                                    IkReal x326 = ((1.0) * sj4);
                                                                    IkReal x327 = ((1.0) * x323);
                                                                    evalcond[0] = (new_r21 + ((new_r02 * x322)));
                                                                    evalcond[1] =
                                                                        ((((-1.0) * new_r02 * x327)) + new_r20);
                                                                    evalcond[2] =
                                                                        ((((-1.0) * x322)) + (((-1.0) * new_r10)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * x327)) + (((-1.0) * new_r11)));
                                                                    evalcond[4] = ((((-1.0) * x325)) + ((cj4 * x322)));
                                                                    evalcond[5] =
                                                                        ((((-1.0) * x324)) + (((-1.0) * cj4 * x327)));
                                                                    evalcond[6] = (x322 + (((-1.0) * new_r21 * x326)) +
                                                                                   (((-1.0) * cj4 * x325)));
                                                                    evalcond[7] =
                                                                        ((((-1.0) * x327)) + (((-1.0) * cj4 * x324)) +
                                                                         (((-1.0) * new_r20 * x326)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(6);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement) {
                                                        bool bgotonextstatement = true;
                                                        do {
                                                          evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                          if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                            bgotonextstatement = false;
                                                            {
                                                              IkReal j5eval[1];
                                                              new_r21 = 0;
                                                              new_r20 = 0;
                                                              new_r02 = 0;
                                                              new_r12 = 0;
                                                              j5eval[0] = 1.0;
                                                              if (IKabs(j5eval[0]) < 0.0000000100000000) {
                                                                continue;  // no branches [j5]

                                                              } else {
                                                                IkReal op[2 + 1], zeror[2];
                                                                int numroots;
                                                                op[0] = 1.0;
                                                                op[1] = 0;
                                                                op[2] = -1.0;
                                                                polyroots2(op, zeror, numroots);
                                                                IkReal j5array[2], cj5array[2], sj5array[2],
                                                                    tempj5array[1];
                                                                int numsolutions = 0;
                                                                for (int ij5 = 0; ij5 < numroots; ++ij5) {
                                                                  IkReal htj5 = zeror[ij5];
                                                                  tempj5array[0] = ((2.0) * (atan(htj5)));
                                                                  for (int kj5 = 0; kj5 < 1; ++kj5) {
                                                                    j5array[numsolutions] = tempj5array[kj5];
                                                                    if (j5array[numsolutions] > IKPI) {
                                                                      j5array[numsolutions] -= IK2PI;
                                                                    } else if (j5array[numsolutions] < -IKPI) {
                                                                      j5array[numsolutions] += IK2PI;
                                                                    }
                                                                    sj5array[numsolutions] =
                                                                        IKsin(j5array[numsolutions]);
                                                                    cj5array[numsolutions] =
                                                                        IKcos(j5array[numsolutions]);
                                                                    numsolutions++;
                                                                  }
                                                                }
                                                                bool j5valid[2] = {true, true};
                                                                _nj5 = 2;
                                                                for (int ij5 = 0; ij5 < numsolutions; ++ij5) {
                                                                  if (!j5valid[ij5]) {
                                                                    continue;
                                                                  }
                                                                  j5 = j5array[ij5];
                                                                  cj5 = cj5array[ij5];
                                                                  sj5 = sj5array[ij5];
                                                                  htj5 = IKtan(j5 / 2);

                                                                  _ij5[0] = ij5;
                                                                  _ij5[1] = -1;
                                                                  for (int iij5 = ij5 + 1; iij5 < numsolutions;
                                                                       ++iij5) {
                                                                    if (j5valid[iij5] &&
                                                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j5valid[iij5] = false;
                                                                      _ij5[1] = iij5;
                                                                      break;
                                                                    }
                                                                  }
                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(6);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } while (0);
                                                        if (bgotonextstatement) {
                                                          bool bgotonextstatement = true;
                                                          do {
                                                            if (1) {
                                                              bgotonextstatement = false;
                                                              continue;  // branch miss [j5]
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement) {
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }

                                    } else {
                                      {
                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1] = {false};
                                        _nj5 = 1;
                                        CheckValue<IkReal> x329 = IKPowWithIntegerCheck(sj4, -1);
                                        if (!x329.valid) {
                                          continue;
                                        }
                                        IkReal x328 = x329.value;
                                        CheckValue<IkReal> x330 = IKPowWithIntegerCheck(cj3, -1);
                                        if (!x330.valid) {
                                          continue;
                                        }
                                        CheckValue<IkReal> x331 = IKPowWithIntegerCheck(cj4, -1);
                                        if (!x331.valid) {
                                          continue;
                                        }
                                        if (IKabs((x328 * (x330.value) * (x331.value) *
                                                   ((((new_r20 * sj3)) + (((-1.0) * new_r01 * sj4)))))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(((-1.0) * new_r20 * x328)) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(IKsqr((x328 * (x330.value) * (x331.value) *
                                                         ((((new_r20 * sj3)) + (((-1.0) * new_r01 * sj4)))))) +
                                                  IKsqr(((-1.0) * new_r20 * x328)) - 1) <= IKFAST_SINCOS_THRESH)
                                          continue;
                                        j5array[0] = IKatan2((x328 * (x330.value) * (x331.value) *
                                                              ((((new_r20 * sj3)) + (((-1.0) * new_r01 * sj4))))),
                                                             ((-1.0) * new_r20 * x328));
                                        sj5array[0] = IKsin(j5array[0]);
                                        cj5array[0] = IKcos(j5array[0]);
                                        if (j5array[0] > IKPI) {
                                          j5array[0] -= IK2PI;
                                        } else if (j5array[0] < -IKPI) {
                                          j5array[0] += IK2PI;
                                        }
                                        j5valid[0] = true;
                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                          if (!j5valid[ij5]) {
                                            continue;
                                          }
                                          _ij5[0] = ij5;
                                          _ij5[1] = -1;
                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                            if (j5valid[iij5] &&
                                                IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                              j5valid[iij5] = false;
                                              _ij5[1] = iij5;
                                              break;
                                            }
                                          }
                                          j5 = j5array[ij5];
                                          cj5 = cj5array[ij5];
                                          sj5 = sj5array[ij5];
                                          {
                                            IkReal evalcond[12];
                                            IkReal x332 = IKsin(j5);
                                            IkReal x333 = IKcos(j5);
                                            IkReal x334 = (cj3 * new_r00);
                                            IkReal x335 = (cj3 * cj4);
                                            IkReal x336 = (cj4 * sj3);
                                            IkReal x337 = ((1.0) * sj3);
                                            IkReal x338 = ((1.0) * sj4);
                                            IkReal x339 = ((1.0) * x333);
                                            IkReal x340 = (sj3 * x332);
                                            IkReal x341 = ((1.0) * x332);
                                            evalcond[0] = (((sj4 * x333)) + new_r20);
                                            evalcond[1] = ((((-1.0) * x332 * x338)) + new_r21);
                                            evalcond[2] = (((new_r11 * sj3)) + ((cj4 * x332)) + ((cj3 * new_r01)));
                                            evalcond[3] =
                                                ((((-1.0) * new_r00 * x337)) + ((cj3 * new_r10)) + (((-1.0) * x341)));
                                            evalcond[4] =
                                                (((cj3 * new_r11)) + (((-1.0) * x339)) + (((-1.0) * new_r01 * x337)));
                                            evalcond[5] = (((sj3 * x333)) + ((x332 * x335)) + new_r01);
                                            evalcond[6] = (((new_r10 * sj3)) + (((-1.0) * cj4 * x339)) + x334);
                                            evalcond[7] = (x340 + new_r00 + (((-1.0) * x335 * x339)));
                                            evalcond[8] = (((x332 * x336)) + new_r11 + (((-1.0) * cj3 * x339)));
                                            evalcond[9] =
                                                ((((-1.0) * cj3 * x341)) + new_r10 + (((-1.0) * x336 * x339)));
                                            evalcond[10] = (((new_r01 * x335)) + ((new_r11 * x336)) +
                                                            (((-1.0) * new_r21 * x338)) + x332);
                                            evalcond[11] = ((((-1.0) * new_r20 * x338)) + ((new_r10 * x336)) +
                                                            (((-1.0) * x339)) + ((cj4 * x334)));
                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                            vinfos[0].jointtype = 1;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 1;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 1;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 1;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos, vfree);
                                          }
                                        }
                                      }
                                    }
                                  }

                                } else {
                                  {
                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1] = {false};
                                    _nj5 = 1;
                                    CheckValue<IkReal> x343 = IKPowWithIntegerCheck(sj4, -1);
                                    if (!x343.valid) {
                                      continue;
                                    }
                                    IkReal x342 = x343.value;
                                    CheckValue<IkReal> x344 = IKPowWithIntegerCheck(sj3, -1);
                                    if (!x344.valid) {
                                      continue;
                                    }
                                    if (IKabs((x342 * (x344.value) *
                                               (((((-1.0) * cj3 * cj4 * new_r20)) + (((-1.0) * new_r00 * sj4)))))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(((-1.0) * new_r20 * x342)) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(
                                            IKsqr((x342 * (x344.value) *
                                                   (((((-1.0) * cj3 * cj4 * new_r20)) + (((-1.0) * new_r00 * sj4)))))) +
                                            IKsqr(((-1.0) * new_r20 * x342)) - 1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j5array[0] =
                                        IKatan2((x342 * (x344.value) *
                                                 (((((-1.0) * cj3 * cj4 * new_r20)) + (((-1.0) * new_r00 * sj4))))),
                                                ((-1.0) * new_r20 * x342));
                                    sj5array[0] = IKsin(j5array[0]);
                                    cj5array[0] = IKcos(j5array[0]);
                                    if (j5array[0] > IKPI) {
                                      j5array[0] -= IK2PI;
                                    } else if (j5array[0] < -IKPI) {
                                      j5array[0] += IK2PI;
                                    }
                                    j5valid[0] = true;
                                    for (int ij5 = 0; ij5 < 1; ++ij5) {
                                      if (!j5valid[ij5]) {
                                        continue;
                                      }
                                      _ij5[0] = ij5;
                                      _ij5[1] = -1;
                                      for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                        if (j5valid[iij5] &&
                                            IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                          j5valid[iij5] = false;
                                          _ij5[1] = iij5;
                                          break;
                                        }
                                      }
                                      j5 = j5array[ij5];
                                      cj5 = cj5array[ij5];
                                      sj5 = sj5array[ij5];
                                      {
                                        IkReal evalcond[12];
                                        IkReal x345 = IKsin(j5);
                                        IkReal x346 = IKcos(j5);
                                        IkReal x347 = (cj3 * new_r00);
                                        IkReal x348 = (cj3 * cj4);
                                        IkReal x349 = (cj4 * sj3);
                                        IkReal x350 = ((1.0) * sj3);
                                        IkReal x351 = ((1.0) * sj4);
                                        IkReal x352 = ((1.0) * x346);
                                        IkReal x353 = (sj3 * x345);
                                        IkReal x354 = ((1.0) * x345);
                                        evalcond[0] = (((sj4 * x346)) + new_r20);
                                        evalcond[1] = ((((-1.0) * x345 * x351)) + new_r21);
                                        evalcond[2] = (((new_r11 * sj3)) + ((cj4 * x345)) + ((cj3 * new_r01)));
                                        evalcond[3] =
                                            ((((-1.0) * x354)) + ((cj3 * new_r10)) + (((-1.0) * new_r00 * x350)));
                                        evalcond[4] =
                                            ((((-1.0) * x352)) + (((-1.0) * new_r01 * x350)) + ((cj3 * new_r11)));
                                        evalcond[5] = (((sj3 * x346)) + ((x345 * x348)) + new_r01);
                                        evalcond[6] = (((new_r10 * sj3)) + x347 + (((-1.0) * cj4 * x352)));
                                        evalcond[7] = ((((-1.0) * x348 * x352)) + x353 + new_r00);
                                        evalcond[8] = ((((-1.0) * cj3 * x352)) + ((x345 * x349)) + new_r11);
                                        evalcond[9] = ((((-1.0) * cj3 * x354)) + (((-1.0) * x349 * x352)) + new_r10);
                                        evalcond[10] = (((new_r11 * x349)) + ((new_r01 * x348)) + x345 +
                                                        (((-1.0) * new_r21 * x351)));
                                        evalcond[11] = ((((-1.0) * x352)) + ((new_r10 * x349)) + ((cj4 * x347)) +
                                                        (((-1.0) * new_r20 * x351)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                        vinfos[0].jointtype = 1;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 1;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 1;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 1;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }

                            } else {
                              {
                                IkReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1] = {false};
                                _nj5 = 1;
                                CheckValue<IkReal> x355 = IKPowWithIntegerCheck(IKsign(sj4), -1);
                                if (!x355.valid) {
                                  continue;
                                }
                                CheckValue<IkReal> x356 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)),
                                                                           IKFAST_ATAN2_MAGTHRESH);
                                if (!x356.valid) {
                                  continue;
                                }
                                j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x355.value))) + (x356.value));
                                sj5array[0] = IKsin(j5array[0]);
                                cj5array[0] = IKcos(j5array[0]);
                                if (j5array[0] > IKPI) {
                                  j5array[0] -= IK2PI;
                                } else if (j5array[0] < -IKPI) {
                                  j5array[0] += IK2PI;
                                }
                                j5valid[0] = true;
                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                  if (!j5valid[ij5]) {
                                    continue;
                                  }
                                  _ij5[0] = ij5;
                                  _ij5[1] = -1;
                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                    if (j5valid[iij5] &&
                                        IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                      j5valid[iij5] = false;
                                      _ij5[1] = iij5;
                                      break;
                                    }
                                  }
                                  j5 = j5array[ij5];
                                  cj5 = cj5array[ij5];
                                  sj5 = sj5array[ij5];
                                  {
                                    IkReal evalcond[12];
                                    IkReal x357 = IKsin(j5);
                                    IkReal x358 = IKcos(j5);
                                    IkReal x359 = (cj3 * new_r00);
                                    IkReal x360 = (cj3 * cj4);
                                    IkReal x361 = (cj4 * sj3);
                                    IkReal x362 = ((1.0) * sj3);
                                    IkReal x363 = ((1.0) * sj4);
                                    IkReal x364 = ((1.0) * x358);
                                    IkReal x365 = (sj3 * x357);
                                    IkReal x366 = ((1.0) * x357);
                                    evalcond[0] = (((sj4 * x358)) + new_r20);
                                    evalcond[1] = (new_r21 + (((-1.0) * x357 * x363)));
                                    evalcond[2] = (((new_r11 * sj3)) + ((cj4 * x357)) + ((cj3 * new_r01)));
                                    evalcond[3] = ((((-1.0) * new_r00 * x362)) + (((-1.0) * x366)) + ((cj3 * new_r10)));
                                    evalcond[4] = ((((-1.0) * x364)) + ((cj3 * new_r11)) + (((-1.0) * new_r01 * x362)));
                                    evalcond[5] = (((sj3 * x358)) + new_r01 + ((x357 * x360)));
                                    evalcond[6] = ((((-1.0) * cj4 * x364)) + ((new_r10 * sj3)) + x359);
                                    evalcond[7] = ((((-1.0) * x360 * x364)) + x365 + new_r00);
                                    evalcond[8] = (new_r11 + ((x357 * x361)) + (((-1.0) * cj3 * x364)));
                                    evalcond[9] = ((((-1.0) * x361 * x364)) + new_r10 + (((-1.0) * cj3 * x366)));
                                    evalcond[10] =
                                        (x357 + ((new_r01 * x360)) + ((new_r11 * x361)) + (((-1.0) * new_r21 * x363)));
                                    evalcond[11] = ((((-1.0) * new_r20 * x363)) + (((-1.0) * x364)) + ((cj4 * x359)) +
                                                    ((new_r10 * x361)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }

                } else {
                  {
                    IkReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1] = {false};
                    _nj5 = 1;
                    CheckValue<IkReal> x367 = IKPowWithIntegerCheck(IKsign(sj4), -1);
                    if (!x367.valid) {
                      continue;
                    }
                    CheckValue<IkReal> x368 =
                        IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                    if (!x368.valid) {
                      continue;
                    }
                    j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x367.value))) + (x368.value));
                    sj5array[0] = IKsin(j5array[0]);
                    cj5array[0] = IKcos(j5array[0]);
                    if (j5array[0] > IKPI) {
                      j5array[0] -= IK2PI;
                    } else if (j5array[0] < -IKPI) {
                      j5array[0] += IK2PI;
                    }
                    j5valid[0] = true;
                    for (int ij5 = 0; ij5 < 1; ++ij5) {
                      if (!j5valid[ij5]) {
                        continue;
                      }
                      _ij5[0] = ij5;
                      _ij5[1] = -1;
                      for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                            IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                          j5valid[iij5] = false;
                          _ij5[1] = iij5;
                          break;
                        }
                      }
                      j5 = j5array[ij5];
                      cj5 = cj5array[ij5];
                      sj5 = sj5array[ij5];
                      {
                        IkReal evalcond[2];
                        evalcond[0] = (((sj4 * (IKcos(j5)))) + new_r20);
                        evalcond[1] = ((((-1.0) * sj4 * (IKsin(j5)))) + new_r21);
                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH) {
                          continue;
                        }
                      }

                      {
                        IkReal j3eval[3];
                        j3eval[0] = sj4;
                        j3eval[1] = IKsign(sj4);
                        j3eval[2] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                        if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 ||
                            IKabs(j3eval[2]) < 0.0000010000000000) {
                          {
                            IkReal j3eval[2];
                            j3eval[0] = cj5;
                            j3eval[1] = sj4;
                            if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000) {
                              {
                                IkReal evalcond[5];
                                bool bgotonextstatement = true;
                                do {
                                  evalcond[0] = ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j5)))),
                                                         6.28318530717959)));
                                  evalcond[1] = new_r20;
                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                      IKabs(evalcond[1]) < 0.0000050000000000) {
                                    bgotonextstatement = false;
                                    {
                                      IkReal j3array[1], cj3array[1], sj3array[1];
                                      bool j3valid[1] = {false};
                                      _nj3 = 1;
                                      if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                          IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                          IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(new_r10) - 1) <= IKFAST_SINCOS_THRESH)
                                        continue;
                                      j3array[0] = IKatan2(((-1.0) * new_r00), new_r10);
                                      sj3array[0] = IKsin(j3array[0]);
                                      cj3array[0] = IKcos(j3array[0]);
                                      if (j3array[0] > IKPI) {
                                        j3array[0] -= IK2PI;
                                      } else if (j3array[0] < -IKPI) {
                                        j3array[0] += IK2PI;
                                      }
                                      j3valid[0] = true;
                                      for (int ij3 = 0; ij3 < 1; ++ij3) {
                                        if (!j3valid[ij3]) {
                                          continue;
                                        }
                                        _ij3[0] = ij3;
                                        _ij3[1] = -1;
                                        for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                                          if (j3valid[iij3] &&
                                              IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                              IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH) {
                                            j3valid[iij3] = false;
                                            _ij3[1] = iij3;
                                            break;
                                          }
                                        }
                                        j3 = j3array[ij3];
                                        cj3 = cj3array[ij3];
                                        sj3 = sj3array[ij3];
                                        {
                                          IkReal evalcond[18];
                                          IkReal x369 = IKsin(j3);
                                          IkReal x370 = IKcos(j3);
                                          IkReal x371 = ((1.0) * sj4);
                                          IkReal x372 = (new_r22 * x369);
                                          IkReal x373 = (new_r00 * x370);
                                          IkReal x374 = (new_r11 * x369);
                                          IkReal x375 = (new_r02 * x370);
                                          IkReal x376 = (new_r01 * x370);
                                          IkReal x377 = (new_r12 * x369);
                                          IkReal x378 = ((1.0) * x369);
                                          IkReal x379 = (new_r10 * x369);
                                          evalcond[0] = (x369 + new_r00);
                                          evalcond[1] = (new_r01 + ((new_r22 * x370)));
                                          evalcond[2] = (x372 + new_r11);
                                          evalcond[3] = ((((-1.0) * x370)) + new_r10);
                                          evalcond[4] = ((((-1.0) * x370 * x371)) + new_r02);
                                          evalcond[5] = ((((-1.0) * x369 * x371)) + new_r12);
                                          evalcond[6] = (x379 + x373);
                                          evalcond[7] = (((new_r12 * x370)) + (((-1.0) * new_r02 * x378)));
                                          evalcond[8] = ((((-1.0) * new_r01 * x378)) + ((new_r11 * x370)));
                                          evalcond[9] = (x376 + x374 + new_r22);
                                          evalcond[10] = ((-1.0) + (((-1.0) * new_r00 * x378)) + ((new_r10 * x370)));
                                          evalcond[11] = (((new_r10 * x372)) + ((new_r22 * x373)));
                                          evalcond[12] = ((((-1.0) * x371)) + x377 + x375);
                                          evalcond[13] = ((((-1.0) * x371 * x373)) + (((-1.0) * x371 * x379)));
                                          evalcond[14] =
                                              (((new_r12 * x372)) + (((-1.0) * new_r22 * x371)) + ((new_r22 * x375)));
                                          evalcond[15] = ((((-1.0) * cj4 * new_r21)) + (((-1.0) * x371 * x374)) +
                                                          (((-1.0) * x371 * x376)));
                                          evalcond[16] = ((1.0) + (((-1.0) * sj4 * x371)) + ((new_r11 * x372)) +
                                                          ((new_r22 * x376)));
                                          evalcond[17] = ((1.0) + (((-1.0) * x371 * x377)) + (((-1.0) * x371 * x375)) +
                                                          (((-1.0) * (new_r22 * new_r22))));
                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH) {
                                            continue;
                                          }
                                        }

                                        {
                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                          vinfos[0].jointtype = 1;
                                          vinfos[0].foffset = j0;
                                          vinfos[0].indices[0] = _ij0[0];
                                          vinfos[0].indices[1] = _ij0[1];
                                          vinfos[0].maxsolutions = _nj0;
                                          vinfos[1].jointtype = 1;
                                          vinfos[1].foffset = j1;
                                          vinfos[1].indices[0] = _ij1[0];
                                          vinfos[1].indices[1] = _ij1[1];
                                          vinfos[1].maxsolutions = _nj1;
                                          vinfos[2].jointtype = 1;
                                          vinfos[2].foffset = j2;
                                          vinfos[2].indices[0] = _ij2[0];
                                          vinfos[2].indices[1] = _ij2[1];
                                          vinfos[2].maxsolutions = _nj2;
                                          vinfos[3].jointtype = 1;
                                          vinfos[3].foffset = j3;
                                          vinfos[3].indices[0] = _ij3[0];
                                          vinfos[3].indices[1] = _ij3[1];
                                          vinfos[3].maxsolutions = _nj3;
                                          vinfos[4].jointtype = 1;
                                          vinfos[4].foffset = j4;
                                          vinfos[4].indices[0] = _ij4[0];
                                          vinfos[4].indices[1] = _ij4[1];
                                          vinfos[4].maxsolutions = _nj4;
                                          vinfos[5].jointtype = 1;
                                          vinfos[5].foffset = j5;
                                          vinfos[5].indices[0] = _ij5[0];
                                          vinfos[5].indices[1] = _ij5[1];
                                          vinfos[5].maxsolutions = _nj5;
                                          std::vector<int> vfree(0);
                                          solutions.AddSolution(vinfos, vfree);
                                        }
                                      }
                                    }
                                  }
                                } while (0);
                                if (bgotonextstatement) {
                                  bool bgotonextstatement = true;
                                  do {
                                    evalcond[0] = ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j5)))),
                                                           6.28318530717959)));
                                    evalcond[1] = new_r20;
                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                        IKabs(evalcond[1]) < 0.0000050000000000) {
                                      bgotonextstatement = false;
                                      {
                                        IkReal j3array[1], cj3array[1], sj3array[1];
                                        bool j3valid[1] = {false};
                                        _nj3 = 1;
                                        if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(IKsqr(new_r00) + IKsqr(((-1.0) * new_r10)) - 1) <=
                                                IKFAST_SINCOS_THRESH)
                                          continue;
                                        j3array[0] = IKatan2(new_r00, ((-1.0) * new_r10));
                                        sj3array[0] = IKsin(j3array[0]);
                                        cj3array[0] = IKcos(j3array[0]);
                                        if (j3array[0] > IKPI) {
                                          j3array[0] -= IK2PI;
                                        } else if (j3array[0] < -IKPI) {
                                          j3array[0] += IK2PI;
                                        }
                                        j3valid[0] = true;
                                        for (int ij3 = 0; ij3 < 1; ++ij3) {
                                          if (!j3valid[ij3]) {
                                            continue;
                                          }
                                          _ij3[0] = ij3;
                                          _ij3[1] = -1;
                                          for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                                            if (j3valid[iij3] &&
                                                IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH) {
                                              j3valid[iij3] = false;
                                              _ij3[1] = iij3;
                                              break;
                                            }
                                          }
                                          j3 = j3array[ij3];
                                          cj3 = cj3array[ij3];
                                          sj3 = sj3array[ij3];
                                          {
                                            IkReal evalcond[18];
                                            IkReal x380 = IKcos(j3);
                                            IkReal x381 = IKsin(j3);
                                            IkReal x382 = ((1.0) * sj4);
                                            IkReal x383 = ((1.0) * new_r22);
                                            IkReal x384 = (new_r22 * x381);
                                            IkReal x385 = (new_r00 * x380);
                                            IkReal x386 = (new_r11 * x381);
                                            IkReal x387 = (new_r01 * x380);
                                            IkReal x388 = (new_r02 * x380);
                                            IkReal x389 = (new_r12 * x381);
                                            IkReal x390 = ((1.0) * x381);
                                            IkReal x391 = (new_r10 * x381);
                                            evalcond[0] = (x380 + new_r10);
                                            evalcond[1] = ((((-1.0) * x390)) + new_r00);
                                            evalcond[2] = ((((-1.0) * x380 * x382)) + new_r02);
                                            evalcond[3] = ((((-1.0) * x381 * x382)) + new_r12);
                                            evalcond[4] = ((((-1.0) * x380 * x383)) + new_r01);
                                            evalcond[5] = ((((-1.0) * x381 * x383)) + new_r11);
                                            evalcond[6] = (x385 + x391);
                                            evalcond[7] = (((new_r12 * x380)) + (((-1.0) * new_r02 * x390)));
                                            evalcond[8] = ((((-1.0) * new_r01 * x390)) + ((new_r11 * x380)));
                                            evalcond[9] = ((1.0) + ((new_r10 * x380)) + (((-1.0) * new_r00 * x390)));
                                            evalcond[10] = (((new_r22 * x385)) + ((new_r10 * x384)));
                                            evalcond[11] = (x388 + x389 + (((-1.0) * x382)));
                                            evalcond[12] = (x386 + x387 + (((-1.0) * x383)));
                                            evalcond[13] = ((((-1.0) * x382 * x391)) + (((-1.0) * x382 * x385)));
                                            evalcond[14] =
                                                (((new_r22 * x388)) + ((new_r12 * x384)) + (((-1.0) * new_r22 * x382)));
                                            evalcond[15] =
                                                ((-1.0) + ((new_r22 * x387)) + (sj4 * sj4) + ((new_r11 * x384)));
                                            evalcond[16] = (((new_r22 * sj4)) + (((-1.0) * x382 * x386)) +
                                                            (((-1.0) * x382 * x387)));
                                            evalcond[17] = ((1.0) + (((-1.0) * new_r22 * x383)) +
                                                            (((-1.0) * x382 * x388)) + (((-1.0) * x382 * x389)));
                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH) {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                            vinfos[0].jointtype = 1;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 1;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 1;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 1;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos, vfree);
                                          }
                                        }
                                      }
                                    }
                                  } while (0);
                                  if (bgotonextstatement) {
                                    bool bgotonextstatement = true;
                                    do {
                                      evalcond[0] = ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                                      evalcond[1] = new_r20;
                                      evalcond[2] = new_r02;
                                      evalcond[3] = new_r12;
                                      evalcond[4] = new_r21;
                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                          IKabs(evalcond[1]) < 0.0000050000000000 &&
                                          IKabs(evalcond[2]) < 0.0000050000000000 &&
                                          IKabs(evalcond[3]) < 0.0000050000000000 &&
                                          IKabs(evalcond[4]) < 0.0000050000000000) {
                                        bgotonextstatement = false;
                                        {
                                          IkReal j3array[1], cj3array[1], sj3array[1];
                                          bool j3valid[1] = {false};
                                          _nj3 = 1;
                                          IkReal x392 = ((1.0) * new_r01);
                                          if (IKabs(((((-1.0) * cj5 * x392)) + (((-1.0) * new_r00 * sj5)))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs((((cj5 * new_r00)) + (((-1.0) * sj5 * x392)))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(IKsqr(((((-1.0) * cj5 * x392)) + (((-1.0) * new_r00 * sj5)))) +
                                                    IKsqr((((cj5 * new_r00)) + (((-1.0) * sj5 * x392)))) - 1) <=
                                                  IKFAST_SINCOS_THRESH)
                                            continue;
                                          j3array[0] = IKatan2(((((-1.0) * cj5 * x392)) + (((-1.0) * new_r00 * sj5))),
                                                               (((cj5 * new_r00)) + (((-1.0) * sj5 * x392))));
                                          sj3array[0] = IKsin(j3array[0]);
                                          cj3array[0] = IKcos(j3array[0]);
                                          if (j3array[0] > IKPI) {
                                            j3array[0] -= IK2PI;
                                          } else if (j3array[0] < -IKPI) {
                                            j3array[0] += IK2PI;
                                          }
                                          j3valid[0] = true;
                                          for (int ij3 = 0; ij3 < 1; ++ij3) {
                                            if (!j3valid[ij3]) {
                                              continue;
                                            }
                                            _ij3[0] = ij3;
                                            _ij3[1] = -1;
                                            for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                                              if (j3valid[iij3] &&
                                                  IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH) {
                                                j3valid[iij3] = false;
                                                _ij3[1] = iij3;
                                                break;
                                              }
                                            }
                                            j3 = j3array[ij3];
                                            cj3 = cj3array[ij3];
                                            sj3 = sj3array[ij3];
                                            {
                                              IkReal evalcond[8];
                                              IkReal x393 = IKcos(j3);
                                              IkReal x394 = IKsin(j3);
                                              IkReal x395 = ((1.0) * cj5);
                                              IkReal x396 = (sj5 * x394);
                                              IkReal x397 = (sj5 * x393);
                                              IkReal x398 = ((1.0) * x394);
                                              IkReal x399 = (x393 * x395);
                                              evalcond[0] = (((new_r11 * x394)) + sj5 + ((new_r01 * x393)));
                                              evalcond[1] = (((cj5 * x394)) + x397 + new_r01);
                                              evalcond[2] = ((((-1.0) * x399)) + x396 + new_r00);
                                              evalcond[3] = ((((-1.0) * x399)) + x396 + new_r11);
                                              evalcond[4] =
                                                  ((((-1.0) * x395)) + ((new_r00 * x393)) + ((new_r10 * x394)));
                                              evalcond[5] = ((((-1.0) * x397)) + (((-1.0) * x394 * x395)) + new_r10);
                                              evalcond[6] =
                                                  ((((-1.0) * sj5)) + (((-1.0) * new_r00 * x398)) + ((new_r10 * x393)));
                                              evalcond[7] = ((((-1.0) * new_r01 * x398)) + ((new_r11 * x393)) +
                                                             (((-1.0) * x395)));
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                              vinfos[0].jointtype = 1;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 1;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 1;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 1;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    } while (0);
                                    if (bgotonextstatement) {
                                      bool bgotonextstatement = true;
                                      do {
                                        evalcond[0] =
                                            ((-3.14159265358979) +
                                             (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j4)))),
                                                     6.28318530717959)));
                                        evalcond[1] = new_r20;
                                        evalcond[2] = new_r02;
                                        evalcond[3] = new_r12;
                                        evalcond[4] = new_r21;
                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                            IKabs(evalcond[1]) < 0.0000050000000000 &&
                                            IKabs(evalcond[2]) < 0.0000050000000000 &&
                                            IKabs(evalcond[3]) < 0.0000050000000000 &&
                                            IKabs(evalcond[4]) < 0.0000050000000000) {
                                          bgotonextstatement = false;
                                          {
                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                            bool j3valid[1] = {false};
                                            _nj3 = 1;
                                            IkReal x400 = ((1.0) * cj5);
                                            if (IKabs(((((-1.0) * new_r00 * sj5)) + (((-1.0) * new_r01 * x400)))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs((((new_r01 * sj5)) + (((-1.0) * new_r00 * x400)))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(
                                                    IKsqr(((((-1.0) * new_r00 * sj5)) + (((-1.0) * new_r01 * x400)))) +
                                                    IKsqr((((new_r01 * sj5)) + (((-1.0) * new_r00 * x400)))) - 1) <=
                                                    IKFAST_SINCOS_THRESH)
                                              continue;
                                            j3array[0] =
                                                IKatan2(((((-1.0) * new_r00 * sj5)) + (((-1.0) * new_r01 * x400))),
                                                        (((new_r01 * sj5)) + (((-1.0) * new_r00 * x400))));
                                            sj3array[0] = IKsin(j3array[0]);
                                            cj3array[0] = IKcos(j3array[0]);
                                            if (j3array[0] > IKPI) {
                                              j3array[0] -= IK2PI;
                                            } else if (j3array[0] < -IKPI) {
                                              j3array[0] += IK2PI;
                                            }
                                            j3valid[0] = true;
                                            for (int ij3 = 0; ij3 < 1; ++ij3) {
                                              if (!j3valid[ij3]) {
                                                continue;
                                              }
                                              _ij3[0] = ij3;
                                              _ij3[1] = -1;
                                              for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                                                if (j3valid[iij3] &&
                                                    IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH) {
                                                  j3valid[iij3] = false;
                                                  _ij3[1] = iij3;
                                                  break;
                                                }
                                              }
                                              j3 = j3array[ij3];
                                              cj3 = cj3array[ij3];
                                              sj3 = sj3array[ij3];
                                              {
                                                IkReal evalcond[8];
                                                IkReal x401 = IKsin(j3);
                                                IkReal x402 = IKcos(j3);
                                                IkReal x403 = ((1.0) * sj5);
                                                IkReal x404 = ((1.0) * cj5);
                                                IkReal x405 = (cj5 * x401);
                                                IkReal x406 = ((1.0) * x401);
                                                IkReal x407 = (x402 * x403);
                                                evalcond[0] = (cj5 + ((new_r10 * x401)) + ((new_r00 * x402)));
                                                evalcond[1] = (((cj5 * x402)) + ((sj5 * x401)) + new_r00);
                                                evalcond[2] = (x405 + new_r01 + (((-1.0) * x407)));
                                                evalcond[3] = (x405 + new_r10 + (((-1.0) * x407)));
                                                evalcond[4] =
                                                    (((new_r11 * x401)) + ((new_r01 * x402)) + (((-1.0) * x403)));
                                                evalcond[5] =
                                                    ((((-1.0) * x402 * x404)) + (((-1.0) * x401 * x403)) + new_r11);
                                                evalcond[6] = (((new_r10 * x402)) + (((-1.0) * new_r00 * x406)) +
                                                               (((-1.0) * x403)));
                                                evalcond[7] = (((new_r11 * x402)) + (((-1.0) * new_r01 * x406)) +
                                                               (((-1.0) * x404)));
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                vinfos[0].jointtype = 1;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 1;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 1;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 1;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      } while (0);
                                      if (bgotonextstatement) {
                                        bool bgotonextstatement = true;
                                        do {
                                          evalcond[0] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                                          if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j3eval[1];
                                              new_r02 = 0;
                                              new_r12 = 0;
                                              new_r20 = 0;
                                              new_r21 = 0;
                                              j3eval[0] = ((IKabs(new_r11)) + (IKabs(new_r01)));
                                              if (IKabs(j3eval[0]) < 0.0000010000000000) {
                                                {
                                                  IkReal j3eval[1];
                                                  new_r02 = 0;
                                                  new_r12 = 0;
                                                  new_r20 = 0;
                                                  new_r21 = 0;
                                                  j3eval[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                  if (IKabs(j3eval[0]) < 0.0000010000000000) {
                                                    {
                                                      IkReal j3eval[1];
                                                      new_r02 = 0;
                                                      new_r12 = 0;
                                                      new_r20 = 0;
                                                      new_r21 = 0;
                                                      j3eval[0] =
                                                          ((IKabs((new_r11 * new_r22))) + (IKabs((new_r01 * new_r22))));
                                                      if (IKabs(j3eval[0]) < 0.0000010000000000) {
                                                        continue;  // no branches [j3]

                                                      } else {
                                                        {
                                                          IkReal j3array[2], cj3array[2], sj3array[2];
                                                          bool j3valid[2] = {false};
                                                          _nj3 = 2;
                                                          CheckValue<IkReal> x409 = IKatan2WithCheck(
                                                              IkReal((new_r01 * new_r22)), IkReal((new_r11 * new_r22)),
                                                              IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x409.valid) {
                                                            continue;
                                                          }
                                                          IkReal x408 = x409.value;
                                                          j3array[0] = ((-1.0) * x408);
                                                          sj3array[0] = IKsin(j3array[0]);
                                                          cj3array[0] = IKcos(j3array[0]);
                                                          j3array[1] = ((3.14159265358979) + (((-1.0) * x408)));
                                                          sj3array[1] = IKsin(j3array[1]);
                                                          cj3array[1] = IKcos(j3array[1]);
                                                          if (j3array[0] > IKPI) {
                                                            j3array[0] -= IK2PI;
                                                          } else if (j3array[0] < -IKPI) {
                                                            j3array[0] += IK2PI;
                                                          }
                                                          j3valid[0] = true;
                                                          if (j3array[1] > IKPI) {
                                                            j3array[1] -= IK2PI;
                                                          } else if (j3array[1] < -IKPI) {
                                                            j3array[1] += IK2PI;
                                                          }
                                                          j3valid[1] = true;
                                                          for (int ij3 = 0; ij3 < 2; ++ij3) {
                                                            if (!j3valid[ij3]) {
                                                              continue;
                                                            }
                                                            _ij3[0] = ij3;
                                                            _ij3[1] = -1;
                                                            for (int iij3 = ij3 + 1; iij3 < 2; ++iij3) {
                                                              if (j3valid[iij3] &&
                                                                  IKabs(cj3array[ij3] - cj3array[iij3]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj3array[ij3] - sj3array[iij3]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j3valid[iij3] = false;
                                                                _ij3[1] = iij3;
                                                                break;
                                                              }
                                                            }
                                                            j3 = j3array[ij3];
                                                            cj3 = cj3array[ij3];
                                                            sj3 = sj3array[ij3];
                                                            {
                                                              IkReal evalcond[5];
                                                              IkReal x410 = IKsin(j3);
                                                              IkReal x411 = IKcos(j3);
                                                              IkReal x412 = (new_r00 * x411);
                                                              IkReal x413 = (new_r10 * x410);
                                                              IkReal x414 = ((1.0) * x410);
                                                              evalcond[0] = (((new_r11 * x410)) + ((new_r01 * x411)));
                                                              evalcond[1] = (x412 + x413);
                                                              evalcond[2] =
                                                                  (((new_r10 * x411)) + (((-1.0) * new_r00 * x414)));
                                                              evalcond[3] =
                                                                  (((new_r11 * x411)) + (((-1.0) * new_r01 * x414)));
                                                              evalcond[4] = (((new_r22 * x413)) + ((new_r22 * x412)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 1;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 1;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 1;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }

                                                  } else {
                                                    {
                                                      IkReal j3array[2], cj3array[2], sj3array[2];
                                                      bool j3valid[2] = {false};
                                                      _nj3 = 2;
                                                      CheckValue<IkReal> x416 = IKatan2WithCheck(
                                                          IkReal(new_r00), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                                      if (!x416.valid) {
                                                        continue;
                                                      }
                                                      IkReal x415 = x416.value;
                                                      j3array[0] = ((-1.0) * x415);
                                                      sj3array[0] = IKsin(j3array[0]);
                                                      cj3array[0] = IKcos(j3array[0]);
                                                      j3array[1] = ((3.14159265358979) + (((-1.0) * x415)));
                                                      sj3array[1] = IKsin(j3array[1]);
                                                      cj3array[1] = IKcos(j3array[1]);
                                                      if (j3array[0] > IKPI) {
                                                        j3array[0] -= IK2PI;
                                                      } else if (j3array[0] < -IKPI) {
                                                        j3array[0] += IK2PI;
                                                      }
                                                      j3valid[0] = true;
                                                      if (j3array[1] > IKPI) {
                                                        j3array[1] -= IK2PI;
                                                      } else if (j3array[1] < -IKPI) {
                                                        j3array[1] += IK2PI;
                                                      }
                                                      j3valid[1] = true;
                                                      for (int ij3 = 0; ij3 < 2; ++ij3) {
                                                        if (!j3valid[ij3]) {
                                                          continue;
                                                        }
                                                        _ij3[0] = ij3;
                                                        _ij3[1] = -1;
                                                        for (int iij3 = ij3 + 1; iij3 < 2; ++iij3) {
                                                          if (j3valid[iij3] &&
                                                              IKabs(cj3array[ij3] - cj3array[iij3]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj3array[ij3] - sj3array[iij3]) <
                                                                  IKFAST_SOLUTION_THRESH) {
                                                            j3valid[iij3] = false;
                                                            _ij3[1] = iij3;
                                                            break;
                                                          }
                                                        }
                                                        j3 = j3array[ij3];
                                                        cj3 = cj3array[ij3];
                                                        sj3 = sj3array[ij3];
                                                        {
                                                          IkReal evalcond[5];
                                                          IkReal x417 = IKcos(j3);
                                                          IkReal x418 = IKsin(j3);
                                                          IkReal x419 = (new_r22 * x418);
                                                          IkReal x420 = (new_r22 * x417);
                                                          IkReal x421 = ((1.0) * x418);
                                                          evalcond[0] = (((new_r11 * x418)) + ((new_r01 * x417)));
                                                          evalcond[1] =
                                                              ((((-1.0) * new_r00 * x421)) + ((new_r10 * x417)));
                                                          evalcond[2] =
                                                              (((new_r11 * x417)) + (((-1.0) * new_r01 * x421)));
                                                          evalcond[3] = (((new_r11 * x419)) + ((new_r01 * x420)));
                                                          evalcond[4] = (((new_r10 * x419)) + ((new_r00 * x420)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                                                            continue;
                                                          }
                                                        }

                                                        {
                                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                          vinfos[0].jointtype = 1;
                                                          vinfos[0].foffset = j0;
                                                          vinfos[0].indices[0] = _ij0[0];
                                                          vinfos[0].indices[1] = _ij0[1];
                                                          vinfos[0].maxsolutions = _nj0;
                                                          vinfos[1].jointtype = 1;
                                                          vinfos[1].foffset = j1;
                                                          vinfos[1].indices[0] = _ij1[0];
                                                          vinfos[1].indices[1] = _ij1[1];
                                                          vinfos[1].maxsolutions = _nj1;
                                                          vinfos[2].jointtype = 1;
                                                          vinfos[2].foffset = j2;
                                                          vinfos[2].indices[0] = _ij2[0];
                                                          vinfos[2].indices[1] = _ij2[1];
                                                          vinfos[2].maxsolutions = _nj2;
                                                          vinfos[3].jointtype = 1;
                                                          vinfos[3].foffset = j3;
                                                          vinfos[3].indices[0] = _ij3[0];
                                                          vinfos[3].indices[1] = _ij3[1];
                                                          vinfos[3].maxsolutions = _nj3;
                                                          vinfos[4].jointtype = 1;
                                                          vinfos[4].foffset = j4;
                                                          vinfos[4].indices[0] = _ij4[0];
                                                          vinfos[4].indices[1] = _ij4[1];
                                                          vinfos[4].maxsolutions = _nj4;
                                                          vinfos[5].jointtype = 1;
                                                          vinfos[5].foffset = j5;
                                                          vinfos[5].indices[0] = _ij5[0];
                                                          vinfos[5].indices[1] = _ij5[1];
                                                          vinfos[5].maxsolutions = _nj5;
                                                          std::vector<int> vfree(0);
                                                          solutions.AddSolution(vinfos, vfree);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }

                                              } else {
                                                {
                                                  IkReal j3array[2], cj3array[2], sj3array[2];
                                                  bool j3valid[2] = {false};
                                                  _nj3 = 2;
                                                  CheckValue<IkReal> x423 = IKatan2WithCheck(
                                                      IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x423.valid) {
                                                    continue;
                                                  }
                                                  IkReal x422 = x423.value;
                                                  j3array[0] = ((-1.0) * x422);
                                                  sj3array[0] = IKsin(j3array[0]);
                                                  cj3array[0] = IKcos(j3array[0]);
                                                  j3array[1] = ((3.14159265358979) + (((-1.0) * x422)));
                                                  sj3array[1] = IKsin(j3array[1]);
                                                  cj3array[1] = IKcos(j3array[1]);
                                                  if (j3array[0] > IKPI) {
                                                    j3array[0] -= IK2PI;
                                                  } else if (j3array[0] < -IKPI) {
                                                    j3array[0] += IK2PI;
                                                  }
                                                  j3valid[0] = true;
                                                  if (j3array[1] > IKPI) {
                                                    j3array[1] -= IK2PI;
                                                  } else if (j3array[1] < -IKPI) {
                                                    j3array[1] += IK2PI;
                                                  }
                                                  j3valid[1] = true;
                                                  for (int ij3 = 0; ij3 < 2; ++ij3) {
                                                    if (!j3valid[ij3]) {
                                                      continue;
                                                    }
                                                    _ij3[0] = ij3;
                                                    _ij3[1] = -1;
                                                    for (int iij3 = ij3 + 1; iij3 < 2; ++iij3) {
                                                      if (j3valid[iij3] &&
                                                          IKabs(cj3array[ij3] - cj3array[iij3]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj3array[ij3] - sj3array[iij3]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j3valid[iij3] = false;
                                                        _ij3[1] = iij3;
                                                        break;
                                                      }
                                                    }
                                                    j3 = j3array[ij3];
                                                    cj3 = cj3array[ij3];
                                                    sj3 = sj3array[ij3];
                                                    {
                                                      IkReal evalcond[5];
                                                      IkReal x424 = IKcos(j3);
                                                      IkReal x425 = IKsin(j3);
                                                      IkReal x426 = (new_r22 * x425);
                                                      IkReal x427 = (new_r22 * x424);
                                                      IkReal x428 = ((1.0) * x425);
                                                      evalcond[0] = (((new_r10 * x425)) + ((new_r00 * x424)));
                                                      evalcond[1] = ((((-1.0) * new_r00 * x428)) + ((new_r10 * x424)));
                                                      evalcond[2] = (((new_r11 * x424)) + (((-1.0) * new_r01 * x428)));
                                                      evalcond[3] = (((new_r11 * x426)) + ((new_r01 * x427)));
                                                      evalcond[4] = (((new_r10 * x426)) + ((new_r00 * x427)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 1;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 1;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 1;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement) {
                                          bool bgotonextstatement = true;
                                          do {
                                            if (1) {
                                              bgotonextstatement = false;
                                              continue;  // branch miss [j3]
                                            }
                                          } while (0);
                                          if (bgotonextstatement) {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }

                            } else {
                              {
                                IkReal j3array[1], cj3array[1], sj3array[1];
                                bool j3valid[1] = {false};
                                _nj3 = 1;
                                CheckValue<IkReal> x430 = IKPowWithIntegerCheck(sj4, -1);
                                if (!x430.valid) {
                                  continue;
                                }
                                IkReal x429 = x430.value;
                                CheckValue<IkReal> x431 = IKPowWithIntegerCheck(cj5, -1);
                                if (!x431.valid) {
                                  continue;
                                }
                                if (IKabs((x429 * (x431.value) *
                                           (((((-1.0) * cj4 * new_r02 * sj5)) + (((-1.0) * new_r01 * sj4)))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs((new_r02 * x429)) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr((x429 * (x431.value) *
                                                 (((((-1.0) * cj4 * new_r02 * sj5)) + (((-1.0) * new_r01 * sj4)))))) +
                                          IKsqr((new_r02 * x429)) - 1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j3array[0] =
                                    IKatan2((x429 * (x431.value) *
                                             (((((-1.0) * cj4 * new_r02 * sj5)) + (((-1.0) * new_r01 * sj4))))),
                                            (new_r02 * x429));
                                sj3array[0] = IKsin(j3array[0]);
                                cj3array[0] = IKcos(j3array[0]);
                                if (j3array[0] > IKPI) {
                                  j3array[0] -= IK2PI;
                                } else if (j3array[0] < -IKPI) {
                                  j3array[0] += IK2PI;
                                }
                                j3valid[0] = true;
                                for (int ij3 = 0; ij3 < 1; ++ij3) {
                                  if (!j3valid[ij3]) {
                                    continue;
                                  }
                                  _ij3[0] = ij3;
                                  _ij3[1] = -1;
                                  for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                                    if (j3valid[iij3] &&
                                        IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH) {
                                      j3valid[iij3] = false;
                                      _ij3[1] = iij3;
                                      break;
                                    }
                                  }
                                  j3 = j3array[ij3];
                                  cj3 = cj3array[ij3];
                                  sj3 = sj3array[ij3];
                                  {
                                    IkReal evalcond[18];
                                    IkReal x432 = IKcos(j3);
                                    IkReal x433 = IKsin(j3);
                                    IkReal x434 = ((1.0) * cj5);
                                    IkReal x435 = ((1.0) * cj4);
                                    IkReal x436 = ((1.0) * sj4);
                                    IkReal x437 = ((1.0) * sj5);
                                    IkReal x438 = (cj4 * x432);
                                    IkReal x439 = (cj4 * x433);
                                    IkReal x440 = (cj5 * x433);
                                    IkReal x441 = (new_r11 * x433);
                                    IkReal x442 = (new_r02 * x432);
                                    IkReal x443 = (new_r01 * x432);
                                    IkReal x444 = (new_r12 * x433);
                                    IkReal x445 = (new_r00 * x432);
                                    IkReal x446 = ((1.0) * x433);
                                    IkReal x447 = (new_r10 * x433);
                                    evalcond[0] = ((((-1.0) * x432 * x436)) + new_r02);
                                    evalcond[1] = ((((-1.0) * x433 * x436)) + new_r12);
                                    evalcond[2] = (((new_r12 * x432)) + (((-1.0) * new_r02 * x446)));
                                    evalcond[3] = (x440 + new_r01 + ((sj5 * x438)));
                                    evalcond[4] = ((((-1.0) * x436)) + x444 + x442);
                                    evalcond[5] = (((cj4 * sj5)) + x441 + x443);
                                    evalcond[6] = ((((-1.0) * x434 * x438)) + new_r00 + ((sj5 * x433)));
                                    evalcond[7] = ((((-1.0) * x432 * x434)) + new_r11 + ((sj5 * x439)));
                                    evalcond[8] =
                                        ((((-1.0) * x437)) + (((-1.0) * new_r00 * x446)) + ((new_r10 * x432)));
                                    evalcond[9] =
                                        ((((-1.0) * x434)) + (((-1.0) * new_r01 * x446)) + ((new_r11 * x432)));
                                    evalcond[10] = ((((-1.0) * cj4 * x434)) + x445 + x447);
                                    evalcond[11] = ((((-1.0) * x432 * x437)) + (((-1.0) * x434 * x439)) + new_r10);
                                    evalcond[12] =
                                        (((new_r12 * x439)) + ((new_r02 * x438)) + (((-1.0) * new_r22 * x436)));
                                    evalcond[13] =
                                        (((new_r01 * x438)) + sj5 + ((new_r11 * x439)) + (((-1.0) * new_r21 * x436)));
                                    evalcond[14] = ((((-1.0) * x436 * x445)) + (((-1.0) * x436 * x447)) +
                                                    (((-1.0) * new_r20 * x435)));
                                    evalcond[15] = ((((-1.0) * x436 * x441)) + (((-1.0) * x436 * x443)) +
                                                    (((-1.0) * new_r21 * x435)));
                                    evalcond[16] = ((1.0) + (((-1.0) * x436 * x444)) + (((-1.0) * x436 * x442)) +
                                                    (((-1.0) * new_r22 * x435)));
                                    evalcond[17] = ((((-1.0) * x434)) + ((new_r00 * x438)) + ((new_r10 * x439)) +
                                                    (((-1.0) * new_r20 * x436)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH) {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }

                        } else {
                          {
                            IkReal j3array[1], cj3array[1], sj3array[1];
                            bool j3valid[1] = {false};
                            _nj3 = 1;
                            CheckValue<IkReal> x448 = IKPowWithIntegerCheck(IKsign(sj4), -1);
                            if (!x448.valid) {
                              continue;
                            }
                            CheckValue<IkReal> x449 =
                                IKatan2WithCheck(IkReal(new_r12), IkReal(new_r02), IKFAST_ATAN2_MAGTHRESH);
                            if (!x449.valid) {
                              continue;
                            }
                            j3array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x448.value))) + (x449.value));
                            sj3array[0] = IKsin(j3array[0]);
                            cj3array[0] = IKcos(j3array[0]);
                            if (j3array[0] > IKPI) {
                              j3array[0] -= IK2PI;
                            } else if (j3array[0] < -IKPI) {
                              j3array[0] += IK2PI;
                            }
                            j3valid[0] = true;
                            for (int ij3 = 0; ij3 < 1; ++ij3) {
                              if (!j3valid[ij3]) {
                                continue;
                              }
                              _ij3[0] = ij3;
                              _ij3[1] = -1;
                              for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                                if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH) {
                                  j3valid[iij3] = false;
                                  _ij3[1] = iij3;
                                  break;
                                }
                              }
                              j3 = j3array[ij3];
                              cj3 = cj3array[ij3];
                              sj3 = sj3array[ij3];
                              {
                                IkReal evalcond[18];
                                IkReal x450 = IKcos(j3);
                                IkReal x451 = IKsin(j3);
                                IkReal x452 = ((1.0) * cj5);
                                IkReal x453 = ((1.0) * cj4);
                                IkReal x454 = ((1.0) * sj4);
                                IkReal x455 = ((1.0) * sj5);
                                IkReal x456 = (cj4 * x450);
                                IkReal x457 = (cj4 * x451);
                                IkReal x458 = (cj5 * x451);
                                IkReal x459 = (new_r11 * x451);
                                IkReal x460 = (new_r02 * x450);
                                IkReal x461 = (new_r01 * x450);
                                IkReal x462 = (new_r12 * x451);
                                IkReal x463 = (new_r00 * x450);
                                IkReal x464 = ((1.0) * x451);
                                IkReal x465 = (new_r10 * x451);
                                evalcond[0] = ((((-1.0) * x450 * x454)) + new_r02);
                                evalcond[1] = ((((-1.0) * x451 * x454)) + new_r12);
                                evalcond[2] = (((new_r12 * x450)) + (((-1.0) * new_r02 * x464)));
                                evalcond[3] = (x458 + new_r01 + ((sj5 * x456)));
                                evalcond[4] = ((((-1.0) * x454)) + x462 + x460);
                                evalcond[5] = (((cj4 * sj5)) + x459 + x461);
                                evalcond[6] = ((((-1.0) * x452 * x456)) + new_r00 + ((sj5 * x451)));
                                evalcond[7] = ((((-1.0) * x450 * x452)) + new_r11 + ((sj5 * x457)));
                                evalcond[8] = (((new_r10 * x450)) + (((-1.0) * x455)) + (((-1.0) * new_r00 * x464)));
                                evalcond[9] = (((new_r11 * x450)) + (((-1.0) * new_r01 * x464)) + (((-1.0) * x452)));
                                evalcond[10] = ((((-1.0) * cj4 * x452)) + x463 + x465);
                                evalcond[11] = ((((-1.0) * x452 * x457)) + (((-1.0) * x450 * x455)) + new_r10);
                                evalcond[12] = (((new_r12 * x457)) + (((-1.0) * new_r22 * x454)) + ((new_r02 * x456)));
                                evalcond[13] =
                                    ((((-1.0) * new_r21 * x454)) + sj5 + ((new_r11 * x457)) + ((new_r01 * x456)));
                                evalcond[14] =
                                    ((((-1.0) * new_r20 * x453)) + (((-1.0) * x454 * x465)) + (((-1.0) * x454 * x463)));
                                evalcond[15] =
                                    ((((-1.0) * new_r21 * x453)) + (((-1.0) * x454 * x461)) + (((-1.0) * x454 * x459)));
                                evalcond[16] = ((1.0) + (((-1.0) * x454 * x460)) + (((-1.0) * x454 * x462)) +
                                                (((-1.0) * new_r22 * x453)));
                                evalcond[17] = (((new_r10 * x457)) + (((-1.0) * new_r20 * x454)) + ((new_r00 * x456)) +
                                                (((-1.0) * x452)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH) {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 1;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 1;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 1;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

            } else {
              {
                IkReal j3array[1], cj3array[1], sj3array[1];
                bool j3valid[1] = {false};
                _nj3 = 1;
                CheckValue<IkReal> x466 = IKPowWithIntegerCheck(IKsign(sj4), -1);
                if (!x466.valid) {
                  continue;
                }
                CheckValue<IkReal> x467 = IKatan2WithCheck(IkReal(new_r12), IkReal(new_r02), IKFAST_ATAN2_MAGTHRESH);
                if (!x467.valid) {
                  continue;
                }
                j3array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x466.value))) + (x467.value));
                sj3array[0] = IKsin(j3array[0]);
                cj3array[0] = IKcos(j3array[0]);
                if (j3array[0] > IKPI) {
                  j3array[0] -= IK2PI;
                } else if (j3array[0] < -IKPI) {
                  j3array[0] += IK2PI;
                }
                j3valid[0] = true;
                for (int ij3 = 0; ij3 < 1; ++ij3) {
                  if (!j3valid[ij3]) {
                    continue;
                  }
                  _ij3[0] = ij3;
                  _ij3[1] = -1;
                  for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                    if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                        IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH) {
                      j3valid[iij3] = false;
                      _ij3[1] = iij3;
                      break;
                    }
                  }
                  j3 = j3array[ij3];
                  cj3 = cj3array[ij3];
                  sj3 = sj3array[ij3];
                  {
                    IkReal evalcond[8];
                    IkReal x468 = IKcos(j3);
                    IkReal x469 = IKsin(j3);
                    IkReal x470 = ((1.0) * sj4);
                    IkReal x471 = ((1.0) * cj4);
                    IkReal x472 = (new_r02 * x468);
                    IkReal x473 = (new_r12 * x469);
                    evalcond[0] = ((((-1.0) * x468 * x470)) + new_r02);
                    evalcond[1] = ((((-1.0) * x469 * x470)) + new_r12);
                    evalcond[2] = (((new_r12 * x468)) + (((-1.0) * new_r02 * x469)));
                    evalcond[3] = ((((-1.0) * x470)) + x472 + x473);
                    evalcond[4] = (((cj4 * x473)) + ((cj4 * x472)) + (((-1.0) * new_r22 * x470)));
                    evalcond[5] = ((((-1.0) * new_r00 * x468 * x470)) + (((-1.0) * new_r10 * x469 * x470)) +
                                   (((-1.0) * new_r20 * x471)));
                    evalcond[6] = ((((-1.0) * new_r11 * x469 * x470)) + (((-1.0) * new_r21 * x471)) +
                                   (((-1.0) * new_r01 * x468 * x470)));
                    evalcond[7] =
                        ((1.0) + (((-1.0) * new_r22 * x471)) + (((-1.0) * x470 * x472)) + (((-1.0) * x470 * x473)));
                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                      continue;
                    }
                  }

                  {
                    IkReal j5eval[3];
                    j5eval[0] = sj4;
                    j5eval[1] = IKsign(sj4);
                    j5eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                    if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 ||
                        IKabs(j5eval[2]) < 0.0000010000000000) {
                      {
                        IkReal j5eval[2];
                        j5eval[0] = sj3;
                        j5eval[1] = sj4;
                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000) {
                          {
                            IkReal j5eval[3];
                            j5eval[0] = cj3;
                            j5eval[1] = cj4;
                            j5eval[2] = sj4;
                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 ||
                                IKabs(j5eval[2]) < 0.0000010000000000) {
                              {
                                IkReal evalcond[5];
                                bool bgotonextstatement = true;
                                do {
                                  evalcond[0] = ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j3)))),
                                                         6.28318530717959)));
                                  evalcond[1] = new_r02;
                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                      IKabs(evalcond[1]) < 0.0000050000000000) {
                                    bgotonextstatement = false;
                                    {
                                      IkReal j5eval[3];
                                      sj3 = 1.0;
                                      cj3 = 0;
                                      j3 = 1.5707963267949;
                                      j5eval[0] = sj4;
                                      j5eval[1] = IKsign(sj4);
                                      j5eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                      if (IKabs(j5eval[0]) < 0.0000010000000000 ||
                                          IKabs(j5eval[1]) < 0.0000010000000000 ||
                                          IKabs(j5eval[2]) < 0.0000010000000000) {
                                        {
                                          IkReal j5eval[3];
                                          sj3 = 1.0;
                                          cj3 = 0;
                                          j3 = 1.5707963267949;
                                          j5eval[0] = cj4;
                                          j5eval[1] = IKsign(cj4);
                                          j5eval[2] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                          if (IKabs(j5eval[0]) < 0.0000010000000000 ||
                                              IKabs(j5eval[1]) < 0.0000010000000000 ||
                                              IKabs(j5eval[2]) < 0.0000010000000000) {
                                            {
                                              IkReal j5eval[1];
                                              sj3 = 1.0;
                                              cj3 = 0;
                                              j3 = 1.5707963267949;
                                              j5eval[0] = sj4;
                                              if (IKabs(j5eval[0]) < 0.0000010000000000) {
                                                {
                                                  IkReal evalcond[4];
                                                  bool bgotonextstatement = true;
                                                  do {
                                                    evalcond[0] = ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) + (IKabs(j4))),
                                                                           6.28318530717959)));
                                                    evalcond[1] = new_r20;
                                                    evalcond[2] = new_r12;
                                                    evalcond[3] = new_r21;
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[3]) < 0.0000050000000000) {
                                                      bgotonextstatement = false;
                                                      {
                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                        bool j5valid[1] = {false};
                                                        _nj5 = 1;
                                                        if (IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(IKsqr(((-1.0) * new_r11)) + IKsqr(new_r10) - 1) <=
                                                                IKFAST_SINCOS_THRESH)
                                                          continue;
                                                        j5array[0] = IKatan2(((-1.0) * new_r11), new_r10);
                                                        sj5array[0] = IKsin(j5array[0]);
                                                        cj5array[0] = IKcos(j5array[0]);
                                                        if (j5array[0] > IKPI) {
                                                          j5array[0] -= IK2PI;
                                                        } else if (j5array[0] < -IKPI) {
                                                          j5array[0] += IK2PI;
                                                        }
                                                        j5valid[0] = true;
                                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                          if (!j5valid[ij5]) {
                                                            continue;
                                                          }
                                                          _ij5[0] = ij5;
                                                          _ij5[1] = -1;
                                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                            if (j5valid[iij5] &&
                                                                IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j5valid[iij5] = false;
                                                              _ij5[1] = iij5;
                                                              break;
                                                            }
                                                          }
                                                          j5 = j5array[ij5];
                                                          cj5 = cj5array[ij5];
                                                          sj5 = sj5array[ij5];
                                                          {
                                                            IkReal evalcond[4];
                                                            IkReal x474 = IKsin(j5);
                                                            IkReal x475 = ((1.0) * (IKcos(j5)));
                                                            evalcond[0] = (x474 + new_r11);
                                                            evalcond[1] = ((((-1.0) * x475)) + new_r10);
                                                            evalcond[2] = ((((-1.0) * x474)) + (((-1.0) * new_r00)));
                                                            evalcond[3] = ((((-1.0) * x475)) + (((-1.0) * new_r01)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                              continue;
                                                            }
                                                          }

                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 1;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 1;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 1;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {
                                                    bool bgotonextstatement = true;
                                                    do {
                                                      evalcond[0] = ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((-3.14159265358979) + j4)))),
                                                                             6.28318530717959)));
                                                      evalcond[1] = new_r20;
                                                      evalcond[2] = new_r12;
                                                      evalcond[3] = new_r21;
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                          IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                          IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                          IKabs(evalcond[3]) < 0.0000050000000000) {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j5array[1], cj5array[1], sj5array[1];
                                                          bool j5valid[1] = {false};
                                                          _nj5 = 1;
                                                          if (IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(new_r11) + IKsqr(((-1.0) * new_r10)) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j5array[0] = IKatan2(new_r11, ((-1.0) * new_r10));
                                                          sj5array[0] = IKsin(j5array[0]);
                                                          cj5array[0] = IKcos(j5array[0]);
                                                          if (j5array[0] > IKPI) {
                                                            j5array[0] -= IK2PI;
                                                          } else if (j5array[0] < -IKPI) {
                                                            j5array[0] += IK2PI;
                                                          }
                                                          j5valid[0] = true;
                                                          for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                            if (!j5valid[ij5]) {
                                                              continue;
                                                            }
                                                            _ij5[0] = ij5;
                                                            _ij5[1] = -1;
                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                              if (j5valid[iij5] &&
                                                                  IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j5valid[iij5] = false;
                                                                _ij5[1] = iij5;
                                                                break;
                                                              }
                                                            }
                                                            j5 = j5array[ij5];
                                                            cj5 = cj5array[ij5];
                                                            sj5 = sj5array[ij5];
                                                            {
                                                              IkReal evalcond[4];
                                                              IkReal x476 = IKcos(j5);
                                                              IkReal x477 = ((1.0) * (IKsin(j5)));
                                                              evalcond[0] = (x476 + new_r10);
                                                              evalcond[1] = ((((-1.0) * x477)) + new_r11);
                                                              evalcond[2] = ((((-1.0) * x477)) + (((-1.0) * new_r00)));
                                                              evalcond[3] = ((((-1.0) * x476)) + (((-1.0) * new_r01)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 1;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 1;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 1;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement) {
                                                      bool bgotonextstatement = true;
                                                      do {
                                                        evalcond[0] = ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((-1.5707963267949) + j4)))),
                                                                               6.28318530717959)));
                                                        evalcond[1] = new_r22;
                                                        evalcond[2] = new_r11;
                                                        evalcond[3] = new_r10;
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                            IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                            IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                            IKabs(evalcond[3]) < 0.0000050000000000) {
                                                          bgotonextstatement = false;
                                                          {
                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                            bool j5valid[1] = {false};
                                                            _nj5 = 1;
                                                            if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j5array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                            sj5array[0] = IKsin(j5array[0]);
                                                            cj5array[0] = IKcos(j5array[0]);
                                                            if (j5array[0] > IKPI) {
                                                              j5array[0] -= IK2PI;
                                                            } else if (j5array[0] < -IKPI) {
                                                              j5array[0] += IK2PI;
                                                            }
                                                            j5valid[0] = true;
                                                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                              if (!j5valid[ij5]) {
                                                                continue;
                                                              }
                                                              _ij5[0] = ij5;
                                                              _ij5[1] = -1;
                                                              for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                if (j5valid[iij5] &&
                                                                    IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                        IKFAST_SOLUTION_THRESH) {
                                                                  j5valid[iij5] = false;
                                                                  _ij5[1] = iij5;
                                                                  break;
                                                                }
                                                              }
                                                              j5 = j5array[ij5];
                                                              cj5 = cj5array[ij5];
                                                              sj5 = sj5array[ij5];
                                                              {
                                                                IkReal evalcond[4];
                                                                IkReal x478 = IKcos(j5);
                                                                IkReal x479 = ((1.0) * (IKsin(j5)));
                                                                evalcond[0] = (x478 + new_r20);
                                                                evalcond[1] = ((((-1.0) * x479)) + new_r21);
                                                                evalcond[2] =
                                                                    ((((-1.0) * x479)) + (((-1.0) * new_r00)));
                                                                evalcond[3] =
                                                                    ((((-1.0) * x478)) + (((-1.0) * new_r01)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 1;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement) {
                                                        bool bgotonextstatement = true;
                                                        do {
                                                          evalcond[0] = ((-3.14159265358979) +
                                                                         (IKfmod(((3.14159265358979) +
                                                                                  (IKabs(((1.5707963267949) + j4)))),
                                                                                 6.28318530717959)));
                                                          evalcond[1] = new_r22;
                                                          evalcond[2] = new_r11;
                                                          evalcond[3] = new_r10;
                                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                              IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                              IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                              IKabs(evalcond[3]) < 0.0000050000000000) {
                                                            bgotonextstatement = false;
                                                            {
                                                              IkReal j5array[1], cj5array[1], sj5array[1];
                                                              bool j5valid[1] = {false};
                                                              _nj5 = 1;
                                                              if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) -
                                                                        1) <= IKFAST_SINCOS_THRESH)
                                                                continue;
                                                              j5array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                              sj5array[0] = IKsin(j5array[0]);
                                                              cj5array[0] = IKcos(j5array[0]);
                                                              if (j5array[0] > IKPI) {
                                                                j5array[0] -= IK2PI;
                                                              } else if (j5array[0] < -IKPI) {
                                                                j5array[0] += IK2PI;
                                                              }
                                                              j5valid[0] = true;
                                                              for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                if (!j5valid[ij5]) {
                                                                  continue;
                                                                }
                                                                _ij5[0] = ij5;
                                                                _ij5[1] = -1;
                                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                  if (j5valid[iij5] &&
                                                                      IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                          IKFAST_SOLUTION_THRESH &&
                                                                      IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                          IKFAST_SOLUTION_THRESH) {
                                                                    j5valid[iij5] = false;
                                                                    _ij5[1] = iij5;
                                                                    break;
                                                                  }
                                                                }
                                                                j5 = j5array[ij5];
                                                                cj5 = cj5array[ij5];
                                                                sj5 = sj5array[ij5];
                                                                {
                                                                  IkReal evalcond[4];
                                                                  IkReal x480 = IKsin(j5);
                                                                  IkReal x481 = ((1.0) * (IKcos(j5)));
                                                                  evalcond[0] = (x480 + new_r21);
                                                                  evalcond[1] = ((((-1.0) * x481)) + new_r20);
                                                                  evalcond[2] =
                                                                      ((((-1.0) * x480)) + (((-1.0) * new_r00)));
                                                                  evalcond[3] =
                                                                      ((((-1.0) * x481)) + (((-1.0) * new_r01)));
                                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                    continue;
                                                                  }
                                                                }

                                                                {
                                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                      6);
                                                                  vinfos[0].jointtype = 1;
                                                                  vinfos[0].foffset = j0;
                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                  vinfos[0].maxsolutions = _nj0;
                                                                  vinfos[1].jointtype = 1;
                                                                  vinfos[1].foffset = j1;
                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                  vinfos[1].maxsolutions = _nj1;
                                                                  vinfos[2].jointtype = 1;
                                                                  vinfos[2].foffset = j2;
                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                  vinfos[2].maxsolutions = _nj2;
                                                                  vinfos[3].jointtype = 1;
                                                                  vinfos[3].foffset = j3;
                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                  vinfos[3].maxsolutions = _nj3;
                                                                  vinfos[4].jointtype = 1;
                                                                  vinfos[4].foffset = j4;
                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                  vinfos[4].maxsolutions = _nj4;
                                                                  vinfos[5].jointtype = 1;
                                                                  vinfos[5].foffset = j5;
                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                  vinfos[5].maxsolutions = _nj5;
                                                                  std::vector<int> vfree(0);
                                                                  solutions.AddSolution(vinfos, vfree);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } while (0);
                                                        if (bgotonextstatement) {
                                                          bool bgotonextstatement = true;
                                                          do {
                                                            evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                bool j5valid[1] = {false};
                                                                _nj5 = 1;
                                                                if (IKabs(((-1.0) * new_r00)) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(((-1.0) * new_r01)) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                          IKsqr(((-1.0) * new_r01)) - 1) <=
                                                                        IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j5array[0] =
                                                                    IKatan2(((-1.0) * new_r00), ((-1.0) * new_r01));
                                                                sj5array[0] = IKsin(j5array[0]);
                                                                cj5array[0] = IKcos(j5array[0]);
                                                                if (j5array[0] > IKPI) {
                                                                  j5array[0] -= IK2PI;
                                                                } else if (j5array[0] < -IKPI) {
                                                                  j5array[0] += IK2PI;
                                                                }
                                                                j5valid[0] = true;
                                                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                  if (!j5valid[ij5]) {
                                                                    continue;
                                                                  }
                                                                  _ij5[0] = ij5;
                                                                  _ij5[1] = -1;
                                                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                    if (j5valid[iij5] &&
                                                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j5valid[iij5] = false;
                                                                      _ij5[1] = iij5;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j5 = j5array[ij5];
                                                                  cj5 = cj5array[ij5];
                                                                  sj5 = sj5array[ij5];
                                                                  {
                                                                    IkReal evalcond[6];
                                                                    IkReal x482 = IKsin(j5);
                                                                    IkReal x483 = IKcos(j5);
                                                                    IkReal x484 = ((-1.0) * x483);
                                                                    evalcond[0] = x482;
                                                                    evalcond[1] = (new_r22 * x482);
                                                                    evalcond[2] = x484;
                                                                    evalcond[3] = (new_r22 * x484);
                                                                    evalcond[4] =
                                                                        ((((-1.0) * x482)) + (((-1.0) * new_r00)));
                                                                    evalcond[5] =
                                                                        ((((-1.0) * x483)) + (((-1.0) * new_r01)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH) {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(6);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement) {
                                                            bool bgotonextstatement = true;
                                                            do {
                                                              if (1) {
                                                                bgotonextstatement = false;
                                                                continue;  // branch miss [j5]
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement) {
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }

                                              } else {
                                                {
                                                  IkReal j5array[1], cj5array[1], sj5array[1];
                                                  bool j5valid[1] = {false};
                                                  _nj5 = 1;
                                                  CheckValue<IkReal> x485 = IKPowWithIntegerCheck(sj4, -1);
                                                  if (!x485.valid) {
                                                    continue;
                                                  }
                                                  if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(((-1.0) * new_r20 * (x485.value))) <
                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(IKsqr(((-1.0) * new_r00)) +
                                                            IKsqr(((-1.0) * new_r20 * (x485.value))) - 1) <=
                                                          IKFAST_SINCOS_THRESH)
                                                    continue;
                                                  j5array[0] =
                                                      IKatan2(((-1.0) * new_r00), ((-1.0) * new_r20 * (x485.value)));
                                                  sj5array[0] = IKsin(j5array[0]);
                                                  cj5array[0] = IKcos(j5array[0]);
                                                  if (j5array[0] > IKPI) {
                                                    j5array[0] -= IK2PI;
                                                  } else if (j5array[0] < -IKPI) {
                                                    j5array[0] += IK2PI;
                                                  }
                                                  j5valid[0] = true;
                                                  for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                    if (!j5valid[ij5]) {
                                                      continue;
                                                    }
                                                    _ij5[0] = ij5;
                                                    _ij5[1] = -1;
                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                      if (j5valid[iij5] &&
                                                          IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j5valid[iij5] = false;
                                                        _ij5[1] = iij5;
                                                        break;
                                                      }
                                                    }
                                                    j5 = j5array[ij5];
                                                    cj5 = cj5array[ij5];
                                                    sj5 = sj5array[ij5];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x486 = IKsin(j5);
                                                      IkReal x487 = IKcos(j5);
                                                      IkReal x488 = ((1.0) * sj4);
                                                      IkReal x489 = ((1.0) * x487);
                                                      IkReal x490 = ((1.0) * x486);
                                                      evalcond[0] = (((sj4 * x487)) + new_r20);
                                                      evalcond[1] = (((cj4 * x486)) + new_r11);
                                                      evalcond[2] = ((((-1.0) * x486 * x488)) + new_r21);
                                                      evalcond[3] = (new_r10 + (((-1.0) * cj4 * x489)));
                                                      evalcond[4] = ((((-1.0) * x490)) + (((-1.0) * new_r00)));
                                                      evalcond[5] = ((((-1.0) * x489)) + (((-1.0) * new_r01)));
                                                      evalcond[6] =
                                                          ((((-1.0) * new_r21 * x488)) + ((cj4 * new_r11)) + x486);
                                                      evalcond[7] = ((((-1.0) * x489)) + ((cj4 * new_r10)) +
                                                                     (((-1.0) * new_r20 * x488)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 1;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 1;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 1;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            }

                                          } else {
                                            {
                                              IkReal j5array[1], cj5array[1], sj5array[1];
                                              bool j5valid[1] = {false};
                                              _nj5 = 1;
                                              CheckValue<IkReal> x491 = IKPowWithIntegerCheck(IKsign(cj4), -1);
                                              if (!x491.valid) {
                                                continue;
                                              }
                                              CheckValue<IkReal> x492 = IKatan2WithCheck(
                                                  IkReal(((-1.0) * new_r11)), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                              if (!x492.valid) {
                                                continue;
                                              }
                                              j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x491.value))) +
                                                            (x492.value));
                                              sj5array[0] = IKsin(j5array[0]);
                                              cj5array[0] = IKcos(j5array[0]);
                                              if (j5array[0] > IKPI) {
                                                j5array[0] -= IK2PI;
                                              } else if (j5array[0] < -IKPI) {
                                                j5array[0] += IK2PI;
                                              }
                                              j5valid[0] = true;
                                              for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                if (!j5valid[ij5]) {
                                                  continue;
                                                }
                                                _ij5[0] = ij5;
                                                _ij5[1] = -1;
                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                  if (j5valid[iij5] &&
                                                      IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                                    j5valid[iij5] = false;
                                                    _ij5[1] = iij5;
                                                    break;
                                                  }
                                                }
                                                j5 = j5array[ij5];
                                                cj5 = cj5array[ij5];
                                                sj5 = sj5array[ij5];
                                                {
                                                  IkReal evalcond[8];
                                                  IkReal x493 = IKsin(j5);
                                                  IkReal x494 = IKcos(j5);
                                                  IkReal x495 = ((1.0) * sj4);
                                                  IkReal x496 = ((1.0) * x494);
                                                  IkReal x497 = ((1.0) * x493);
                                                  evalcond[0] = (((sj4 * x494)) + new_r20);
                                                  evalcond[1] = (((cj4 * x493)) + new_r11);
                                                  evalcond[2] = ((((-1.0) * x493 * x495)) + new_r21);
                                                  evalcond[3] = ((((-1.0) * cj4 * x496)) + new_r10);
                                                  evalcond[4] = ((((-1.0) * x497)) + (((-1.0) * new_r00)));
                                                  evalcond[5] = ((((-1.0) * x496)) + (((-1.0) * new_r01)));
                                                  evalcond[6] =
                                                      (((cj4 * new_r11)) + (((-1.0) * new_r21 * x495)) + x493);
                                                  evalcond[7] = ((((-1.0) * new_r20 * x495)) + (((-1.0) * x496)) +
                                                                 ((cj4 * new_r10)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                  vinfos[0].jointtype = 1;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] = _ij0[0];
                                                  vinfos[0].indices[1] = _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 1;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] = _ij1[0];
                                                  vinfos[1].indices[1] = _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 1;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] = _ij2[0];
                                                  vinfos[2].indices[1] = _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 1;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] = _ij3[0];
                                                  vinfos[3].indices[1] = _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] = _ij4[0];
                                                  vinfos[4].indices[1] = _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] = _ij5[0];
                                                  vinfos[5].indices[1] = _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        }

                                      } else {
                                        {
                                          IkReal j5array[1], cj5array[1], sj5array[1];
                                          bool j5valid[1] = {false};
                                          _nj5 = 1;
                                          CheckValue<IkReal> x498 = IKPowWithIntegerCheck(IKsign(sj4), -1);
                                          if (!x498.valid) {
                                            continue;
                                          }
                                          CheckValue<IkReal> x499 = IKatan2WithCheck(
                                              IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                          if (!x499.valid) {
                                            continue;
                                          }
                                          j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x498.value))) +
                                                        (x499.value));
                                          sj5array[0] = IKsin(j5array[0]);
                                          cj5array[0] = IKcos(j5array[0]);
                                          if (j5array[0] > IKPI) {
                                            j5array[0] -= IK2PI;
                                          } else if (j5array[0] < -IKPI) {
                                            j5array[0] += IK2PI;
                                          }
                                          j5valid[0] = true;
                                          for (int ij5 = 0; ij5 < 1; ++ij5) {
                                            if (!j5valid[ij5]) {
                                              continue;
                                            }
                                            _ij5[0] = ij5;
                                            _ij5[1] = -1;
                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                              if (j5valid[iij5] &&
                                                  IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                                j5valid[iij5] = false;
                                                _ij5[1] = iij5;
                                                break;
                                              }
                                            }
                                            j5 = j5array[ij5];
                                            cj5 = cj5array[ij5];
                                            sj5 = sj5array[ij5];
                                            {
                                              IkReal evalcond[8];
                                              IkReal x500 = IKsin(j5);
                                              IkReal x501 = IKcos(j5);
                                              IkReal x502 = ((1.0) * sj4);
                                              IkReal x503 = ((1.0) * x501);
                                              IkReal x504 = ((1.0) * x500);
                                              evalcond[0] = (((sj4 * x501)) + new_r20);
                                              evalcond[1] = (((cj4 * x500)) + new_r11);
                                              evalcond[2] = (new_r21 + (((-1.0) * x500 * x502)));
                                              evalcond[3] = ((((-1.0) * cj4 * x503)) + new_r10);
                                              evalcond[4] = ((((-1.0) * x504)) + (((-1.0) * new_r00)));
                                              evalcond[5] = ((((-1.0) * x503)) + (((-1.0) * new_r01)));
                                              evalcond[6] = ((((-1.0) * new_r21 * x502)) + ((cj4 * new_r11)) + x500);
                                              evalcond[7] =
                                                  (((cj4 * new_r10)) + (((-1.0) * new_r20 * x502)) + (((-1.0) * x503)));
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                              vinfos[0].jointtype = 1;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 1;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 1;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 1;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                } while (0);
                                if (bgotonextstatement) {
                                  bool bgotonextstatement = true;
                                  do {
                                    evalcond[0] = ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j3)))),
                                                           6.28318530717959)));
                                    evalcond[1] = new_r02;
                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                        IKabs(evalcond[1]) < 0.0000050000000000) {
                                      bgotonextstatement = false;
                                      {
                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1] = {false};
                                        _nj5 = 1;
                                        if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <= IKFAST_SINCOS_THRESH)
                                          continue;
                                        j5array[0] = IKatan2(new_r00, new_r01);
                                        sj5array[0] = IKsin(j5array[0]);
                                        cj5array[0] = IKcos(j5array[0]);
                                        if (j5array[0] > IKPI) {
                                          j5array[0] -= IK2PI;
                                        } else if (j5array[0] < -IKPI) {
                                          j5array[0] += IK2PI;
                                        }
                                        j5valid[0] = true;
                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                          if (!j5valid[ij5]) {
                                            continue;
                                          }
                                          _ij5[0] = ij5;
                                          _ij5[1] = -1;
                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                            if (j5valid[iij5] &&
                                                IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                              j5valid[iij5] = false;
                                              _ij5[1] = iij5;
                                              break;
                                            }
                                          }
                                          j5 = j5array[ij5];
                                          cj5 = cj5array[ij5];
                                          sj5 = sj5array[ij5];
                                          {
                                            IkReal evalcond[8];
                                            IkReal x505 = IKcos(j5);
                                            IkReal x506 = IKsin(j5);
                                            IkReal x507 = ((1.0) * cj4);
                                            IkReal x508 = ((1.0) * sj4);
                                            IkReal x509 = ((1.0) * x505);
                                            IkReal x510 = ((1.0) * x506);
                                            evalcond[0] = (((sj4 * x505)) + new_r20);
                                            evalcond[1] = (new_r00 + (((-1.0) * x510)));
                                            evalcond[2] = ((((-1.0) * x509)) + new_r01);
                                            evalcond[3] = ((((-1.0) * x506 * x508)) + new_r21);
                                            evalcond[4] = (((cj4 * x506)) + (((-1.0) * new_r11)));
                                            evalcond[5] = ((((-1.0) * x505 * x507)) + (((-1.0) * new_r10)));
                                            evalcond[6] =
                                                ((((-1.0) * new_r21 * x508)) + (((-1.0) * new_r11 * x507)) + x506);
                                            evalcond[7] = ((((-1.0) * new_r20 * x508)) + (((-1.0) * x509)) +
                                                           (((-1.0) * new_r10 * x507)));
                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                            vinfos[0].jointtype = 1;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 1;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 1;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 1;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos, vfree);
                                          }
                                        }
                                      }
                                    }
                                  } while (0);
                                  if (bgotonextstatement) {
                                    bool bgotonextstatement = true;
                                    do {
                                      evalcond[0] = ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j4)))),
                                                             6.28318530717959)));
                                      evalcond[1] = new_r22;
                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                          IKabs(evalcond[1]) < 0.0000050000000000) {
                                        bgotonextstatement = false;
                                        {
                                          IkReal j5array[1], cj5array[1], sj5array[1];
                                          bool j5valid[1] = {false};
                                          _nj5 = 1;
                                          if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <=
                                                  IKFAST_SINCOS_THRESH)
                                            continue;
                                          j5array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                          sj5array[0] = IKsin(j5array[0]);
                                          cj5array[0] = IKcos(j5array[0]);
                                          if (j5array[0] > IKPI) {
                                            j5array[0] -= IK2PI;
                                          } else if (j5array[0] < -IKPI) {
                                            j5array[0] += IK2PI;
                                          }
                                          j5valid[0] = true;
                                          for (int ij5 = 0; ij5 < 1; ++ij5) {
                                            if (!j5valid[ij5]) {
                                              continue;
                                            }
                                            _ij5[0] = ij5;
                                            _ij5[1] = -1;
                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                              if (j5valid[iij5] &&
                                                  IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                                j5valid[iij5] = false;
                                                _ij5[1] = iij5;
                                                break;
                                              }
                                            }
                                            j5 = j5array[ij5];
                                            cj5 = cj5array[ij5];
                                            sj5 = sj5array[ij5];
                                            {
                                              IkReal evalcond[8];
                                              IkReal x511 = IKcos(j5);
                                              IkReal x512 = IKsin(j5);
                                              IkReal x513 = ((1.0) * sj3);
                                              IkReal x514 = ((1.0) * x512);
                                              IkReal x515 = ((1.0) * x511);
                                              evalcond[0] = (x511 + new_r20);
                                              evalcond[1] = (new_r21 + (((-1.0) * x514)));
                                              evalcond[2] = (((sj3 * x511)) + new_r01);
                                              evalcond[3] = (((sj3 * x512)) + new_r00);
                                              evalcond[4] = ((((-1.0) * cj3 * x515)) + new_r11);
                                              evalcond[5] = ((((-1.0) * new_r02 * x514)) + new_r10);
                                              evalcond[6] =
                                                  (((cj3 * new_r10)) + (((-1.0) * new_r00 * x513)) + (((-1.0) * x514)));
                                              evalcond[7] =
                                                  ((((-1.0) * new_r01 * x513)) + ((cj3 * new_r11)) + (((-1.0) * x515)));
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                              vinfos[0].jointtype = 1;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 1;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 1;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 1;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    } while (0);
                                    if (bgotonextstatement) {
                                      bool bgotonextstatement = true;
                                      do {
                                        evalcond[0] = ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j4)))),
                                                               6.28318530717959)));
                                        evalcond[1] = new_r22;
                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                            IKabs(evalcond[1]) < 0.0000050000000000) {
                                          bgotonextstatement = false;
                                          {
                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1] = {false};
                                            _nj5 = 1;
                                            if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <=
                                                    IKFAST_SINCOS_THRESH)
                                              continue;
                                            j5array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                            sj5array[0] = IKsin(j5array[0]);
                                            cj5array[0] = IKcos(j5array[0]);
                                            if (j5array[0] > IKPI) {
                                              j5array[0] -= IK2PI;
                                            } else if (j5array[0] < -IKPI) {
                                              j5array[0] += IK2PI;
                                            }
                                            j5valid[0] = true;
                                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                                              if (!j5valid[ij5]) {
                                                continue;
                                              }
                                              _ij5[0] = ij5;
                                              _ij5[1] = -1;
                                              for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                if (j5valid[iij5] &&
                                                    IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                                  j5valid[iij5] = false;
                                                  _ij5[1] = iij5;
                                                  break;
                                                }
                                              }
                                              j5 = j5array[ij5];
                                              cj5 = cj5array[ij5];
                                              sj5 = sj5array[ij5];
                                              {
                                                IkReal evalcond[8];
                                                IkReal x516 = IKcos(j5);
                                                IkReal x517 = IKsin(j5);
                                                IkReal x518 = ((1.0) * sj3);
                                                IkReal x519 = ((1.0) * x516);
                                                evalcond[0] = (x517 + new_r21);
                                                evalcond[1] = (new_r20 + (((-1.0) * x519)));
                                                evalcond[2] = (((sj3 * x516)) + new_r01);
                                                evalcond[3] = (((sj3 * x517)) + new_r00);
                                                evalcond[4] = (((new_r02 * x517)) + new_r10);
                                                evalcond[5] = ((((-1.0) * cj3 * x519)) + new_r11);
                                                evalcond[6] = ((((-1.0) * x517)) + ((cj3 * new_r10)) +
                                                               (((-1.0) * new_r00 * x518)));
                                                evalcond[7] = ((((-1.0) * new_r01 * x518)) + ((cj3 * new_r11)) +
                                                               (((-1.0) * x519)));
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                vinfos[0].jointtype = 1;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 1;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 1;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 1;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      } while (0);
                                      if (bgotonextstatement) {
                                        bool bgotonextstatement = true;
                                        do {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                                          evalcond[1] = new_r20;
                                          evalcond[2] = new_r02;
                                          evalcond[3] = new_r12;
                                          evalcond[4] = new_r21;
                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                              IKabs(evalcond[1]) < 0.0000050000000000 &&
                                              IKabs(evalcond[2]) < 0.0000050000000000 &&
                                              IKabs(evalcond[3]) < 0.0000050000000000 &&
                                              IKabs(evalcond[4]) < 0.0000050000000000) {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j5array[1], cj5array[1], sj5array[1];
                                              bool j5valid[1] = {false};
                                              _nj5 = 1;
                                              IkReal x520 = ((1.0) * new_r01);
                                              if (IKabs(((((-1.0) * cj3 * x520)) + (((-1.0) * new_r00 * sj3)))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(((((-1.0) * sj3 * x520)) + ((cj3 * new_r00)))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(IKsqr(((((-1.0) * cj3 * x520)) + (((-1.0) * new_r00 * sj3)))) +
                                                        IKsqr(((((-1.0) * sj3 * x520)) + ((cj3 * new_r00)))) - 1) <=
                                                      IKFAST_SINCOS_THRESH)
                                                continue;
                                              j5array[0] =
                                                  IKatan2(((((-1.0) * cj3 * x520)) + (((-1.0) * new_r00 * sj3))),
                                                          ((((-1.0) * sj3 * x520)) + ((cj3 * new_r00))));
                                              sj5array[0] = IKsin(j5array[0]);
                                              cj5array[0] = IKcos(j5array[0]);
                                              if (j5array[0] > IKPI) {
                                                j5array[0] -= IK2PI;
                                              } else if (j5array[0] < -IKPI) {
                                                j5array[0] += IK2PI;
                                              }
                                              j5valid[0] = true;
                                              for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                if (!j5valid[ij5]) {
                                                  continue;
                                                }
                                                _ij5[0] = ij5;
                                                _ij5[1] = -1;
                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                  if (j5valid[iij5] &&
                                                      IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                                    j5valid[iij5] = false;
                                                    _ij5[1] = iij5;
                                                    break;
                                                  }
                                                }
                                                j5 = j5array[ij5];
                                                cj5 = cj5array[ij5];
                                                sj5 = sj5array[ij5];
                                                {
                                                  IkReal evalcond[8];
                                                  IkReal x521 = IKsin(j5);
                                                  IkReal x522 = IKcos(j5);
                                                  IkReal x523 = ((1.0) * sj3);
                                                  IkReal x524 = ((1.0) * x522);
                                                  IkReal x525 = (sj3 * x521);
                                                  IkReal x526 = ((1.0) * x521);
                                                  IkReal x527 = (cj3 * x524);
                                                  evalcond[0] = (((new_r11 * sj3)) + x521 + ((cj3 * new_r01)));
                                                  evalcond[1] = (((sj3 * x522)) + new_r01 + ((cj3 * x521)));
                                                  evalcond[2] =
                                                      (((new_r10 * sj3)) + (((-1.0) * x524)) + ((cj3 * new_r00)));
                                                  evalcond[3] = ((((-1.0) * new_r00 * x523)) + (((-1.0) * x526)) +
                                                                 ((cj3 * new_r10)));
                                                  evalcond[4] = ((((-1.0) * x524)) + (((-1.0) * new_r01 * x523)) +
                                                                 ((cj3 * new_r11)));
                                                  evalcond[5] = ((((-1.0) * x527)) + x525 + new_r00);
                                                  evalcond[6] = ((((-1.0) * x527)) + x525 + new_r11);
                                                  evalcond[7] =
                                                      ((((-1.0) * cj3 * x526)) + (((-1.0) * x522 * x523)) + new_r10);
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                  vinfos[0].jointtype = 1;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] = _ij0[0];
                                                  vinfos[0].indices[1] = _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 1;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] = _ij1[0];
                                                  vinfos[1].indices[1] = _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 1;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] = _ij2[0];
                                                  vinfos[2].indices[1] = _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 1;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] = _ij3[0];
                                                  vinfos[3].indices[1] = _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] = _ij4[0];
                                                  vinfos[4].indices[1] = _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] = _ij5[0];
                                                  vinfos[5].indices[1] = _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement) {
                                          bool bgotonextstatement = true;
                                          do {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j4)))),
                                                         6.28318530717959)));
                                            evalcond[1] = new_r20;
                                            evalcond[2] = new_r02;
                                            evalcond[3] = new_r12;
                                            evalcond[4] = new_r21;
                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                IKabs(evalcond[3]) < 0.0000050000000000 &&
                                                IKabs(evalcond[4]) < 0.0000050000000000) {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1] = {false};
                                                _nj5 = 1;
                                                IkReal x528 = ((1.0) * sj3);
                                                if (IKabs(((((-1.0) * new_r00 * x528)) + ((cj3 * new_r01)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(((((-1.0) * new_r01 * x528)) + (((-1.0) * cj3 * new_r00)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(((((-1.0) * new_r00 * x528)) + ((cj3 * new_r01)))) +
                                                          IKsqr(((((-1.0) * new_r01 * x528)) +
                                                                 (((-1.0) * cj3 * new_r00)))) -
                                                          1) <= IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j5array[0] =
                                                    IKatan2(((((-1.0) * new_r00 * x528)) + ((cj3 * new_r01))),
                                                            ((((-1.0) * new_r01 * x528)) + (((-1.0) * cj3 * new_r00))));
                                                sj5array[0] = IKsin(j5array[0]);
                                                cj5array[0] = IKcos(j5array[0]);
                                                if (j5array[0] > IKPI) {
                                                  j5array[0] -= IK2PI;
                                                } else if (j5array[0] < -IKPI) {
                                                  j5array[0] += IK2PI;
                                                }
                                                j5valid[0] = true;
                                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                  if (!j5valid[ij5]) {
                                                    continue;
                                                  }
                                                  _ij5[0] = ij5;
                                                  _ij5[1] = -1;
                                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                    if (j5valid[iij5] &&
                                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                            IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                            IKFAST_SOLUTION_THRESH) {
                                                      j5valid[iij5] = false;
                                                      _ij5[1] = iij5;
                                                      break;
                                                    }
                                                  }
                                                  j5 = j5array[ij5];
                                                  cj5 = cj5array[ij5];
                                                  sj5 = sj5array[ij5];
                                                  {
                                                    IkReal evalcond[8];
                                                    IkReal x529 = IKsin(j5);
                                                    IkReal x530 = IKcos(j5);
                                                    IkReal x531 = ((1.0) * sj3);
                                                    IkReal x532 = ((1.0) * x529);
                                                    IkReal x533 = (sj3 * x530);
                                                    IkReal x534 = ((1.0) * x530);
                                                    IkReal x535 = (cj3 * x532);
                                                    evalcond[0] = (((new_r10 * sj3)) + x530 + ((cj3 * new_r00)));
                                                    evalcond[1] =
                                                        (((new_r11 * sj3)) + (((-1.0) * x532)) + ((cj3 * new_r01)));
                                                    evalcond[2] = (((sj3 * x529)) + new_r00 + ((cj3 * x530)));
                                                    evalcond[3] = ((((-1.0) * new_r00 * x531)) + (((-1.0) * x532)) +
                                                                   ((cj3 * new_r10)));
                                                    evalcond[4] = ((((-1.0) * x534)) + (((-1.0) * new_r01 * x531)) +
                                                                   ((cj3 * new_r11)));
                                                    evalcond[5] = ((((-1.0) * x535)) + x533 + new_r01);
                                                    evalcond[6] = ((((-1.0) * x535)) + x533 + new_r10);
                                                    evalcond[7] =
                                                        ((((-1.0) * cj3 * x534)) + (((-1.0) * x529 * x531)) + new_r11);
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                    vinfos[0].jointtype = 1;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 1;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 1;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 1;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement) {
                                            bool bgotonextstatement = true;
                                            do {
                                              evalcond[0] =
                                                  ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(j3))), 6.28318530717959)));
                                              evalcond[1] = new_r12;
                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                  IKabs(evalcond[1]) < 0.0000050000000000) {
                                                bgotonextstatement = false;
                                                {
                                                  IkReal j5array[1], cj5array[1], sj5array[1];
                                                  bool j5valid[1] = {false};
                                                  _nj5 = 1;
                                                  if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <=
                                                          IKFAST_SINCOS_THRESH)
                                                    continue;
                                                  j5array[0] = IKatan2(new_r10, new_r11);
                                                  sj5array[0] = IKsin(j5array[0]);
                                                  cj5array[0] = IKcos(j5array[0]);
                                                  if (j5array[0] > IKPI) {
                                                    j5array[0] -= IK2PI;
                                                  } else if (j5array[0] < -IKPI) {
                                                    j5array[0] += IK2PI;
                                                  }
                                                  j5valid[0] = true;
                                                  for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                    if (!j5valid[ij5]) {
                                                      continue;
                                                    }
                                                    _ij5[0] = ij5;
                                                    _ij5[1] = -1;
                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                      if (j5valid[iij5] &&
                                                          IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j5valid[iij5] = false;
                                                        _ij5[1] = iij5;
                                                        break;
                                                      }
                                                    }
                                                    j5 = j5array[ij5];
                                                    cj5 = cj5array[ij5];
                                                    sj5 = sj5array[ij5];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x536 = IKcos(j5);
                                                      IkReal x537 = IKsin(j5);
                                                      IkReal x538 = ((1.0) * sj4);
                                                      IkReal x539 = ((1.0) * x536);
                                                      IkReal x540 = ((1.0) * x537);
                                                      evalcond[0] = (((new_r02 * x536)) + new_r20);
                                                      evalcond[1] = ((((-1.0) * x540)) + new_r10);
                                                      evalcond[2] = ((((-1.0) * x539)) + new_r11);
                                                      evalcond[3] = (((cj4 * x537)) + new_r01);
                                                      evalcond[4] = (new_r21 + (((-1.0) * new_r02 * x540)));
                                                      evalcond[5] = (new_r00 + (((-1.0) * cj4 * x539)));
                                                      evalcond[6] =
                                                          (((cj4 * new_r01)) + (((-1.0) * new_r21 * x538)) + x537);
                                                      evalcond[7] = (((cj4 * new_r00)) + (((-1.0) * x539)) +
                                                                     (((-1.0) * new_r20 * x538)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 1;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 1;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 1;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            } while (0);
                                            if (bgotonextstatement) {
                                              bool bgotonextstatement = true;
                                              do {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j3)))),
                                                             6.28318530717959)));
                                                evalcond[1] = new_r12;
                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                    IKabs(evalcond[1]) < 0.0000050000000000) {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j5eval[3];
                                                    sj3 = 0;
                                                    cj3 = -1.0;
                                                    j3 = 3.14159265358979;
                                                    j5eval[0] = new_r02;
                                                    j5eval[1] = IKsign(new_r02);
                                                    j5eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                    if (IKabs(j5eval[0]) < 0.0000010000000000 ||
                                                        IKabs(j5eval[1]) < 0.0000010000000000 ||
                                                        IKabs(j5eval[2]) < 0.0000010000000000) {
                                                      {
                                                        IkReal j5eval[1];
                                                        sj3 = 0;
                                                        cj3 = -1.0;
                                                        j3 = 3.14159265358979;
                                                        j5eval[0] = new_r02;
                                                        if (IKabs(j5eval[0]) < 0.0000010000000000) {
                                                          {
                                                            IkReal j5eval[2];
                                                            sj3 = 0;
                                                            cj3 = -1.0;
                                                            j3 = 3.14159265358979;
                                                            j5eval[0] = new_r02;
                                                            j5eval[1] = cj4;
                                                            if (IKabs(j5eval[0]) < 0.0000010000000000 ||
                                                                IKabs(j5eval[1]) < 0.0000010000000000) {
                                                              {
                                                                IkReal evalcond[4];
                                                                bool bgotonextstatement = true;
                                                                do {
                                                                  evalcond[0] =
                                                                      ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((-1.5707963267949) + j4)))),
                                                                               6.28318530717959)));
                                                                  evalcond[1] = new_r22;
                                                                  evalcond[2] = new_r01;
                                                                  evalcond[3] = new_r00;
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j5array[1], cj5array[1], sj5array[1];
                                                                      bool j5valid[1] = {false};
                                                                      _nj5 = 1;
                                                                      if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(((-1.0) * new_r20)) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr(new_r21) +
                                                                                IKsqr(((-1.0) * new_r20)) - 1) <=
                                                                              IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j5array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                      sj5array[0] = IKsin(j5array[0]);
                                                                      cj5array[0] = IKcos(j5array[0]);
                                                                      if (j5array[0] > IKPI) {
                                                                        j5array[0] -= IK2PI;
                                                                      } else if (j5array[0] < -IKPI) {
                                                                        j5array[0] += IK2PI;
                                                                      }
                                                                      j5valid[0] = true;
                                                                      for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                        if (!j5valid[ij5]) {
                                                                          continue;
                                                                        }
                                                                        _ij5[0] = ij5;
                                                                        _ij5[1] = -1;
                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                          if (j5valid[iij5] &&
                                                                              IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                                  IKFAST_SOLUTION_THRESH) {
                                                                            j5valid[iij5] = false;
                                                                            _ij5[1] = iij5;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j5 = j5array[ij5];
                                                                        cj5 = cj5array[ij5];
                                                                        sj5 = sj5array[ij5];
                                                                        {
                                                                          IkReal evalcond[4];
                                                                          IkReal x541 = IKcos(j5);
                                                                          IkReal x542 = ((1.0) * (IKsin(j5)));
                                                                          evalcond[0] = (x541 + new_r20);
                                                                          evalcond[1] = ((((-1.0) * x542)) + new_r21);
                                                                          evalcond[2] = ((((-1.0) * x542)) +
                                                                                         (((-1.0) * new_r10)));
                                                                          evalcond[3] = ((((-1.0) * x541)) +
                                                                                         (((-1.0) * new_r11)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH) {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(6);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 1;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 1;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 1;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement) {
                                                                  bool bgotonextstatement = true;
                                                                  do {
                                                                    evalcond[0] =
                                                                        ((-3.14159265358979) +
                                                                         (IKfmod(((3.14159265358979) +
                                                                                  (IKabs(((1.5707963267949) + j4)))),
                                                                                 6.28318530717959)));
                                                                    evalcond[1] = new_r22;
                                                                    evalcond[2] = new_r01;
                                                                    evalcond[3] = new_r00;
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                        bool j5valid[1] = {false};
                                                                        _nj5 = 1;
                                                                        if (IKabs(((-1.0) * new_r21)) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(IKsqr(((-1.0) * new_r21)) +
                                                                                  IKsqr(new_r20) - 1) <=
                                                                                IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j5array[0] =
                                                                            IKatan2(((-1.0) * new_r21), new_r20);
                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                        if (j5array[0] > IKPI) {
                                                                          j5array[0] -= IK2PI;
                                                                        } else if (j5array[0] < -IKPI) {
                                                                          j5array[0] += IK2PI;
                                                                        }
                                                                        j5valid[0] = true;
                                                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                          if (!j5valid[ij5]) {
                                                                            continue;
                                                                          }
                                                                          _ij5[0] = ij5;
                                                                          _ij5[1] = -1;
                                                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                            if (j5valid[iij5] &&
                                                                                IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                                    IKFAST_SOLUTION_THRESH) {
                                                                              j5valid[iij5] = false;
                                                                              _ij5[1] = iij5;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j5 = j5array[ij5];
                                                                          cj5 = cj5array[ij5];
                                                                          sj5 = sj5array[ij5];
                                                                          {
                                                                            IkReal evalcond[4];
                                                                            IkReal x543 = IKsin(j5);
                                                                            IkReal x544 = ((1.0) * (IKcos(j5)));
                                                                            evalcond[0] = (x543 + new_r21);
                                                                            evalcond[1] = ((((-1.0) * x544)) + new_r20);
                                                                            evalcond[2] = ((((-1.0) * x543)) +
                                                                                           (((-1.0) * new_r10)));
                                                                            evalcond[3] = ((((-1.0) * x544)) +
                                                                                           (((-1.0) * new_r11)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH) {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<
                                                                                IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(6);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement) {
                                                                    bool bgotonextstatement = true;
                                                                    do {
                                                                      evalcond[0] = IKabs(new_r02);
                                                                      evalcond[1] = new_r20;
                                                                      evalcond[2] = new_r21;
                                                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[2]) < 0.0000050000000000) {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                          IkReal j5array[1], cj5array[1], sj5array[1];
                                                                          bool j5valid[1] = {false};
                                                                          _nj5 = 1;
                                                                          if (IKabs((cj4 * new_r01)) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(((-1.0) * new_r11)) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(IKsqr((cj4 * new_r01)) +
                                                                                    IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                                  IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                          j5array[0] = IKatan2((cj4 * new_r01),
                                                                                               ((-1.0) * new_r11));
                                                                          sj5array[0] = IKsin(j5array[0]);
                                                                          cj5array[0] = IKcos(j5array[0]);
                                                                          if (j5array[0] > IKPI) {
                                                                            j5array[0] -= IK2PI;
                                                                          } else if (j5array[0] < -IKPI) {
                                                                            j5array[0] += IK2PI;
                                                                          }
                                                                          j5valid[0] = true;
                                                                          for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                            if (!j5valid[ij5]) {
                                                                              continue;
                                                                            }
                                                                            _ij5[0] = ij5;
                                                                            _ij5[1] = -1;
                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                              if (j5valid[iij5] &&
                                                                                  IKabs(cj5array[ij5] -
                                                                                        cj5array[iij5]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj5array[ij5] -
                                                                                        sj5array[iij5]) <
                                                                                      IKFAST_SOLUTION_THRESH) {
                                                                                j5valid[iij5] = false;
                                                                                _ij5[1] = iij5;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j5 = j5array[ij5];
                                                                            cj5 = cj5array[ij5];
                                                                            sj5 = sj5array[ij5];
                                                                            {
                                                                              IkReal evalcond[6];
                                                                              IkReal x545 = IKsin(j5);
                                                                              IkReal x546 = IKcos(j5);
                                                                              IkReal x547 = ((1.0) * new_r00);
                                                                              IkReal x548 = ((1.0) * new_r01);
                                                                              IkReal x549 = ((1.0) * x546);
                                                                              evalcond[0] =
                                                                                  (x545 + (((-1.0) * cj4 * x548)));
                                                                              evalcond[1] = ((((-1.0) * x545)) +
                                                                                             (((-1.0) * new_r10)));
                                                                              evalcond[2] = ((((-1.0) * x549)) +
                                                                                             (((-1.0) * new_r11)));
                                                                              evalcond[3] =
                                                                                  (((cj4 * x545)) + (((-1.0) * x548)));
                                                                              evalcond[4] = ((((-1.0) * x547)) +
                                                                                             (((-1.0) * cj4 * x549)));
                                                                              evalcond[5] = ((((-1.0) * x549)) +
                                                                                             (((-1.0) * cj4 * x547)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH) {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<
                                                                                  IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(6);
                                                                              vinfos[0].jointtype = 1;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 1;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 1;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 1;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement) {
                                                                      bool bgotonextstatement = true;
                                                                      do {
                                                                        evalcond[0] =
                                                                            ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                          bgotonextstatement = false;
                                                                          {
                                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                                            bool j5valid[1] = {false};
                                                                            _nj5 = 1;
                                                                            if (IKabs(((-1.0) * new_r10)) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(((-1.0) * new_r11)) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                                      IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                                    IKFAST_SINCOS_THRESH)
                                                                              continue;
                                                                            j5array[0] = IKatan2(((-1.0) * new_r10),
                                                                                                 ((-1.0) * new_r11));
                                                                            sj5array[0] = IKsin(j5array[0]);
                                                                            cj5array[0] = IKcos(j5array[0]);
                                                                            if (j5array[0] > IKPI) {
                                                                              j5array[0] -= IK2PI;
                                                                            } else if (j5array[0] < -IKPI) {
                                                                              j5array[0] += IK2PI;
                                                                            }
                                                                            j5valid[0] = true;
                                                                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                              if (!j5valid[ij5]) {
                                                                                continue;
                                                                              }
                                                                              _ij5[0] = ij5;
                                                                              _ij5[1] = -1;
                                                                              for (int iij5 = ij5 + 1; iij5 < 1;
                                                                                   ++iij5) {
                                                                                if (j5valid[iij5] &&
                                                                                    IKabs(cj5array[ij5] -
                                                                                          cj5array[iij5]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj5array[ij5] -
                                                                                          sj5array[iij5]) <
                                                                                        IKFAST_SOLUTION_THRESH) {
                                                                                  j5valid[iij5] = false;
                                                                                  _ij5[1] = iij5;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j5 = j5array[ij5];
                                                                              cj5 = cj5array[ij5];
                                                                              sj5 = sj5array[ij5];
                                                                              {
                                                                                IkReal evalcond[6];
                                                                                IkReal x550 = IKsin(j5);
                                                                                IkReal x551 = IKcos(j5);
                                                                                IkReal x552 = ((-1.0) * x551);
                                                                                evalcond[0] = x550;
                                                                                evalcond[1] = (new_r22 * x550);
                                                                                evalcond[2] = x552;
                                                                                evalcond[3] = (new_r22 * x552);
                                                                                evalcond[4] = ((((-1.0) * x550)) +
                                                                                               (((-1.0) * new_r10)));
                                                                                evalcond[5] = ((((-1.0) * x551)) +
                                                                                               (((-1.0) * new_r11)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH) {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(6);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 1;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 1;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 1;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      } while (0);
                                                                      if (bgotonextstatement) {
                                                                        bool bgotonextstatement = true;
                                                                        do {
                                                                          if (1) {
                                                                            bgotonextstatement = false;
                                                                            continue;  // branch miss [j5]
                                                                          }
                                                                        } while (0);
                                                                        if (bgotonextstatement) {
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }

                                                            } else {
                                                              {
                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                bool j5valid[1] = {false};
                                                                _nj5 = 1;
                                                                CheckValue<IkReal> x553 =
                                                                    IKPowWithIntegerCheck(new_r02, -1);
                                                                if (!x553.valid) {
                                                                  continue;
                                                                }
                                                                CheckValue<IkReal> x554 =
                                                                    IKPowWithIntegerCheck(cj4, -1);
                                                                if (!x554.valid) {
                                                                  continue;
                                                                }
                                                                if (IKabs(((-1.0) * new_r21 * (x553.value))) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(((-1.0) * new_r00 * (x554.value))) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((-1.0) * new_r21 * (x553.value))) +
                                                                          IKsqr(((-1.0) * new_r00 * (x554.value))) -
                                                                          1) <= IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j5array[0] = IKatan2(((-1.0) * new_r21 * (x553.value)),
                                                                                     ((-1.0) * new_r00 * (x554.value)));
                                                                sj5array[0] = IKsin(j5array[0]);
                                                                cj5array[0] = IKcos(j5array[0]);
                                                                if (j5array[0] > IKPI) {
                                                                  j5array[0] -= IK2PI;
                                                                } else if (j5array[0] < -IKPI) {
                                                                  j5array[0] += IK2PI;
                                                                }
                                                                j5valid[0] = true;
                                                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                                  if (!j5valid[ij5]) {
                                                                    continue;
                                                                  }
                                                                  _ij5[0] = ij5;
                                                                  _ij5[1] = -1;
                                                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                    if (j5valid[iij5] &&
                                                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j5valid[iij5] = false;
                                                                      _ij5[1] = iij5;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j5 = j5array[ij5];
                                                                  cj5 = cj5array[ij5];
                                                                  sj5 = sj5array[ij5];
                                                                  {
                                                                    IkReal evalcond[8];
                                                                    IkReal x555 = IKsin(j5);
                                                                    IkReal x556 = IKcos(j5);
                                                                    IkReal x557 = ((1.0) * new_r00);
                                                                    IkReal x558 = ((1.0) * new_r01);
                                                                    IkReal x559 = ((1.0) * sj4);
                                                                    IkReal x560 = ((1.0) * x556);
                                                                    evalcond[0] = (((new_r02 * x555)) + new_r21);
                                                                    evalcond[1] =
                                                                        ((((-1.0) * new_r02 * x560)) + new_r20);
                                                                    evalcond[2] =
                                                                        ((((-1.0) * x555)) + (((-1.0) * new_r10)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * new_r11)) + (((-1.0) * x560)));
                                                                    evalcond[4] = (((cj4 * x555)) + (((-1.0) * x558)));
                                                                    evalcond[5] =
                                                                        ((((-1.0) * cj4 * x560)) + (((-1.0) * x557)));
                                                                    evalcond[6] = ((((-1.0) * new_r21 * x559)) + x555 +
                                                                                   (((-1.0) * cj4 * x558)));
                                                                    evalcond[7] =
                                                                        ((((-1.0) * new_r20 * x559)) +
                                                                         (((-1.0) * x560)) + (((-1.0) * cj4 * x557)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(6);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }

                                                        } else {
                                                          {
                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                            bool j5valid[1] = {false};
                                                            _nj5 = 1;
                                                            CheckValue<IkReal> x561 =
                                                                IKPowWithIntegerCheck(new_r02, -1);
                                                            if (!x561.valid) {
                                                              continue;
                                                            }
                                                            if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs((new_r20 * (x561.value))) <
                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                      IKsqr((new_r20 * (x561.value))) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j5array[0] =
                                                                IKatan2(((-1.0) * new_r10), (new_r20 * (x561.value)));
                                                            sj5array[0] = IKsin(j5array[0]);
                                                            cj5array[0] = IKcos(j5array[0]);
                                                            if (j5array[0] > IKPI) {
                                                              j5array[0] -= IK2PI;
                                                            } else if (j5array[0] < -IKPI) {
                                                              j5array[0] += IK2PI;
                                                            }
                                                            j5valid[0] = true;
                                                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                              if (!j5valid[ij5]) {
                                                                continue;
                                                              }
                                                              _ij5[0] = ij5;
                                                              _ij5[1] = -1;
                                                              for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                                if (j5valid[iij5] &&
                                                                    IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                        IKFAST_SOLUTION_THRESH) {
                                                                  j5valid[iij5] = false;
                                                                  _ij5[1] = iij5;
                                                                  break;
                                                                }
                                                              }
                                                              j5 = j5array[ij5];
                                                              cj5 = cj5array[ij5];
                                                              sj5 = sj5array[ij5];
                                                              {
                                                                IkReal evalcond[8];
                                                                IkReal x562 = IKsin(j5);
                                                                IkReal x563 = IKcos(j5);
                                                                IkReal x564 = ((1.0) * new_r00);
                                                                IkReal x565 = ((1.0) * new_r01);
                                                                IkReal x566 = ((1.0) * sj4);
                                                                IkReal x567 = ((1.0) * x563);
                                                                evalcond[0] = (((new_r02 * x562)) + new_r21);
                                                                evalcond[1] = ((((-1.0) * new_r02 * x567)) + new_r20);
                                                                evalcond[2] =
                                                                    ((((-1.0) * x562)) + (((-1.0) * new_r10)));
                                                                evalcond[3] =
                                                                    ((((-1.0) * new_r11)) + (((-1.0) * x567)));
                                                                evalcond[4] = (((cj4 * x562)) + (((-1.0) * x565)));
                                                                evalcond[5] =
                                                                    ((((-1.0) * cj4 * x567)) + (((-1.0) * x564)));
                                                                evalcond[6] = ((((-1.0) * cj4 * x565)) + x562 +
                                                                               (((-1.0) * new_r21 * x566)));
                                                                evalcond[7] =
                                                                    ((((-1.0) * new_r20 * x566)) +
                                                                     (((-1.0) * cj4 * x564)) + (((-1.0) * x567)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 1;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }

                                                    } else {
                                                      {
                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                        bool j5valid[1] = {false};
                                                        _nj5 = 1;
                                                        CheckValue<IkReal> x568 =
                                                            IKatan2WithCheck(IkReal(((-1.0) * new_r21)),
                                                                             IkReal(new_r20), IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x568.valid) {
                                                          continue;
                                                        }
                                                        CheckValue<IkReal> x569 =
                                                            IKPowWithIntegerCheck(IKsign(new_r02), -1);
                                                        if (!x569.valid) {
                                                          continue;
                                                        }
                                                        j5array[0] = ((-1.5707963267949) + (x568.value) +
                                                                      (((1.5707963267949) * (x569.value))));
                                                        sj5array[0] = IKsin(j5array[0]);
                                                        cj5array[0] = IKcos(j5array[0]);
                                                        if (j5array[0] > IKPI) {
                                                          j5array[0] -= IK2PI;
                                                        } else if (j5array[0] < -IKPI) {
                                                          j5array[0] += IK2PI;
                                                        }
                                                        j5valid[0] = true;
                                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                                          if (!j5valid[ij5]) {
                                                            continue;
                                                          }
                                                          _ij5[0] = ij5;
                                                          _ij5[1] = -1;
                                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                                            if (j5valid[iij5] &&
                                                                IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j5valid[iij5] = false;
                                                              _ij5[1] = iij5;
                                                              break;
                                                            }
                                                          }
                                                          j5 = j5array[ij5];
                                                          cj5 = cj5array[ij5];
                                                          sj5 = sj5array[ij5];
                                                          {
                                                            IkReal evalcond[8];
                                                            IkReal x570 = IKsin(j5);
                                                            IkReal x571 = IKcos(j5);
                                                            IkReal x572 = ((1.0) * new_r00);
                                                            IkReal x573 = ((1.0) * new_r01);
                                                            IkReal x574 = ((1.0) * sj4);
                                                            IkReal x575 = ((1.0) * x571);
                                                            evalcond[0] = (new_r21 + ((new_r02 * x570)));
                                                            evalcond[1] = ((((-1.0) * new_r02 * x575)) + new_r20);
                                                            evalcond[2] = ((((-1.0) * x570)) + (((-1.0) * new_r10)));
                                                            evalcond[3] = ((((-1.0) * x575)) + (((-1.0) * new_r11)));
                                                            evalcond[4] = ((((-1.0) * x573)) + ((cj4 * x570)));
                                                            evalcond[5] = ((((-1.0) * cj4 * x575)) + (((-1.0) * x572)));
                                                            evalcond[6] = ((((-1.0) * cj4 * x573)) + x570 +
                                                                           (((-1.0) * new_r21 * x574)));
                                                            evalcond[7] = ((((-1.0) * cj4 * x572)) + (((-1.0) * x575)) +
                                                                           (((-1.0) * new_r20 * x574)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                              continue;
                                                            }
                                                          }

                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 1;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 1;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 1;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement) {
                                                bool bgotonextstatement = true;
                                                do {
                                                  evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j5eval[1];
                                                      new_r21 = 0;
                                                      new_r20 = 0;
                                                      new_r02 = 0;
                                                      new_r12 = 0;
                                                      j5eval[0] = 1.0;
                                                      if (IKabs(j5eval[0]) < 0.0000000100000000) {
                                                        continue;  // no branches [j5]

                                                      } else {
                                                        IkReal op[2 + 1], zeror[2];
                                                        int numroots;
                                                        op[0] = 1.0;
                                                        op[1] = 0;
                                                        op[2] = -1.0;
                                                        polyroots2(op, zeror, numroots);
                                                        IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
                                                        int numsolutions = 0;
                                                        for (int ij5 = 0; ij5 < numroots; ++ij5) {
                                                          IkReal htj5 = zeror[ij5];
                                                          tempj5array[0] = ((2.0) * (atan(htj5)));
                                                          for (int kj5 = 0; kj5 < 1; ++kj5) {
                                                            j5array[numsolutions] = tempj5array[kj5];
                                                            if (j5array[numsolutions] > IKPI) {
                                                              j5array[numsolutions] -= IK2PI;
                                                            } else if (j5array[numsolutions] < -IKPI) {
                                                              j5array[numsolutions] += IK2PI;
                                                            }
                                                            sj5array[numsolutions] = IKsin(j5array[numsolutions]);
                                                            cj5array[numsolutions] = IKcos(j5array[numsolutions]);
                                                            numsolutions++;
                                                          }
                                                        }
                                                        bool j5valid[2] = {true, true};
                                                        _nj5 = 2;
                                                        for (int ij5 = 0; ij5 < numsolutions; ++ij5) {
                                                          if (!j5valid[ij5]) {
                                                            continue;
                                                          }
                                                          j5 = j5array[ij5];
                                                          cj5 = cj5array[ij5];
                                                          sj5 = sj5array[ij5];
                                                          htj5 = IKtan(j5 / 2);

                                                          _ij5[0] = ij5;
                                                          _ij5[1] = -1;
                                                          for (int iij5 = ij5 + 1; iij5 < numsolutions; ++iij5) {
                                                            if (j5valid[iij5] &&
                                                                IKabs(cj5array[ij5] - cj5array[iij5]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj5array[ij5] - sj5array[iij5]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j5valid[iij5] = false;
                                                              _ij5[1] = iij5;
                                                              break;
                                                            }
                                                          }
                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 1;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 1;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 1;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement) {
                                                  bool bgotonextstatement = true;
                                                  do {
                                                    if (1) {
                                                      bgotonextstatement = false;
                                                      continue;  // branch miss [j5]
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }

                            } else {
                              {
                                IkReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1] = {false};
                                _nj5 = 1;
                                CheckValue<IkReal> x577 = IKPowWithIntegerCheck(sj4, -1);
                                if (!x577.valid) {
                                  continue;
                                }
                                IkReal x576 = x577.value;
                                CheckValue<IkReal> x578 = IKPowWithIntegerCheck(cj3, -1);
                                if (!x578.valid) {
                                  continue;
                                }
                                CheckValue<IkReal> x579 = IKPowWithIntegerCheck(cj4, -1);
                                if (!x579.valid) {
                                  continue;
                                }
                                if (IKabs((x576 * (x578.value) * (x579.value) *
                                           ((((new_r20 * sj3)) + (((-1.0) * new_r01 * sj4)))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(((-1.0) * new_r20 * x576)) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr((x576 * (x578.value) * (x579.value) *
                                                 ((((new_r20 * sj3)) + (((-1.0) * new_r01 * sj4)))))) +
                                          IKsqr(((-1.0) * new_r20 * x576)) - 1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j5array[0] = IKatan2((x576 * (x578.value) * (x579.value) *
                                                      ((((new_r20 * sj3)) + (((-1.0) * new_r01 * sj4))))),
                                                     ((-1.0) * new_r20 * x576));
                                sj5array[0] = IKsin(j5array[0]);
                                cj5array[0] = IKcos(j5array[0]);
                                if (j5array[0] > IKPI) {
                                  j5array[0] -= IK2PI;
                                } else if (j5array[0] < -IKPI) {
                                  j5array[0] += IK2PI;
                                }
                                j5valid[0] = true;
                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                  if (!j5valid[ij5]) {
                                    continue;
                                  }
                                  _ij5[0] = ij5;
                                  _ij5[1] = -1;
                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                    if (j5valid[iij5] &&
                                        IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                      j5valid[iij5] = false;
                                      _ij5[1] = iij5;
                                      break;
                                    }
                                  }
                                  j5 = j5array[ij5];
                                  cj5 = cj5array[ij5];
                                  sj5 = sj5array[ij5];
                                  {
                                    IkReal evalcond[12];
                                    IkReal x580 = IKsin(j5);
                                    IkReal x581 = IKcos(j5);
                                    IkReal x582 = (cj3 * new_r00);
                                    IkReal x583 = (cj3 * cj4);
                                    IkReal x584 = (cj4 * sj3);
                                    IkReal x585 = ((1.0) * sj3);
                                    IkReal x586 = ((1.0) * sj4);
                                    IkReal x587 = ((1.0) * x581);
                                    IkReal x588 = (sj3 * x580);
                                    IkReal x589 = ((1.0) * x580);
                                    evalcond[0] = (((sj4 * x581)) + new_r20);
                                    evalcond[1] = ((((-1.0) * x580 * x586)) + new_r21);
                                    evalcond[2] = (((new_r11 * sj3)) + ((cj4 * x580)) + ((cj3 * new_r01)));
                                    evalcond[3] = (((cj3 * new_r10)) + (((-1.0) * x589)) + (((-1.0) * new_r00 * x585)));
                                    evalcond[4] = ((((-1.0) * new_r01 * x585)) + ((cj3 * new_r11)) + (((-1.0) * x587)));
                                    evalcond[5] = (((x580 * x583)) + ((sj3 * x581)) + new_r01);
                                    evalcond[6] = (((new_r10 * sj3)) + (((-1.0) * cj4 * x587)) + x582);
                                    evalcond[7] = ((((-1.0) * x583 * x587)) + x588 + new_r00);
                                    evalcond[8] = (((x580 * x584)) + new_r11 + (((-1.0) * cj3 * x587)));
                                    evalcond[9] = ((((-1.0) * x584 * x587)) + new_r10 + (((-1.0) * cj3 * x589)));
                                    evalcond[10] =
                                        ((((-1.0) * new_r21 * x586)) + x580 + ((new_r01 * x583)) + ((new_r11 * x584)));
                                    evalcond[11] = ((((-1.0) * new_r20 * x586)) + ((cj4 * x582)) + (((-1.0) * x587)) +
                                                    ((new_r10 * x584)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }

                        } else {
                          {
                            IkReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1] = {false};
                            _nj5 = 1;
                            CheckValue<IkReal> x591 = IKPowWithIntegerCheck(sj4, -1);
                            if (!x591.valid) {
                              continue;
                            }
                            IkReal x590 = x591.value;
                            CheckValue<IkReal> x592 = IKPowWithIntegerCheck(sj3, -1);
                            if (!x592.valid) {
                              continue;
                            }
                            if (IKabs((x590 * (x592.value) *
                                       (((((-1.0) * cj3 * cj4 * new_r20)) + (((-1.0) * new_r00 * sj4)))))) <
                                    IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(((-1.0) * new_r20 * x590)) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(IKsqr((x590 * (x592.value) *
                                             (((((-1.0) * cj3 * cj4 * new_r20)) + (((-1.0) * new_r00 * sj4)))))) +
                                      IKsqr(((-1.0) * new_r20 * x590)) - 1) <= IKFAST_SINCOS_THRESH)
                              continue;
                            j5array[0] = IKatan2((x590 * (x592.value) *
                                                  (((((-1.0) * cj3 * cj4 * new_r20)) + (((-1.0) * new_r00 * sj4))))),
                                                 ((-1.0) * new_r20 * x590));
                            sj5array[0] = IKsin(j5array[0]);
                            cj5array[0] = IKcos(j5array[0]);
                            if (j5array[0] > IKPI) {
                              j5array[0] -= IK2PI;
                            } else if (j5array[0] < -IKPI) {
                              j5array[0] += IK2PI;
                            }
                            j5valid[0] = true;
                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                              if (!j5valid[ij5]) {
                                continue;
                              }
                              _ij5[0] = ij5;
                              _ij5[1] = -1;
                              for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                  j5valid[iij5] = false;
                                  _ij5[1] = iij5;
                                  break;
                                }
                              }
                              j5 = j5array[ij5];
                              cj5 = cj5array[ij5];
                              sj5 = sj5array[ij5];
                              {
                                IkReal evalcond[12];
                                IkReal x593 = IKsin(j5);
                                IkReal x594 = IKcos(j5);
                                IkReal x595 = (cj3 * new_r00);
                                IkReal x596 = (cj3 * cj4);
                                IkReal x597 = (cj4 * sj3);
                                IkReal x598 = ((1.0) * sj3);
                                IkReal x599 = ((1.0) * sj4);
                                IkReal x600 = ((1.0) * x594);
                                IkReal x601 = (sj3 * x593);
                                IkReal x602 = ((1.0) * x593);
                                evalcond[0] = (((sj4 * x594)) + new_r20);
                                evalcond[1] = ((((-1.0) * x593 * x599)) + new_r21);
                                evalcond[2] = (((new_r11 * sj3)) + ((cj3 * new_r01)) + ((cj4 * x593)));
                                evalcond[3] = ((((-1.0) * new_r00 * x598)) + ((cj3 * new_r10)) + (((-1.0) * x602)));
                                evalcond[4] = ((((-1.0) * new_r01 * x598)) + ((cj3 * new_r11)) + (((-1.0) * x600)));
                                evalcond[5] = (new_r01 + ((x593 * x596)) + ((sj3 * x594)));
                                evalcond[6] = (((new_r10 * sj3)) + x595 + (((-1.0) * cj4 * x600)));
                                evalcond[7] = ((((-1.0) * x596 * x600)) + x601 + new_r00);
                                evalcond[8] = ((((-1.0) * cj3 * x600)) + new_r11 + ((x593 * x597)));
                                evalcond[9] = ((((-1.0) * x597 * x600)) + (((-1.0) * cj3 * x602)) + new_r10);
                                evalcond[10] =
                                    ((((-1.0) * new_r21 * x599)) + ((new_r11 * x597)) + ((new_r01 * x596)) + x593);
                                evalcond[11] = ((((-1.0) * new_r20 * x599)) + ((new_r10 * x597)) + (((-1.0) * x600)) +
                                                ((cj4 * x595)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 1;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 1;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 1;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }

                    } else {
                      {
                        IkReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1] = {false};
                        _nj5 = 1;
                        CheckValue<IkReal> x603 = IKPowWithIntegerCheck(IKsign(sj4), -1);
                        if (!x603.valid) {
                          continue;
                        }
                        CheckValue<IkReal> x604 =
                            IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                        if (!x604.valid) {
                          continue;
                        }
                        j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x603.value))) + (x604.value));
                        sj5array[0] = IKsin(j5array[0]);
                        cj5array[0] = IKcos(j5array[0]);
                        if (j5array[0] > IKPI) {
                          j5array[0] -= IK2PI;
                        } else if (j5array[0] < -IKPI) {
                          j5array[0] += IK2PI;
                        }
                        j5valid[0] = true;
                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                          if (!j5valid[ij5]) {
                            continue;
                          }
                          _ij5[0] = ij5;
                          _ij5[1] = -1;
                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                              j5valid[iij5] = false;
                              _ij5[1] = iij5;
                              break;
                            }
                          }
                          j5 = j5array[ij5];
                          cj5 = cj5array[ij5];
                          sj5 = sj5array[ij5];
                          {
                            IkReal evalcond[12];
                            IkReal x605 = IKsin(j5);
                            IkReal x606 = IKcos(j5);
                            IkReal x607 = (cj3 * new_r00);
                            IkReal x608 = (cj3 * cj4);
                            IkReal x609 = (cj4 * sj3);
                            IkReal x610 = ((1.0) * sj3);
                            IkReal x611 = ((1.0) * sj4);
                            IkReal x612 = ((1.0) * x606);
                            IkReal x613 = (sj3 * x605);
                            IkReal x614 = ((1.0) * x605);
                            evalcond[0] = (((sj4 * x606)) + new_r20);
                            evalcond[1] = ((((-1.0) * x605 * x611)) + new_r21);
                            evalcond[2] = (((new_r11 * sj3)) + ((cj3 * new_r01)) + ((cj4 * x605)));
                            evalcond[3] = ((((-1.0) * x614)) + ((cj3 * new_r10)) + (((-1.0) * new_r00 * x610)));
                            evalcond[4] = ((((-1.0) * x612)) + ((cj3 * new_r11)) + (((-1.0) * new_r01 * x610)));
                            evalcond[5] = (((x605 * x608)) + new_r01 + ((sj3 * x606)));
                            evalcond[6] = (((new_r10 * sj3)) + (((-1.0) * cj4 * x612)) + x607);
                            evalcond[7] = (x613 + new_r00 + (((-1.0) * x608 * x612)));
                            evalcond[8] = (((x605 * x609)) + (((-1.0) * cj3 * x612)) + new_r11);
                            evalcond[9] = ((((-1.0) * cj3 * x614)) + (((-1.0) * x609 * x612)) + new_r10);
                            evalcond[10] =
                                ((((-1.0) * new_r21 * x611)) + ((new_r11 * x609)) + x605 + ((new_r01 * x608)));
                            evalcond[11] =
                                (((new_r10 * x609)) + (((-1.0) * x612)) + (((-1.0) * new_r20 * x611)) + ((cj4 * x607)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                              continue;
                            }
                          }

                          {
                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                            vinfos[0].jointtype = 1;
                            vinfos[0].foffset = j0;
                            vinfos[0].indices[0] = _ij0[0];
                            vinfos[0].indices[1] = _ij0[1];
                            vinfos[0].maxsolutions = _nj0;
                            vinfos[1].jointtype = 1;
                            vinfos[1].foffset = j1;
                            vinfos[1].indices[0] = _ij1[0];
                            vinfos[1].indices[1] = _ij1[1];
                            vinfos[1].maxsolutions = _nj1;
                            vinfos[2].jointtype = 1;
                            vinfos[2].foffset = j2;
                            vinfos[2].indices[0] = _ij2[0];
                            vinfos[2].indices[1] = _ij2[1];
                            vinfos[2].maxsolutions = _nj2;
                            vinfos[3].jointtype = 1;
                            vinfos[3].foffset = j3;
                            vinfos[3].indices[0] = _ij3[0];
                            vinfos[3].indices[1] = _ij3[1];
                            vinfos[3].maxsolutions = _nj3;
                            vinfos[4].jointtype = 1;
                            vinfos[4].foffset = j4;
                            vinfos[4].indices[0] = _ij4[0];
                            vinfos[4].indices[1] = _ij4[1];
                            vinfos[4].maxsolutions = _nj4;
                            vinfos[5].jointtype = 1;
                            vinfos[5].foffset = j5;
                            vinfos[5].indices[0] = _ij5[0];
                            vinfos[5].indices[1] = _ij5[1];
                            vinfos[5].maxsolutions = _nj5;
                            std::vector<int> vfree(0);
                            solutions.AddSolution(vinfos, vfree);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  static inline void polyroots3(IkReal rawcoeffs[3 + 1], IkReal rawroots[3], int& numroots) {
    using std::complex;
    if (rawcoeffs[0] == 0) {
      // solve with one reduced degree
      polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for (int i = 0; i < 3; ++i) {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 3; ++i) {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step) {
      bool changed = false;
      for (int i = 0; i < 3; ++i) {
        if (err[i] >= tol) {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 3; ++j) {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 3; ++j) {
            if (i != j) {
              if (roots[i] != roots[j]) {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed) {
        break;
      }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots + 3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for (int i = 0; i < 3; ++i) {
      if (!visited[i]) {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 3; ++j) {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt &&
              (abs(imag(roots[i]) - imag(roots[j])) < 0.002 || abs(imag(roots[i]) + imag(roots[j])) < 0.002) &&
              abs(imag(roots[i])) < 0.002) {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1) {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt) {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
  static inline void polyroots2(IkReal rawcoeffs[2 + 1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1] * rawcoeffs[1] - 4 * rawcoeffs[0] * rawcoeffs[2];
    if (det < 0) {
      numroots = 0;
    } else if (det == 0) {
      rawroots[0] = -0.5 * rawcoeffs[1] / rawcoeffs[0];
      numroots = 1;
    } else {
      det = IKsqrt(det);
      rawroots[0] = (-rawcoeffs[1] + det) / (2 * rawcoeffs[0]);
      rawroots[1] = (-rawcoeffs[1] - det) / (2 * rawcoeffs[0]);  // rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
      numroots = 2;
    }
  }
  static inline void polyroots4(IkReal rawcoeffs[4 + 1], IkReal rawroots[4], int& numroots) {
    using std::complex;
    if (rawcoeffs[0] == 0) {
      // solve with one reduced degree
      polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for (int i = 0; i < 4; ++i) {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 4; ++i) {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step) {
      bool changed = false;
      for (int i = 0; i < 4; ++i) {
        if (err[i] >= tol) {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 4; ++j) {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 4; ++j) {
            if (i != j) {
              if (roots[i] != roots[j]) {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed) {
        break;
      }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots + 4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for (int i = 0; i < 4; ++i) {
      if (!visited[i]) {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 4; ++j) {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt &&
              (abs(imag(roots[i]) - imag(roots[j])) < 0.002 || abs(imag(roots[i]) + imag(roots[j])) < 0.002) &&
              abs(imag(roots[i])) < 0.002) {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1) {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt) {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                          IkSolutionListBase<IkReal>& solutions) {
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                           IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API const char* GetKinematicsHash() {
  return "<robot:GenericRobot - opti6_800 (c3ffcc336caa854574f9c7460f2049b8)>";
}

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
}  // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif

#endif
