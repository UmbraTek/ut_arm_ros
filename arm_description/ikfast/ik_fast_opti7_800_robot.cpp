/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2022-10-22 04:37:59.815043
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "/usr/local/lib/python2.7/dist-packages/openravepy/_openravepy_0_53/ikfast.h"
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION == 0x1000004b);

#include <algorithm>
#include <cmath>
#include <complex>
#include <limits>
#include <vector>

#ifndef IKFAST_ASSERT
#include <iostream>
#include <sstream>
#include <stdexcept>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b)                                                                                          \
  {                                                                                                               \
    if (!(b)) {                                                                                                   \
      std::stringstream ss;                                                                                       \
      ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " << __PRETTY_FUNCTION__ << ": Assertion '" \
         << #b << "' failed";                                                                                     \
      throw std::runtime_error(ss.str());                                                                         \
    }                                                                                                             \
  }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI ((IkReal)6.28318530717959)
#define IKPI ((IkReal)3.14159265358979)
#define IKPI_2 ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif  // _MSC_VER

// lapack routines
extern "C" {
void dgetrf_(const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
void zgetrf_(const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
void dgesv_(const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
void dgetrs_(const char* trans, const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b,
             const int* ldb, int* info);
void dgeev_(const char* jobvl, const char* jobvr, const int* n, double* a, const int* lda, double* wr, double* wi,
            double* vl, const int* ldvl, double* vr, const int* ldvr, double* work, const int* lwork, int* info);
}

using namespace std;  // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f * f; }
inline double IKsqr(double f) { return f * f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and
// evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they
// can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH \
  ((IkReal)0.03)  // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need
                  // good starting point
#endif

inline float IKasin(float f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return float(-IKPI_2);
  else if (f >= 1)
    return float(IKPI_2);
  return asinf(f);
}
inline double IKasin(double f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return -IKPI_2;
  else if (f >= 1)
    return IKPI_2;
  return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y) {
  while (x < 0) {
    x += y;
  }
  return fmodf(x, y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y) {
  while (x < 0) {
    x += y;
  }
  return fmod(x, y);
}

inline float IKacos(float f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return float(IKPI);
  else if (f >= 1)
    return float(0);
  return acosf(f);
}
inline double IKacos(double f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return IKPI;
  else if (f >= 1)
    return 0;
  return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) {
  if (f <= 0.0f) return 0.0f;
  return sqrtf(f);
}
inline double IKsqrt(double f) {
  if (f <= 0.0) return 0.0;
  return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx) { return atan2f(fy, fx); }
inline float IKatan2(float fy, float fx) {
  if (isnan(fy)) {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return float(IKPI_2);
  } else if (isnan(fx)) {
    return 0;
  }
  return atan2f(fy, fx);
}
inline double IKatan2Simple(double fy, double fx) { return atan2(fy, fx); }
inline double IKatan2(double fy, double fx) {
  if (isnan(fy)) {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return IKPI_2;
  } else if (isnan(fx)) {
    return 0;
  }
  return atan2(fy, fx);
}

template <typename T>
struct CheckValue {
  T value;
  bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon) {
  CheckValue<T> ret;
  ret.valid = false;
  ret.value = 0;
  if (!isnan(fy) && !isnan(fx)) {
    if (IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH) {
      ret.value = IKatan2Simple(fy, fx);
      ret.valid = true;
    }
  }
  return ret;
}

inline float IKsign(float f) {
  if (f > 0) {
    return float(1);
  } else if (f < 0) {
    return float(-1);
  }
  return 0;
}

inline double IKsign(double f) {
  if (f > 0) {
    return 1.0;
  } else if (f < 0) {
    return -1.0;
  }
  return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n) {
  CheckValue<T> ret;
  ret.valid = true;
  if (n == 0) {
    ret.value = 1.0;
    return ret;
  } else if (n == 1) {
    ret.value = f;
    return ret;
  } else if (n < 0) {
    if (f == 0) {
      ret.valid = false;
      ret.value = (T)1.0e30;
      return ret;
    }
    if (n == -1) {
      ret.value = T(1.0) / f;
      return ret;
    }
  }

  int num = n > 0 ? n : -n;
  if (num == 2) {
    ret.value = f * f;
  } else if (num == 3) {
    ret.value = f * f * f;
  } else {
    ret.value = 1.0;
    while (num > 0) {
      if (num & 1) {
        ret.value *= f;
      }
      num >>= 1;
      f *= f;
    }
  }

  if (n < 0) {
    ret.value = T(1.0) / ret.value;
  }
  return ret;
}

template <typename T>
struct ComplexLess {
  bool operator()(const complex<T>& lhs, const complex<T>& rhs) const {
    if (real(lhs) < real(rhs)) {
      return true;
    }
    if (real(lhs) > real(rhs)) {
      return false;
    }
    return imag(lhs) < imag(rhs);
  }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
  IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23,
      x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46,
      x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61;
  x0 = IKcos(j[0]);
  x1 = IKcos(j[1]);
  x2 = IKcos(j[2]);
  x3 = IKsin(j[0]);
  x4 = IKsin(j[2]);
  x5 = IKsin(j[3]);
  x6 = IKcos(j[3]);
  x7 = IKsin(j[1]);
  x8 = IKsin(j[4]);
  x9 = IKcos(j[4]);
  x10 = IKsin(j[6]);
  x11 = IKsin(j[5]);
  x12 = IKcos(j[5]);
  x13 = IKcos(j[6]);
  x14 = ((1.0) * x11);
  x15 = ((0.307) * x0);
  x16 = ((1.0) * x12);
  x17 = ((1.0) * x2);
  x18 = ((1.0) * x3);
  x19 = ((1.0) * x1);
  x20 = ((0.307) * x3);
  x21 = ((0.143) * x9);
  x22 = ((0.143) * x8);
  x23 = ((-1.0) * x5);
  x24 = (x6 * x7);
  x25 = (x1 * x2);
  x26 = (x0 * x7);
  x27 = (x5 * x7);
  x28 = (x0 * x4);
  x29 = (x1 * x6);
  x30 = (x4 * x7 * x8);
  x31 = (x18 * x24);
  x32 = (x17 * x24);
  x33 = (((x0 * x25)) + (((-1.0) * x18 * x4)));
  x34 = (((x0 * x2)) + (((-1.0) * x1 * x18 * x4)));
  x35 = (x28 + ((x25 * x3)));
  x36 = ((((-1.0) * x32)) + ((x1 * x5)));
  x37 = ((((-1.0) * x19 * x28)) + (((-1.0) * x17 * x3)));
  x38 = ((((-1.0) * x19 * x6)) + (((-1.0) * x17 * x27)));
  x39 = (((x19 * x6)) + ((x17 * x27)));
  x40 = (x33 * x5);
  x41 = (x35 * x5);
  x42 = (x33 * x6);
  x43 = (x35 * x6);
  x44 = (x36 * x9);
  x45 = (x11 * x38);
  x46 = (x37 * x8);
  x47 = (x42 + ((x26 * x5)));
  x48 = ((((-1.0) * x31)) + x41);
  x49 = (((x27 * x3)) + x43);
  x50 = (x30 + x44);
  x51 = ((((-1.0) * x0 * x24)) + x40);
  x52 = (((x4 * x7 * x9)) + ((x8 * (((((-1.0) * x19 * x5)) + x32)))));
  x53 = (x49 * x9);
  x54 = (x47 * x9);
  x55 = (x11 * x48);
  x56 = (((x34 * x8)) + x53);
  x57 = (x46 + x54);
  x58 = (((x34 * x9)) + ((x8 * (((((-1.0) * x43)) + (((-1.0) * x18 * x27)))))));
  x59 = (x12 * x56);
  x60 = (x12 * x57);
  x61 = (((x37 * x9)) + ((x8 * (((((-1.0) * x42)) + ((x23 * x26)))))));
  eerot[0] = (((x10 * x61)) + ((x13 * ((((x11 * x51)) + x60)))));
  eerot[1] = (((x13 * x61)) + ((x10 * (((((-1.0) * x16 * x57)) + (((-1.0) * x14 * x51)))))));
  eerot[2] = (((x12 * ((((x23 * x33)) + (((1.0) * x0 * x24)))))) + ((x11 * x57)));
  eetrans[0] =
      (((x12 * (((((-0.143) * x40)) + (((0.143) * x0 * x24)))))) + ((x11 * ((((x22 * x37)) + ((x21 * x47)))))) +
       ((x5 * (((((-1.0) * x15 * x25)) + ((x20 * x4)))))) + ((x15 * x24)) + (((0.35) * x26)));
  eerot[3] = (((x10 * x58)) + ((x13 * ((x59 + x55)))));
  eerot[4] = (((x13 * x58)) + ((x10 * (((((-1.0) * x55)) + (((-1.0) * x59)))))));
  eerot[5] = (((x12 * (((((-1.0) * x41)) + x31)))) + ((x11 * x56)));
  eetrans[1] =
      (((x12 * (((((0.143) * x24 * x3)) + (((-0.143) * x41)))))) + ((x11 * ((((x22 * x34)) + ((x21 * x49)))))) +
       (((0.35) * x3 * x7)) + ((x5 * (((((-1.0) * x15 * x4)) + (((-1.0) * x20 * x25)))))) + ((x20 * x24)));
  eerot[6] = (((x13 * ((((x12 * x50)) + x45)))) + ((x10 * x52)));
  eerot[7] = (((x10 * (((((-1.0) * x14 * x38)) + (((-1.0) * x16 * x50)))))) + ((x13 * x52)));
  eerot[8] = (((x11 * x50)) + ((x12 * x39)));
  IkReal x62 = (x2 * x27);
  eetrans[2] = ((0.278) + (((0.35) * x1)) + ((x11 * ((((x22 * x4 * x7)) + ((x21 * x36)))))) + (((0.307) * x62)) +
                (((0.307) * x29)) + ((x12 * (((((0.143) * x62)) + (((0.143) * x29)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API const int* GetFreeIndices() {
  static const int freeindices[] = {4};
  return freeindices;
}
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
 public:
  IkReal j0, cj0, sj0, htj0, j0mul, j1, cj1, sj1, htj1, j1mul, j2, cj2, sj2, htj2, j2mul, j3, cj3, sj3, htj3, j3mul, j5,
      cj5, sj5, htj5, j5mul, j6, cj6, sj6, htj6, j6mul, j4, cj4, sj4, htj4, new_r00, r00, rxp0_0, new_r01, r01, rxp0_1,
      new_r02, r02, rxp0_2, new_r10, r10, rxp1_0, new_r11, r11, rxp1_1, new_r12, r12, rxp1_2, new_r20, r20, rxp2_0,
      new_r21, r21, rxp2_1, new_r22, r22, rxp2_2, new_px, px, npx, new_py, py, npy, new_pz, pz, npz, pp;
  unsigned char _ij0[2], _nj0, _ij1[2], _nj1, _ij2[2], _nj2, _ij3[2], _nj3, _ij5[2], _nj5, _ij6[2], _nj6, _ij4[2], _nj4;

  IkReal j100, cj100, sj100;
  unsigned char _ij100[2], _nj100;
  bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                 IkSolutionListBase<IkReal>& solutions) {
    j0 = numeric_limits<IkReal>::quiet_NaN();
    _ij0[0] = -1;
    _ij0[1] = -1;
    _nj0 = -1;
    j1 = numeric_limits<IkReal>::quiet_NaN();
    _ij1[0] = -1;
    _ij1[1] = -1;
    _nj1 = -1;
    j2 = numeric_limits<IkReal>::quiet_NaN();
    _ij2[0] = -1;
    _ij2[1] = -1;
    _nj2 = -1;
    j3 = numeric_limits<IkReal>::quiet_NaN();
    _ij3[0] = -1;
    _ij3[1] = -1;
    _nj3 = -1;
    j5 = numeric_limits<IkReal>::quiet_NaN();
    _ij5[0] = -1;
    _ij5[1] = -1;
    _nj5 = -1;
    j6 = numeric_limits<IkReal>::quiet_NaN();
    _ij6[0] = -1;
    _ij6[1] = -1;
    _nj6 = -1;
    _ij4[0] = -1;
    _ij4[1] = -1;
    _nj4 = 0;
    for (int dummyiter = 0; dummyiter < 1; ++dummyiter) {
      solutions.Clear();
      j4 = pfree[0];
      cj4 = cos(pfree[0]);
      sj4 = sin(pfree[0]), htj4 = tan(pfree[0] * 0.5);
      r00 = eerot[0 * 3 + 0];
      r01 = eerot[0 * 3 + 1];
      r02 = eerot[0 * 3 + 2];
      r10 = eerot[1 * 3 + 0];
      r11 = eerot[1 * 3 + 1];
      r12 = eerot[1 * 3 + 2];
      r20 = eerot[2 * 3 + 0];
      r21 = eerot[2 * 3 + 1];
      r22 = eerot[2 * 3 + 2];
      px = eetrans[0];
      py = eetrans[1];
      pz = eetrans[2];

      new_r00 = r00;
      new_r01 = r01;
      new_r02 = r02;
      new_px = (px + (((-0.143) * r02)));
      new_r10 = r10;
      new_r11 = r11;
      new_r12 = r12;
      new_py = (py + (((-0.143) * r12)));
      new_r20 = r20;
      new_r21 = r21;
      new_r22 = r22;
      new_pz = ((-0.278) + (((-0.143) * r22)) + pz);
      r00 = new_r00;
      r01 = new_r01;
      r02 = new_r02;
      r10 = new_r10;
      r11 = new_r11;
      r12 = new_r12;
      r20 = new_r20;
      r21 = new_r21;
      r22 = new_r22;
      px = new_px;
      py = new_py;
      pz = new_pz;
      IkReal x63 = ((1.0) * px);
      IkReal x64 = ((1.0) * pz);
      IkReal x65 = ((1.0) * py);
      pp = ((px * px) + (py * py) + (pz * pz));
      npx = (((px * r00)) + ((py * r10)) + ((pz * r20)));
      npy = (((px * r01)) + ((py * r11)) + ((pz * r21)));
      npz = (((px * r02)) + ((py * r12)) + ((pz * r22)));
      rxp0_0 = ((((-1.0) * r20 * x65)) + ((pz * r10)));
      rxp0_1 = (((px * r20)) + (((-1.0) * r00 * x64)));
      rxp0_2 = ((((-1.0) * r10 * x63)) + ((py * r00)));
      rxp1_0 = ((((-1.0) * r21 * x65)) + ((pz * r11)));
      rxp1_1 = (((px * r21)) + (((-1.0) * r01 * x64)));
      rxp1_2 = ((((-1.0) * r11 * x63)) + ((py * r01)));
      rxp2_0 = (((pz * r12)) + (((-1.0) * r22 * x65)));
      rxp2_1 = (((px * r22)) + (((-1.0) * r02 * x64)));
      rxp2_2 = ((((-1.0) * r12 * x63)) + ((py * r02)));
      {
        IkReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2] = {false};
        _nj3 = 2;
        cj3array[0] = ((-1.00860400186133) + (((4.65332712889716) * pp)));
        if (cj3array[0] >= -1 - IKFAST_SINCOS_THRESH && cj3array[0] <= 1 + IKFAST_SINCOS_THRESH) {
          j3valid[0] = j3valid[1] = true;
          j3array[0] = IKacos(cj3array[0]);
          sj3array[0] = IKsin(j3array[0]);
          cj3array[1] = cj3array[0];
          j3array[1] = -j3array[0];
          sj3array[1] = -sj3array[0];
        } else if (isnan(cj3array[0])) {
          // probably any value will work
          j3valid[0] = true;
          cj3array[0] = 1;
          sj3array[0] = 0;
          j3array[0] = 0;
        }
        for (int ij3 = 0; ij3 < 2; ++ij3) {
          if (!j3valid[ij3]) {
            continue;
          }
          _ij3[0] = ij3;
          _ij3[1] = -1;
          for (int iij3 = ij3 + 1; iij3 < 2; ++iij3) {
            if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH) {
              j3valid[iij3] = false;
              _ij3[1] = iij3;
              break;
            }
          }
          j3 = j3array[ij3];
          cj3 = cj3array[ij3];
          sj3 = sj3array[ij3];

          {
            IkReal j6eval[2];
            j6eval[0] = ((npx * npx) + (npy * npy));
            j6eval[1] = ((IKabs(npy)) + (IKabs(npx)));
            if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000) {
              {
                IkReal j5eval[2];
                j5eval[0] = ((1.0) + (((1.29974853844603) * (cj3 * cj3))) + (((2.28013029315961) * cj3)) +
                             (((1.29974853844603) * (cj4 * cj4) * (sj3 * sj3))));
                j5eval[1] = ((((2.85714285714286) * (IKabs(((0.307) + (((0.35) * cj3))))))) + (IKabs((cj4 * sj3))));
                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000) {
                  continue;  // no branches [j5, j6]

                } else {
                  {
                    IkReal j5array[2], cj5array[2], sj5array[2];
                    bool j5valid[2] = {false};
                    _nj5 = 2;
                    IkReal x66 = ((0.307) + (((0.35) * cj3)));
                    CheckValue<IkReal> x69 =
                        IKatan2WithCheck(IkReal(x66), IkReal(((0.35) * cj4 * sj3)), IKFAST_ATAN2_MAGTHRESH);
                    if (!x69.valid) {
                      continue;
                    }
                    IkReal x67 = ((1.0) * (x69.value));
                    if ((((x66 * x66) + (((0.1225) * (cj4 * cj4) * (sj3 * sj3))))) < -0.00001) continue;
                    CheckValue<IkReal> x70 = IKPowWithIntegerCheck(
                        IKabs(IKsqrt(((x66 * x66) + (((0.1225) * (cj4 * cj4) * (sj3 * sj3)))))), -1);
                    if (!x70.valid) {
                      continue;
                    }
                    if (((npz * (x70.value))) < -1 - IKFAST_SINCOS_THRESH ||
                        ((npz * (x70.value))) > 1 + IKFAST_SINCOS_THRESH)
                      continue;
                    IkReal x68 = IKasin((npz * (x70.value)));
                    j5array[0] = (x68 + (((-1.0) * x67)));
                    sj5array[0] = IKsin(j5array[0]);
                    cj5array[0] = IKcos(j5array[0]);
                    j5array[1] = ((3.14159265358979) + (((-1.0) * x67)) + (((-1.0) * x68)));
                    sj5array[1] = IKsin(j5array[1]);
                    cj5array[1] = IKcos(j5array[1]);
                    if (j5array[0] > IKPI) {
                      j5array[0] -= IK2PI;
                    } else if (j5array[0] < -IKPI) {
                      j5array[0] += IK2PI;
                    }
                    j5valid[0] = true;
                    if (j5array[1] > IKPI) {
                      j5array[1] -= IK2PI;
                    } else if (j5array[1] < -IKPI) {
                      j5array[1] += IK2PI;
                    }
                    j5valid[1] = true;
                    for (int ij5 = 0; ij5 < 2; ++ij5) {
                      if (!j5valid[ij5]) {
                        continue;
                      }
                      _ij5[0] = ij5;
                      _ij5[1] = -1;
                      for (int iij5 = ij5 + 1; iij5 < 2; ++iij5) {
                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                            IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                          j5valid[iij5] = false;
                          _ij5[1] = iij5;
                          break;
                        }
                      }
                      j5 = j5array[ij5];
                      cj5 = cj5array[ij5];
                      sj5 = sj5array[ij5];

                      {
                        IkReal j6eval[3];
                        IkReal x71 = npx * npx;
                        IkReal x72 = npy * npy;
                        IkReal x73 = ((7.0) * sj3);
                        IkReal x74 = (cj5 * sj4);
                        IkReal x75 = (cj5 * x72);
                        IkReal x76 = (cj5 * x71);
                        IkReal x77 = ((20.0) * npz * sj5);
                        j6eval[0] = (x76 + x75);
                        j6eval[1] =
                            ((IKabs(((((-1.0) * npx * x77)) + (((-1.0) * npy * x73 * x74)) + ((cj4 * npx * x73))))) +
                             (IKabs((((npy * x77)) + (((-1.0) * npx * x73 * x74)) + (((-1.0) * cj4 * npy * x73))))));
                        j6eval[2] = IKsign(((((20.0) * x76)) + (((20.0) * x75))));
                        if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000 ||
                            IKabs(j6eval[2]) < 0.0000010000000000) {
                          {
                            IkReal j6eval[3];
                            IkReal x78 = npx * npx;
                            IkReal x79 = npy * npy;
                            IkReal x80 = ((7.0) * npx);
                            IkReal x81 = ((20.0) * sj5);
                            IkReal x82 = ((7.0) * npy);
                            IkReal x83 = ((20.0) * cj5 * npz);
                            IkReal x84 = (sj3 * sj4 * sj5);
                            j6eval[0] = (((sj5 * x78)) + ((sj5 * x79)));
                            j6eval[1] = IKsign((((x79 * x81)) + ((x78 * x81))));
                            j6eval[2] = ((IKabs(((((-1.0) * x80 * x84)) + ((cj3 * x82)) + (((-1.0) * npy * x83)) +
                                                 (((6.14) * npy))))) +
                                         (IKabs(((((-1.0) * x82 * x84)) + (((-6.14) * npx)) + ((npx * x83)) +
                                                 (((-1.0) * cj3 * x80))))));
                            if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000 ||
                                IKabs(j6eval[2]) < 0.0000010000000000) {
                              {
                                IkReal j6eval[3];
                                IkReal x85 = npy * npy;
                                IkReal x86 = npx * npx;
                                IkReal x87 = ((7.0) * npy);
                                IkReal x88 = (sj3 * sj4);
                                IkReal x89 = (cj3 * sj5);
                                IkReal x90 = ((7.0) * npx);
                                IkReal x91 = ((6.14) * sj5);
                                IkReal x92 = (cj4 * cj5 * sj3);
                                j6eval[0] = ((((-1.0) * x86)) + (((-1.0) * x85)));
                                j6eval[1] =
                                    ((IKabs((((x87 * x92)) + ((x88 * x90)) + (((-1.0) * x87 * x89)) +
                                             (((-1.0) * npy * x91))))) +
                                     (IKabs((((x89 * x90)) + (((-1.0) * x90 * x92)) + ((npx * x91)) + ((x87 * x88))))));
                                j6eval[2] = IKsign(((((-20.0) * x86)) + (((-20.0) * x85))));
                                if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000 ||
                                    IKabs(j6eval[2]) < 0.0000010000000000) {
                                  {
                                    IkReal evalcond[1];
                                    bool bgotonextstatement = true;
                                    do {
                                      evalcond[0] = ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(j5))), 6.28318530717959)));
                                      if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                        bgotonextstatement = false;
                                        {
                                          IkReal j6eval[3];
                                          sj5 = 0;
                                          cj5 = 1.0;
                                          j5 = 0;
                                          IkReal x93 = npy * npy;
                                          IkReal x94 = npx * npx;
                                          IkReal x95 = (npy * sj3);
                                          IkReal x96 = (npx * sj3);
                                          j6eval[0] = ((((-1.0) * x94)) + (((-1.0) * x93)));
                                          j6eval[1] = IKsign(((((-20.0) * x93)) + (((-20.0) * x94))));
                                          j6eval[2] = ((IKabs(((((-1.0) * cj4 * x96)) + ((sj4 * x95))))) +
                                                       (IKabs((((sj4 * x96)) + ((cj4 * x95))))));
                                          if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                              IKabs(j6eval[1]) < 0.0000010000000000 ||
                                              IKabs(j6eval[2]) < 0.0000010000000000) {
                                            {
                                              IkReal evalcond[1];
                                              bool bgotonextstatement = true;
                                              do {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(j3))), 6.28318530717959)));
                                                if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j6eval[1];
                                                    sj5 = 0;
                                                    cj5 = 1.0;
                                                    j5 = 0;
                                                    sj3 = 0;
                                                    cj3 = 1.0;
                                                    j3 = 0;
                                                    j6eval[0] = ((IKabs(npy)) + (IKabs(npx)));
                                                    if (IKabs(j6eval[0]) < 0.0000010000000000) {
                                                      continue;  // no branches [j6]

                                                    } else {
                                                      {
                                                        IkReal j6array[2], cj6array[2], sj6array[2];
                                                        bool j6valid[2] = {false};
                                                        _nj6 = 2;
                                                        CheckValue<IkReal> x98 =
                                                            IKatan2WithCheck(IkReal(((-1.0) * npx)), IkReal(npy),
                                                                             IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x98.valid) {
                                                          continue;
                                                        }
                                                        IkReal x97 = x98.value;
                                                        j6array[0] = ((-1.0) * x97);
                                                        sj6array[0] = IKsin(j6array[0]);
                                                        cj6array[0] = IKcos(j6array[0]);
                                                        j6array[1] = ((3.14159265358979) + (((-1.0) * x97)));
                                                        sj6array[1] = IKsin(j6array[1]);
                                                        cj6array[1] = IKcos(j6array[1]);
                                                        if (j6array[0] > IKPI) {
                                                          j6array[0] -= IK2PI;
                                                        } else if (j6array[0] < -IKPI) {
                                                          j6array[0] += IK2PI;
                                                        }
                                                        j6valid[0] = true;
                                                        if (j6array[1] > IKPI) {
                                                          j6array[1] -= IK2PI;
                                                        } else if (j6array[1] < -IKPI) {
                                                          j6array[1] += IK2PI;
                                                        }
                                                        j6valid[1] = true;
                                                        for (int ij6 = 0; ij6 < 2; ++ij6) {
                                                          if (!j6valid[ij6]) {
                                                            continue;
                                                          }
                                                          _ij6[0] = ij6;
                                                          _ij6[1] = -1;
                                                          for (int iij6 = ij6 + 1; iij6 < 2; ++iij6) {
                                                            if (j6valid[iij6] &&
                                                                IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j6valid[iij6] = false;
                                                              _ij6[1] = iij6;
                                                              break;
                                                            }
                                                          }
                                                          j6 = j6array[ij6];
                                                          cj6 = cj6array[ij6];
                                                          sj6 = sj6array[ij6];
                                                          {
                                                            IkReal evalcond[1];
                                                            evalcond[0] = ((((-1.0) * npy * (IKcos(j6)))) +
                                                                           (((-1.0) * npx * (IKsin(j6)))));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH) {
                                                              continue;
                                                            }
                                                          }

                                                          rotationfunction0(solutions);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement) {
                                                bool bgotonextstatement = true;
                                                do {
                                                  evalcond[0] = ((-3.14159265358979) +
                                                                 (IKfmod(((3.14159265358979) +
                                                                          (IKabs(((-3.14159265358979) + j3)))),
                                                                         6.28318530717959)));
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j6eval[1];
                                                      sj5 = 0;
                                                      cj5 = 1.0;
                                                      j5 = 0;
                                                      sj3 = 0;
                                                      cj3 = -1.0;
                                                      j3 = 3.14159265358979;
                                                      j6eval[0] = ((IKabs(npy)) + (IKabs(npx)));
                                                      if (IKabs(j6eval[0]) < 0.0000010000000000) {
                                                        continue;  // no branches [j6]

                                                      } else {
                                                        {
                                                          IkReal j6array[2], cj6array[2], sj6array[2];
                                                          bool j6valid[2] = {false};
                                                          _nj6 = 2;
                                                          CheckValue<IkReal> x636 =
                                                              IKatan2WithCheck(IkReal(((-1.0) * npx)), IkReal(npy),
                                                                               IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x636.valid) {
                                                            continue;
                                                          }
                                                          IkReal x635 = x636.value;
                                                          j6array[0] = ((-1.0) * x635);
                                                          sj6array[0] = IKsin(j6array[0]);
                                                          cj6array[0] = IKcos(j6array[0]);
                                                          j6array[1] = ((3.14159265358979) + (((-1.0) * x635)));
                                                          sj6array[1] = IKsin(j6array[1]);
                                                          cj6array[1] = IKcos(j6array[1]);
                                                          if (j6array[0] > IKPI) {
                                                            j6array[0] -= IK2PI;
                                                          } else if (j6array[0] < -IKPI) {
                                                            j6array[0] += IK2PI;
                                                          }
                                                          j6valid[0] = true;
                                                          if (j6array[1] > IKPI) {
                                                            j6array[1] -= IK2PI;
                                                          } else if (j6array[1] < -IKPI) {
                                                            j6array[1] += IK2PI;
                                                          }
                                                          j6valid[1] = true;
                                                          for (int ij6 = 0; ij6 < 2; ++ij6) {
                                                            if (!j6valid[ij6]) {
                                                              continue;
                                                            }
                                                            _ij6[0] = ij6;
                                                            _ij6[1] = -1;
                                                            for (int iij6 = ij6 + 1; iij6 < 2; ++iij6) {
                                                              if (j6valid[iij6] &&
                                                                  IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j6valid[iij6] = false;
                                                                _ij6[1] = iij6;
                                                                break;
                                                              }
                                                            }
                                                            j6 = j6array[ij6];
                                                            cj6 = cj6array[ij6];
                                                            sj6 = sj6array[ij6];
                                                            {
                                                              IkReal evalcond[1];
                                                              evalcond[0] = ((((-1.0) * npy * (IKcos(j6)))) +
                                                                             (((-1.0) * npx * (IKsin(j6)))));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            rotationfunction0(solutions);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement) {
                                                  bool bgotonextstatement = true;
                                                  do {
                                                    if (1) {
                                                      bgotonextstatement = false;
                                                      continue;  // branch miss [j6]
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {
                                                  }
                                                }
                                              }
                                            }

                                          } else {
                                            {
                                              IkReal j6array[1], cj6array[1], sj6array[1];
                                              bool j6valid[1] = {false};
                                              _nj6 = 1;
                                              IkReal x637 = ((7.0) * sj3);
                                              CheckValue<IkReal> x638 = IKPowWithIntegerCheck(
                                                  IKsign(((((-20.0) * (npx * npx))) + (((-20.0) * (npy * npy))))), -1);
                                              if (!x638.valid) {
                                                continue;
                                              }
                                              CheckValue<IkReal> x639 = IKatan2WithCheck(
                                                  IkReal((((cj4 * npy * x637)) + ((npx * sj4 * x637)))),
                                                  IkReal(((((-1.0) * cj4 * npx * x637)) + ((npy * sj4 * x637)))),
                                                  IKFAST_ATAN2_MAGTHRESH);
                                              if (!x639.valid) {
                                                continue;
                                              }
                                              j6array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x638.value))) +
                                                            (x639.value));
                                              sj6array[0] = IKsin(j6array[0]);
                                              cj6array[0] = IKcos(j6array[0]);
                                              if (j6array[0] > IKPI) {
                                                j6array[0] -= IK2PI;
                                              } else if (j6array[0] < -IKPI) {
                                                j6array[0] += IK2PI;
                                              }
                                              j6valid[0] = true;
                                              for (int ij6 = 0; ij6 < 1; ++ij6) {
                                                if (!j6valid[ij6]) {
                                                  continue;
                                                }
                                                _ij6[0] = ij6;
                                                _ij6[1] = -1;
                                                for (int iij6 = ij6 + 1; iij6 < 1; ++iij6) {
                                                  if (j6valid[iij6] &&
                                                      IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH) {
                                                    j6valid[iij6] = false;
                                                    _ij6[1] = iij6;
                                                    break;
                                                  }
                                                }
                                                j6 = j6array[ij6];
                                                cj6 = cj6array[ij6];
                                                sj6 = sj6array[ij6];
                                                {
                                                  IkReal evalcond[2];
                                                  IkReal x640 = IKsin(j6);
                                                  IkReal x641 = IKcos(j6);
                                                  IkReal x642 = ((1.0) * npx);
                                                  IkReal x643 = ((0.35) * sj3);
                                                  evalcond[0] =
                                                      (((cj4 * x643)) + (((-1.0) * x641 * x642)) + ((npy * x640)));
                                                  evalcond[1] = ((((-1.0) * sj4 * x643)) + (((-1.0) * x640 * x642)) +
                                                                 (((-1.0) * npy * x641)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH) {
                                                    continue;
                                                  }
                                                }

                                                rotationfunction0(solutions);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    } while (0);
                                    if (bgotonextstatement) {
                                      bool bgotonextstatement = true;
                                      do {
                                        evalcond[0] =
                                            ((-3.14159265358979) +
                                             (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j5)))),
                                                     6.28318530717959)));
                                        if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                          bgotonextstatement = false;
                                          {
                                            IkReal j6eval[3];
                                            sj5 = 0;
                                            cj5 = -1.0;
                                            j5 = 3.14159265358979;
                                            IkReal x644 = npy * npy;
                                            IkReal x645 = npx * npx;
                                            IkReal x646 = (npy * sj3);
                                            IkReal x647 = ((1.0) * npx * sj3);
                                            j6eval[0] = (x645 + x644);
                                            j6eval[1] = IKsign(((((20.0) * x644)) + (((20.0) * x645))));
                                            j6eval[2] = ((IKabs(((((-1.0) * sj4 * x647)) + ((cj4 * x646))))) +
                                                         (IKabs(((((-1.0) * sj4 * x646)) + (((-1.0) * cj4 * x647))))));
                                            if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                IKabs(j6eval[1]) < 0.0000010000000000 ||
                                                IKabs(j6eval[2]) < 0.0000010000000000) {
                                              {
                                                IkReal evalcond[1];
                                                bool bgotonextstatement = true;
                                                do {
                                                  evalcond[0] =
                                                      ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(j3))), 6.28318530717959)));
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j6eval[1];
                                                      sj5 = 0;
                                                      cj5 = -1.0;
                                                      j5 = 3.14159265358979;
                                                      sj3 = 0;
                                                      cj3 = 1.0;
                                                      j3 = 0;
                                                      j6eval[0] = ((IKabs(npy)) + (IKabs(npx)));
                                                      if (IKabs(j6eval[0]) < 0.0000010000000000) {
                                                        continue;  // no branches [j6]

                                                      } else {
                                                        {
                                                          IkReal j6array[2], cj6array[2], sj6array[2];
                                                          bool j6valid[2] = {false};
                                                          _nj6 = 2;
                                                          CheckValue<IkReal> x649 =
                                                              IKatan2WithCheck(IkReal(npx), IkReal(((-1.0) * npy)),
                                                                               IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x649.valid) {
                                                            continue;
                                                          }
                                                          IkReal x648 = x649.value;
                                                          j6array[0] = ((-1.0) * x648);
                                                          sj6array[0] = IKsin(j6array[0]);
                                                          cj6array[0] = IKcos(j6array[0]);
                                                          j6array[1] = ((3.14159265358979) + (((-1.0) * x648)));
                                                          sj6array[1] = IKsin(j6array[1]);
                                                          cj6array[1] = IKcos(j6array[1]);
                                                          if (j6array[0] > IKPI) {
                                                            j6array[0] -= IK2PI;
                                                          } else if (j6array[0] < -IKPI) {
                                                            j6array[0] += IK2PI;
                                                          }
                                                          j6valid[0] = true;
                                                          if (j6array[1] > IKPI) {
                                                            j6array[1] -= IK2PI;
                                                          } else if (j6array[1] < -IKPI) {
                                                            j6array[1] += IK2PI;
                                                          }
                                                          j6valid[1] = true;
                                                          for (int ij6 = 0; ij6 < 2; ++ij6) {
                                                            if (!j6valid[ij6]) {
                                                              continue;
                                                            }
                                                            _ij6[0] = ij6;
                                                            _ij6[1] = -1;
                                                            for (int iij6 = ij6 + 1; iij6 < 2; ++iij6) {
                                                              if (j6valid[iij6] &&
                                                                  IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j6valid[iij6] = false;
                                                                _ij6[1] = iij6;
                                                                break;
                                                              }
                                                            }
                                                            j6 = j6array[ij6];
                                                            cj6 = cj6array[ij6];
                                                            sj6 = sj6array[ij6];
                                                            {
                                                              IkReal evalcond[1];
                                                              evalcond[0] = ((((-1.0) * npy * (IKcos(j6)))) +
                                                                             (((-1.0) * npx * (IKsin(j6)))));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            rotationfunction0(solutions);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement) {
                                                  bool bgotonextstatement = true;
                                                  do {
                                                    evalcond[0] = ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-3.14159265358979) + j3)))),
                                                                           6.28318530717959)));
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                      bgotonextstatement = false;
                                                      {
                                                        IkReal j6eval[1];
                                                        sj5 = 0;
                                                        cj5 = -1.0;
                                                        j5 = 3.14159265358979;
                                                        sj3 = 0;
                                                        cj3 = -1.0;
                                                        j3 = 3.14159265358979;
                                                        j6eval[0] = ((IKabs(npy)) + (IKabs(npx)));
                                                        if (IKabs(j6eval[0]) < 0.0000010000000000) {
                                                          continue;  // no branches [j6]

                                                        } else {
                                                          {
                                                            IkReal j6array[2], cj6array[2], sj6array[2];
                                                            bool j6valid[2] = {false};
                                                            _nj6 = 2;
                                                            CheckValue<IkReal> x651 =
                                                                IKatan2WithCheck(IkReal(npx), IkReal(((-1.0) * npy)),
                                                                                 IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x651.valid) {
                                                              continue;
                                                            }
                                                            IkReal x650 = x651.value;
                                                            j6array[0] = ((-1.0) * x650);
                                                            sj6array[0] = IKsin(j6array[0]);
                                                            cj6array[0] = IKcos(j6array[0]);
                                                            j6array[1] = ((3.14159265358979) + (((-1.0) * x650)));
                                                            sj6array[1] = IKsin(j6array[1]);
                                                            cj6array[1] = IKcos(j6array[1]);
                                                            if (j6array[0] > IKPI) {
                                                              j6array[0] -= IK2PI;
                                                            } else if (j6array[0] < -IKPI) {
                                                              j6array[0] += IK2PI;
                                                            }
                                                            j6valid[0] = true;
                                                            if (j6array[1] > IKPI) {
                                                              j6array[1] -= IK2PI;
                                                            } else if (j6array[1] < -IKPI) {
                                                              j6array[1] += IK2PI;
                                                            }
                                                            j6valid[1] = true;
                                                            for (int ij6 = 0; ij6 < 2; ++ij6) {
                                                              if (!j6valid[ij6]) {
                                                                continue;
                                                              }
                                                              _ij6[0] = ij6;
                                                              _ij6[1] = -1;
                                                              for (int iij6 = ij6 + 1; iij6 < 2; ++iij6) {
                                                                if (j6valid[iij6] &&
                                                                    IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH) {
                                                                  j6valid[iij6] = false;
                                                                  _ij6[1] = iij6;
                                                                  break;
                                                                }
                                                              }
                                                              j6 = j6array[ij6];
                                                              cj6 = cj6array[ij6];
                                                              sj6 = sj6array[ij6];
                                                              {
                                                                IkReal evalcond[1];
                                                                evalcond[0] = ((((-1.0) * npy * (IKcos(j6)))) +
                                                                               (((-1.0) * npx * (IKsin(j6)))));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH) {
                                                                  continue;
                                                                }
                                                              }

                                                              rotationfunction0(solutions);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {
                                                    bool bgotonextstatement = true;
                                                    do {
                                                      if (1) {
                                                        bgotonextstatement = false;
                                                        continue;  // branch miss [j6]
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement) {
                                                    }
                                                  }
                                                }
                                              }

                                            } else {
                                              {
                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1] = {false};
                                                _nj6 = 1;
                                                IkReal x652 = ((7.0) * sj3);
                                                CheckValue<IkReal> x653 = IKatan2WithCheck(
                                                    IkReal(((((-1.0) * npx * sj4 * x652)) + ((cj4 * npy * x652)))),
                                                    IkReal(((((-1.0) * cj4 * npx * x652)) +
                                                            (((-1.0) * npy * sj4 * x652)))),
                                                    IKFAST_ATAN2_MAGTHRESH);
                                                if (!x653.valid) {
                                                  continue;
                                                }
                                                CheckValue<IkReal> x654 = IKPowWithIntegerCheck(
                                                    IKsign(((((20.0) * (npy * npy))) + (((20.0) * (npx * npx))))), -1);
                                                if (!x654.valid) {
                                                  continue;
                                                }
                                                j6array[0] = ((-1.5707963267949) + (x653.value) +
                                                              (((1.5707963267949) * (x654.value))));
                                                sj6array[0] = IKsin(j6array[0]);
                                                cj6array[0] = IKcos(j6array[0]);
                                                if (j6array[0] > IKPI) {
                                                  j6array[0] -= IK2PI;
                                                } else if (j6array[0] < -IKPI) {
                                                  j6array[0] += IK2PI;
                                                }
                                                j6valid[0] = true;
                                                for (int ij6 = 0; ij6 < 1; ++ij6) {
                                                  if (!j6valid[ij6]) {
                                                    continue;
                                                  }
                                                  _ij6[0] = ij6;
                                                  _ij6[1] = -1;
                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6) {
                                                    if (j6valid[iij6] &&
                                                        IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                            IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                            IKFAST_SOLUTION_THRESH) {
                                                      j6valid[iij6] = false;
                                                      _ij6[1] = iij6;
                                                      break;
                                                    }
                                                  }
                                                  j6 = j6array[ij6];
                                                  cj6 = cj6array[ij6];
                                                  sj6 = sj6array[ij6];
                                                  {
                                                    IkReal evalcond[2];
                                                    IkReal x655 = IKsin(j6);
                                                    IkReal x656 = IKcos(j6);
                                                    IkReal x657 = ((0.35) * sj3);
                                                    IkReal x658 = ((1.0) * x655);
                                                    evalcond[0] =
                                                        (((cj4 * x657)) + (((-1.0) * npy * x658)) + ((npx * x656)));
                                                    evalcond[1] = ((((-1.0) * sj4 * x657)) + (((-1.0) * npy * x656)) +
                                                                   (((-1.0) * npx * x658)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH) {
                                                      continue;
                                                    }
                                                  }

                                                  rotationfunction0(solutions);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      } while (0);
                                      if (bgotonextstatement) {
                                        bool bgotonextstatement = true;
                                        do {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j5)))),
                                                       6.28318530717959)));
                                          if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j6eval[3];
                                              sj5 = 1.0;
                                              cj5 = 0;
                                              j5 = 1.5707963267949;
                                              IkReal x659 = npy * npy;
                                              IkReal x660 = npx * npx;
                                              IkReal x661 = ((7.0) * cj3);
                                              IkReal x662 = ((7.0) * sj3 * sj4);
                                              j6eval[0] = ((((-1.0) * x659)) + (((-1.0) * x660)));
                                              j6eval[1] = IKsign(((((-20.0) * x660)) + (((-20.0) * x659))));
                                              j6eval[2] =
                                                  ((IKabs((((npx * x662)) + (((-6.14) * npy)) +
                                                           (((-1.0) * npy * x661))))) +
                                                   (IKabs((((npx * x661)) + (((6.14) * npx)) + ((npy * x662))))));
                                              if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                  IKabs(j6eval[1]) < 0.0000010000000000 ||
                                                  IKabs(j6eval[2]) < 0.0000010000000000) {
                                                continue;  // no branches [j6]

                                              } else {
                                                {
                                                  IkReal j6array[1], cj6array[1], sj6array[1];
                                                  bool j6valid[1] = {false};
                                                  _nj6 = 1;
                                                  IkReal x663 = ((7.0) * cj3);
                                                  IkReal x664 = ((7.0) * sj3 * sj4);
                                                  CheckValue<IkReal> x665 = IKatan2WithCheck(
                                                      IkReal((((npx * x664)) + (((-6.14) * npy)) +
                                                              (((-1.0) * npy * x663)))),
                                                      IkReal((((npx * x663)) + (((6.14) * npx)) + ((npy * x664)))),
                                                      IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x665.valid) {
                                                    continue;
                                                  }
                                                  CheckValue<IkReal> x666 = IKPowWithIntegerCheck(
                                                      IKsign(((((-20.0) * (npx * npx))) + (((-20.0) * (npy * npy))))),
                                                      -1);
                                                  if (!x666.valid) {
                                                    continue;
                                                  }
                                                  j6array[0] = ((-1.5707963267949) + (x665.value) +
                                                                (((1.5707963267949) * (x666.value))));
                                                  sj6array[0] = IKsin(j6array[0]);
                                                  cj6array[0] = IKcos(j6array[0]);
                                                  if (j6array[0] > IKPI) {
                                                    j6array[0] -= IK2PI;
                                                  } else if (j6array[0] < -IKPI) {
                                                    j6array[0] += IK2PI;
                                                  }
                                                  j6valid[0] = true;
                                                  for (int ij6 = 0; ij6 < 1; ++ij6) {
                                                    if (!j6valid[ij6]) {
                                                      continue;
                                                    }
                                                    _ij6[0] = ij6;
                                                    _ij6[1] = -1;
                                                    for (int iij6 = ij6 + 1; iij6 < 1; ++iij6) {
                                                      if (j6valid[iij6] &&
                                                          IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j6valid[iij6] = false;
                                                        _ij6[1] = iij6;
                                                        break;
                                                      }
                                                    }
                                                    j6 = j6array[ij6];
                                                    cj6 = cj6array[ij6];
                                                    sj6 = sj6array[ij6];
                                                    {
                                                      IkReal evalcond[2];
                                                      IkReal x667 = IKsin(j6);
                                                      IkReal x668 = IKcos(j6);
                                                      IkReal x669 = ((1.0) * npx);
                                                      evalcond[0] = ((-0.307) + (((-0.35) * cj3)) +
                                                                     (((-1.0) * x668 * x669)) + ((npy * x667)));
                                                      evalcond[1] = ((((-1.0) * npy * x668)) + (((-0.35) * sj3 * sj4)) +
                                                                     (((-1.0) * x667 * x669)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    rotationfunction0(solutions);
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement) {
                                          bool bgotonextstatement = true;
                                          do {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j5)))),
                                                         6.28318530717959)));
                                            if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j6eval[3];
                                                sj5 = -1.0;
                                                cj5 = 0;
                                                j5 = -1.5707963267949;
                                                IkReal x670 = npy * npy;
                                                IkReal x671 = npx * npx;
                                                IkReal x672 = ((7.0) * cj3);
                                                IkReal x673 = ((7.0) * sj3 * sj4);
                                                j6eval[0] = (x670 + x671);
                                                j6eval[1] = ((IKabs(((((-1.0) * npy * x672)) + (((-1.0) * npx * x673)) +
                                                                     (((-6.14) * npy))))) +
                                                             (IKabs((((npx * x672)) + (((-1.0) * npy * x673)) +
                                                                     (((6.14) * npx))))));
                                                j6eval[2] = IKsign(((((20.0) * x671)) + (((20.0) * x670))));
                                                if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                    IKabs(j6eval[1]) < 0.0000010000000000 ||
                                                    IKabs(j6eval[2]) < 0.0000010000000000) {
                                                  continue;  // no branches [j6]

                                                } else {
                                                  {
                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                    bool j6valid[1] = {false};
                                                    _nj6 = 1;
                                                    IkReal x674 = ((7.0) * cj3);
                                                    IkReal x675 = ((7.0) * sj3 * sj4);
                                                    CheckValue<IkReal> x676 = IKatan2WithCheck(
                                                        IkReal(((((-1.0) * npy * x674)) + (((-1.0) * npx * x675)) +
                                                                (((-6.14) * npy)))),
                                                        IkReal((((npx * x674)) + (((-1.0) * npy * x675)) +
                                                                (((6.14) * npx)))),
                                                        IKFAST_ATAN2_MAGTHRESH);
                                                    if (!x676.valid) {
                                                      continue;
                                                    }
                                                    CheckValue<IkReal> x677 = IKPowWithIntegerCheck(
                                                        IKsign(((((20.0) * (npy * npy))) + (((20.0) * (npx * npx))))),
                                                        -1);
                                                    if (!x677.valid) {
                                                      continue;
                                                    }
                                                    j6array[0] = ((-1.5707963267949) + (x676.value) +
                                                                  (((1.5707963267949) * (x677.value))));
                                                    sj6array[0] = IKsin(j6array[0]);
                                                    cj6array[0] = IKcos(j6array[0]);
                                                    if (j6array[0] > IKPI) {
                                                      j6array[0] -= IK2PI;
                                                    } else if (j6array[0] < -IKPI) {
                                                      j6array[0] += IK2PI;
                                                    }
                                                    j6valid[0] = true;
                                                    for (int ij6 = 0; ij6 < 1; ++ij6) {
                                                      if (!j6valid[ij6]) {
                                                        continue;
                                                      }
                                                      _ij6[0] = ij6;
                                                      _ij6[1] = -1;
                                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6) {
                                                        if (j6valid[iij6] &&
                                                            IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH) {
                                                          j6valid[iij6] = false;
                                                          _ij6[1] = iij6;
                                                          break;
                                                        }
                                                      }
                                                      j6 = j6array[ij6];
                                                      cj6 = cj6array[ij6];
                                                      sj6 = sj6array[ij6];
                                                      {
                                                        IkReal evalcond[2];
                                                        IkReal x678 = IKsin(j6);
                                                        IkReal x679 = IKcos(j6);
                                                        IkReal x680 = ((1.0) * x678);
                                                        evalcond[0] = ((-0.307) + ((npx * x679)) + (((-0.35) * cj3)) +
                                                                       (((-1.0) * npy * x680)));
                                                        evalcond[1] =
                                                            ((((-1.0) * npy * x679)) + (((-1.0) * npx * x680)) +
                                                             (((-0.35) * sj3 * sj4)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH) {
                                                          continue;
                                                        }
                                                      }

                                                      rotationfunction0(solutions);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement) {
                                            bool bgotonextstatement = true;
                                            do {
                                              if (1) {
                                                bgotonextstatement = false;
                                                continue;  // branch miss [j6]
                                              }
                                            } while (0);
                                            if (bgotonextstatement) {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }

                                } else {
                                  {
                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1] = {false};
                                    _nj6 = 1;
                                    IkReal x681 = ((7.0) * npy);
                                    IkReal x682 = (sj3 * sj4);
                                    IkReal x683 = (cj3 * sj5);
                                    IkReal x684 = ((7.0) * npx);
                                    IkReal x685 = ((6.14) * sj5);
                                    IkReal x686 = (cj4 * cj5 * sj3);
                                    CheckValue<IkReal> x687 =
                                        IKatan2WithCheck(IkReal(((((-1.0) * npy * x685)) + (((-1.0) * x681 * x683)) +
                                                                 ((x682 * x684)) + ((x681 * x686)))),
                                                         IkReal((((x683 * x684)) + (((-1.0) * x684 * x686)) +
                                                                 ((x681 * x682)) + ((npx * x685)))),
                                                         IKFAST_ATAN2_MAGTHRESH);
                                    if (!x687.valid) {
                                      continue;
                                    }
                                    CheckValue<IkReal> x688 = IKPowWithIntegerCheck(
                                        IKsign(((((-20.0) * (npx * npx))) + (((-20.0) * (npy * npy))))), -1);
                                    if (!x688.valid) {
                                      continue;
                                    }
                                    j6array[0] =
                                        ((-1.5707963267949) + (x687.value) + (((1.5707963267949) * (x688.value))));
                                    sj6array[0] = IKsin(j6array[0]);
                                    cj6array[0] = IKcos(j6array[0]);
                                    if (j6array[0] > IKPI) {
                                      j6array[0] -= IK2PI;
                                    } else if (j6array[0] < -IKPI) {
                                      j6array[0] += IK2PI;
                                    }
                                    j6valid[0] = true;
                                    for (int ij6 = 0; ij6 < 1; ++ij6) {
                                      if (!j6valid[ij6]) {
                                        continue;
                                      }
                                      _ij6[0] = ij6;
                                      _ij6[1] = -1;
                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6) {
                                        if (j6valid[iij6] &&
                                            IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH) {
                                          j6valid[iij6] = false;
                                          _ij6[1] = iij6;
                                          break;
                                        }
                                      }
                                      j6 = j6array[ij6];
                                      cj6 = cj6array[ij6];
                                      sj6 = sj6array[ij6];
                                      {
                                        IkReal evalcond[4];
                                        IkReal x689 = IKsin(j6);
                                        IkReal x690 = IKcos(j6);
                                        IkReal x691 = ((1.0) * sj5);
                                        IkReal x692 = ((0.35) * sj3);
                                        IkReal x693 = ((0.35) * cj3);
                                        IkReal x694 = (npy * x689);
                                        IkReal x695 = (npx * x690);
                                        evalcond[0] = ((((-1.0) * sj4 * x692)) + (((-1.0) * npy * x690)) +
                                                       (((-1.0) * npx * x689)));
                                        evalcond[1] = ((-0.307) + ((cj5 * npz)) + ((sj5 * x694)) + (((-1.0) * x693)) +
                                                       (((-1.0) * x691 * x695)));
                                        evalcond[2] = (((cj4 * x692)) + (((-1.0) * cj5 * x695)) +
                                                       (((-1.0) * npz * x691)) + ((cj5 * x694)));
                                        evalcond[3] = ((((-1.0) * sj5 * x693)) + (((-0.307) * sj5)) +
                                                       ((cj4 * cj5 * x692)) + x694 + (((-1.0) * x695)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                          continue;
                                        }
                                      }

                                      rotationfunction0(solutions);
                                    }
                                  }
                                }
                              }

                            } else {
                              {
                                IkReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1] = {false};
                                _nj6 = 1;
                                IkReal x696 = ((20.0) * sj5);
                                IkReal x697 = ((7.0) * npx);
                                IkReal x698 = ((7.0) * npy);
                                IkReal x699 = ((20.0) * cj5 * npz);
                                IkReal x700 = (sj3 * sj4 * sj5);
                                CheckValue<IkReal> x701 =
                                    IKatan2WithCheck(IkReal((((cj3 * x698)) + (((-1.0) * npy * x699)) +
                                                             (((6.14) * npy)) + (((-1.0) * x697 * x700)))),
                                                     IkReal((((npx * x699)) + (((-1.0) * cj3 * x697)) +
                                                             (((-6.14) * npx)) + (((-1.0) * x698 * x700)))),
                                                     IKFAST_ATAN2_MAGTHRESH);
                                if (!x701.valid) {
                                  continue;
                                }
                                CheckValue<IkReal> x702 = IKPowWithIntegerCheck(
                                    IKsign((((x696 * (npx * npx))) + ((x696 * (npy * npy))))), -1);
                                if (!x702.valid) {
                                  continue;
                                }
                                j6array[0] = ((-1.5707963267949) + (x701.value) + (((1.5707963267949) * (x702.value))));
                                sj6array[0] = IKsin(j6array[0]);
                                cj6array[0] = IKcos(j6array[0]);
                                if (j6array[0] > IKPI) {
                                  j6array[0] -= IK2PI;
                                } else if (j6array[0] < -IKPI) {
                                  j6array[0] += IK2PI;
                                }
                                j6valid[0] = true;
                                for (int ij6 = 0; ij6 < 1; ++ij6) {
                                  if (!j6valid[ij6]) {
                                    continue;
                                  }
                                  _ij6[0] = ij6;
                                  _ij6[1] = -1;
                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6) {
                                    if (j6valid[iij6] &&
                                        IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH) {
                                      j6valid[iij6] = false;
                                      _ij6[1] = iij6;
                                      break;
                                    }
                                  }
                                  j6 = j6array[ij6];
                                  cj6 = cj6array[ij6];
                                  sj6 = sj6array[ij6];
                                  {
                                    IkReal evalcond[4];
                                    IkReal x703 = IKsin(j6);
                                    IkReal x704 = IKcos(j6);
                                    IkReal x705 = ((1.0) * sj5);
                                    IkReal x706 = ((0.35) * sj3);
                                    IkReal x707 = ((0.35) * cj3);
                                    IkReal x708 = (npy * x703);
                                    IkReal x709 = (npx * x704);
                                    evalcond[0] =
                                        ((((-1.0) * sj4 * x706)) + (((-1.0) * npx * x703)) + (((-1.0) * npy * x704)));
                                    evalcond[1] = ((-0.307) + ((sj5 * x708)) + ((cj5 * npz)) + (((-1.0) * x707)) +
                                                   (((-1.0) * x705 * x709)));
                                    evalcond[2] = ((((-1.0) * cj5 * x709)) + ((cj4 * x706)) + ((cj5 * x708)) +
                                                   (((-1.0) * npz * x705)));
                                    evalcond[3] = (((cj4 * cj5 * x706)) + (((-0.307) * sj5)) + (((-1.0) * x709)) +
                                                   (((-1.0) * sj5 * x707)) + x708);
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                      continue;
                                    }
                                  }

                                  rotationfunction0(solutions);
                                }
                              }
                            }
                          }

                        } else {
                          {
                            IkReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1] = {false};
                            _nj6 = 1;
                            IkReal x710 = ((20.0) * cj5);
                            IkReal x711 = ((7.0) * sj3);
                            IkReal x712 = (cj5 * sj4);
                            IkReal x713 = ((20.0) * npz * sj5);
                            CheckValue<IkReal> x714 = IKatan2WithCheck(
                                IkReal(
                                    (((npy * x713)) + (((-1.0) * npx * x711 * x712)) + (((-1.0) * cj4 * npy * x711)))),
                                IkReal(
                                    ((((-1.0) * npx * x713)) + (((-1.0) * npy * x711 * x712)) + ((cj4 * npx * x711)))),
                                IKFAST_ATAN2_MAGTHRESH);
                            if (!x714.valid) {
                              continue;
                            }
                            CheckValue<IkReal> x715 =
                                IKPowWithIntegerCheck(IKsign((((x710 * (npy * npy))) + ((x710 * (npx * npx))))), -1);
                            if (!x715.valid) {
                              continue;
                            }
                            j6array[0] = ((-1.5707963267949) + (x714.value) + (((1.5707963267949) * (x715.value))));
                            sj6array[0] = IKsin(j6array[0]);
                            cj6array[0] = IKcos(j6array[0]);
                            if (j6array[0] > IKPI) {
                              j6array[0] -= IK2PI;
                            } else if (j6array[0] < -IKPI) {
                              j6array[0] += IK2PI;
                            }
                            j6valid[0] = true;
                            for (int ij6 = 0; ij6 < 1; ++ij6) {
                              if (!j6valid[ij6]) {
                                continue;
                              }
                              _ij6[0] = ij6;
                              _ij6[1] = -1;
                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6) {
                                if (j6valid[iij6] && IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH) {
                                  j6valid[iij6] = false;
                                  _ij6[1] = iij6;
                                  break;
                                }
                              }
                              j6 = j6array[ij6];
                              cj6 = cj6array[ij6];
                              sj6 = sj6array[ij6];
                              {
                                IkReal evalcond[4];
                                IkReal x716 = IKsin(j6);
                                IkReal x717 = IKcos(j6);
                                IkReal x718 = ((1.0) * sj5);
                                IkReal x719 = ((0.35) * sj3);
                                IkReal x720 = ((0.35) * cj3);
                                IkReal x721 = (npy * x716);
                                IkReal x722 = (npx * x717);
                                evalcond[0] =
                                    ((((-1.0) * npx * x716)) + (((-1.0) * npy * x717)) + (((-1.0) * sj4 * x719)));
                                evalcond[1] = ((-0.307) + ((sj5 * x721)) + (((-1.0) * x720)) + ((cj5 * npz)) +
                                               (((-1.0) * x718 * x722)));
                                evalcond[2] = (((cj5 * x721)) + ((cj4 * x719)) + (((-1.0) * npz * x718)) +
                                               (((-1.0) * cj5 * x722)));
                                evalcond[3] = (((cj4 * cj5 * x719)) + (((-0.307) * sj5)) + (((-1.0) * x722)) + x721 +
                                               (((-1.0) * sj5 * x720)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                  continue;
                                }
                              }

                              rotationfunction0(solutions);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

            } else {
              {
                IkReal j6array[2], cj6array[2], sj6array[2];
                bool j6valid[2] = {false};
                _nj6 = 2;
                CheckValue<IkReal> x725 =
                    IKatan2WithCheck(IkReal(((-1.0) * npy)), IkReal(((-1.0) * npx)), IKFAST_ATAN2_MAGTHRESH);
                if (!x725.valid) {
                  continue;
                }
                IkReal x723 = ((1.0) * (x725.value));
                if ((((npx * npx) + (npy * npy))) < -0.00001) continue;
                CheckValue<IkReal> x726 = IKPowWithIntegerCheck(IKabs(IKsqrt(((npx * npx) + (npy * npy)))), -1);
                if (!x726.valid) {
                  continue;
                }
                if ((((0.35) * sj3 * sj4 * (x726.value))) < -1 - IKFAST_SINCOS_THRESH ||
                    (((0.35) * sj3 * sj4 * (x726.value))) > 1 + IKFAST_SINCOS_THRESH)
                  continue;
                IkReal x724 = IKasin(((0.35) * sj3 * sj4 * (x726.value)));
                j6array[0] = ((((-1.0) * x723)) + x724);
                sj6array[0] = IKsin(j6array[0]);
                cj6array[0] = IKcos(j6array[0]);
                j6array[1] = ((3.14159265358979) + (((-1.0) * x723)) + (((-1.0) * x724)));
                sj6array[1] = IKsin(j6array[1]);
                cj6array[1] = IKcos(j6array[1]);
                if (j6array[0] > IKPI) {
                  j6array[0] -= IK2PI;
                } else if (j6array[0] < -IKPI) {
                  j6array[0] += IK2PI;
                }
                j6valid[0] = true;
                if (j6array[1] > IKPI) {
                  j6array[1] -= IK2PI;
                } else if (j6array[1] < -IKPI) {
                  j6array[1] += IK2PI;
                }
                j6valid[1] = true;
                for (int ij6 = 0; ij6 < 2; ++ij6) {
                  if (!j6valid[ij6]) {
                    continue;
                  }
                  _ij6[0] = ij6;
                  _ij6[1] = -1;
                  for (int iij6 = ij6 + 1; iij6 < 2; ++iij6) {
                    if (j6valid[iij6] && IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH) {
                      j6valid[iij6] = false;
                      _ij6[1] = iij6;
                      break;
                    }
                  }
                  j6 = j6array[ij6];
                  cj6 = cj6array[ij6];
                  sj6 = sj6array[ij6];

                  {
                    IkReal j5eval[3];
                    IkReal x727 = (cj6 * npx);
                    IkReal x728 = ((20.0) * npz);
                    IkReal x729 = (npy * sj6);
                    IkReal x730 = ((7.0) * cj3);
                    IkReal x731 = ((1.1400651465798) * cj3);
                    IkReal x732 = (cj4 * sj3);
                    IkReal x733 = (npz * x732);
                    j5eval[0] = (((x727 * x731)) + (((1.1400651465798) * x733)) + (((-1.0) * x729)) + x727 +
                                 (((-1.0) * x729 * x731)));
                    j5eval[1] = IKsign((((x727 * x730)) + (((-6.14) * x729)) + (((7.0) * x733)) + (((6.14) * x727)) +
                                        (((-1.0) * x729 * x730))));
                    j5eval[2] =
                        ((IKabs(((((2.45) * cj3 * x732)) + ((x727 * x728)) + (((2.149) * x732)) +
                                 (((-1.0) * x728 * x729))))) +
                         (IKabs(((-1.88498) + ((npz * x728)) + (((-4.298) * cj3)) + (((-2.45) * (cj3 * cj3)))))));
                    if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 ||
                        IKabs(j5eval[2]) < 0.0000010000000000) {
                      {
                        IkReal j5eval[3];
                        IkReal x734 = cj3 * cj3;
                        IkReal x735 = cj4 * cj4;
                        IkReal x736 = ((140.0) * cj3);
                        IkReal x737 = (cj6 * npx);
                        IkReal x738 = (npy * sj6);
                        IkReal x739 = ((1.29974853844603) * x735);
                        IkReal x740 = ((49.0) * x734);
                        IkReal x741 = ((140.0) * cj4 * sj3);
                        j5eval[0] = ((1.0) + (((-1.0) * x734 * x739)) + (((1.29974853844603) * x734)) + x739 +
                                     (((2.28013029315961) * cj3)));
                        j5eval[1] = ((IKabs(((((-122.8) * x737)) + (((-1.0) * x736 * x737)) + ((x736 * x738)) +
                                             ((npz * x741)) + (((122.8) * x738))))) +
                                     (IKabs((((npz * x736)) + (((122.8) * npz)) + (((-1.0) * x738 * x741)) +
                                             ((x737 * x741))))));
                        j5eval[2] = IKsign(
                            ((37.6996) + (((85.96) * cj3)) + (((49.0) * x735)) + x740 + (((-1.0) * x735 * x740))));
                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 ||
                            IKabs(j5eval[2]) < 0.0000010000000000) {
                          {
                            IkReal j5eval[3];
                            IkReal x742 = cj6 * cj6;
                            IkReal x743 = npy * npy;
                            IkReal x744 = npz * npz;
                            IkReal x745 = npx * npx;
                            IkReal x746 = (cj6 * npx);
                            IkReal x747 = (npy * sj6);
                            IkReal x748 = ((7.0) * cj3);
                            IkReal x749 = ((7.0) * cj4 * sj3);
                            IkReal x750 = ((20.0) * x743);
                            IkReal x751 = (x742 * x745);
                            j5eval[0] = ((((-1.0) * x742 * x743)) + (((-2.0) * x746 * x747)) + x751 + x744 + x743);
                            j5eval[1] = ((IKabs(((((-1.0) * x747 * x749)) + ((x746 * x749)) + (((6.14) * npz)) +
                                                 ((npz * x748))))) +
                                         (IKabs(((((-1.0) * x746 * x748)) + (((6.14) * x747)) + ((x747 * x748)) +
                                                 (((-6.14) * x746)) + ((npz * x749))))));
                            j5eval[2] = IKsign(((((-1.0) * x742 * x750)) + (((20.0) * x744)) +
                                                (((-40.0) * x746 * x747)) + (((20.0) * x751)) + x750));
                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 ||
                                IKabs(j5eval[2]) < 0.0000010000000000) {
                              continue;  // no branches [j5]

                            } else {
                              {
                                IkReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1] = {false};
                                _nj5 = 1;
                                IkReal x752 = cj6 * cj6;
                                IkReal x753 = npy * npy;
                                IkReal x754 = (cj6 * npx);
                                IkReal x755 = (npy * sj6);
                                IkReal x756 = ((7.0) * cj3);
                                IkReal x757 = ((7.0) * cj4 * sj3);
                                IkReal x758 = ((20.0) * x753);
                                CheckValue<IkReal> x759 = IKPowWithIntegerCheck(
                                    IKsign(((((20.0) * (npz * npz))) + (((-40.0) * x754 * x755)) +
                                            (((-1.0) * x752 * x758)) + (((20.0) * x752 * (npx * npx))) + x758)),
                                    -1);
                                if (!x759.valid) {
                                  continue;
                                }
                                CheckValue<IkReal> x760 = IKatan2WithCheck(
                                    IkReal((((npz * x757)) + (((6.14) * x755)) + (((-1.0) * x754 * x756)) +
                                            (((-6.14) * x754)) + ((x755 * x756)))),
                                    IkReal((((npz * x756)) + (((-1.0) * x755 * x757)) + (((6.14) * npz)) +
                                            ((x754 * x757)))),
                                    IKFAST_ATAN2_MAGTHRESH);
                                if (!x760.valid) {
                                  continue;
                                }
                                j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x759.value))) + (x760.value));
                                sj5array[0] = IKsin(j5array[0]);
                                cj5array[0] = IKcos(j5array[0]);
                                if (j5array[0] > IKPI) {
                                  j5array[0] -= IK2PI;
                                } else if (j5array[0] < -IKPI) {
                                  j5array[0] += IK2PI;
                                }
                                j5valid[0] = true;
                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                  if (!j5valid[ij5]) {
                                    continue;
                                  }
                                  _ij5[0] = ij5;
                                  _ij5[1] = -1;
                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                    if (j5valid[iij5] &&
                                        IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                      j5valid[iij5] = false;
                                      _ij5[1] = iij5;
                                      break;
                                    }
                                  }
                                  j5 = j5array[ij5];
                                  cj5 = cj5array[ij5];
                                  sj5 = sj5array[ij5];
                                  {
                                    IkReal evalcond[4];
                                    IkReal x761 = IKcos(j5);
                                    IkReal x762 = IKsin(j5);
                                    IkReal x763 = (npy * sj6);
                                    IkReal x764 = ((1.0) * npz);
                                    IkReal x765 = ((0.35) * cj3);
                                    IkReal x766 = ((1.0) * cj6 * npx);
                                    IkReal x767 = ((0.35) * cj4 * sj3);
                                    evalcond[0] =
                                        ((((0.307) * x761)) + (((-1.0) * x764)) + ((x761 * x765)) + ((x762 * x767)));
                                    evalcond[1] = ((-0.307) + ((npz * x761)) + (((-1.0) * x762 * x766)) +
                                                   (((-1.0) * x765)) + ((x762 * x763)));
                                    evalcond[2] =
                                        ((((-1.0) * x762 * x764)) + ((x761 * x763)) + x767 + (((-1.0) * x761 * x766)));
                                    evalcond[3] = ((((-1.0) * x762 * x765)) + (((-0.307) * x762)) + (((-1.0) * x766)) +
                                                   ((x761 * x767)) + x763);
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                      continue;
                                    }
                                  }

                                  rotationfunction0(solutions);
                                }
                              }
                            }
                          }

                        } else {
                          {
                            IkReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1] = {false};
                            _nj5 = 1;
                            IkReal x768 = cj3 * cj3;
                            IkReal x769 = cj4 * cj4;
                            IkReal x770 = ((140.0) * cj3);
                            IkReal x771 = (cj6 * npx);
                            IkReal x772 = (npy * sj6);
                            IkReal x773 = ((49.0) * x768);
                            IkReal x774 = ((140.0) * cj4 * sj3);
                            CheckValue<IkReal> x775 =
                                IKPowWithIntegerCheck(IKsign(((37.6996) + (((49.0) * x769)) + (((85.96) * cj3)) +
                                                              (((-1.0) * x769 * x773)) + x773)),
                                                      -1);
                            if (!x775.valid) {
                              continue;
                            }
                            CheckValue<IkReal> x776 =
                                IKatan2WithCheck(IkReal((((x770 * x772)) + (((122.8) * x772)) + (((-122.8) * x771)) +
                                                         (((-1.0) * x770 * x771)) + ((npz * x774)))),
                                                 IkReal((((x771 * x774)) + (((122.8) * npz)) +
                                                         (((-1.0) * x772 * x774)) + ((npz * x770)))),
                                                 IKFAST_ATAN2_MAGTHRESH);
                            if (!x776.valid) {
                              continue;
                            }
                            j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x775.value))) + (x776.value));
                            sj5array[0] = IKsin(j5array[0]);
                            cj5array[0] = IKcos(j5array[0]);
                            if (j5array[0] > IKPI) {
                              j5array[0] -= IK2PI;
                            } else if (j5array[0] < -IKPI) {
                              j5array[0] += IK2PI;
                            }
                            j5valid[0] = true;
                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                              if (!j5valid[ij5]) {
                                continue;
                              }
                              _ij5[0] = ij5;
                              _ij5[1] = -1;
                              for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                                  j5valid[iij5] = false;
                                  _ij5[1] = iij5;
                                  break;
                                }
                              }
                              j5 = j5array[ij5];
                              cj5 = cj5array[ij5];
                              sj5 = sj5array[ij5];
                              {
                                IkReal evalcond[4];
                                IkReal x777 = IKcos(j5);
                                IkReal x778 = IKsin(j5);
                                IkReal x779 = (npy * sj6);
                                IkReal x780 = ((1.0) * npz);
                                IkReal x781 = ((0.35) * cj3);
                                IkReal x782 = ((1.0) * cj6 * npx);
                                IkReal x783 = ((0.35) * cj4 * sj3);
                                evalcond[0] =
                                    ((((-1.0) * x780)) + ((x778 * x783)) + ((x777 * x781)) + (((0.307) * x777)));
                                evalcond[1] = ((-0.307) + (((-1.0) * x781)) + ((x778 * x779)) +
                                               (((-1.0) * x778 * x782)) + ((npz * x777)));
                                evalcond[2] =
                                    (((x777 * x779)) + (((-1.0) * x777 * x782)) + x783 + (((-1.0) * x778 * x780)));
                                evalcond[3] = ((((-0.307) * x778)) + (((-1.0) * x782)) + x779 + ((x777 * x783)) +
                                               (((-1.0) * x778 * x781)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                  continue;
                                }
                              }

                              rotationfunction0(solutions);
                            }
                          }
                        }
                      }

                    } else {
                      {
                        IkReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1] = {false};
                        _nj5 = 1;
                        IkReal x784 = (cj6 * npx);
                        IkReal x785 = ((20.0) * npz);
                        IkReal x786 = (cj4 * sj3);
                        IkReal x787 = ((7.0) * cj3);
                        IkReal x788 = (npy * sj6);
                        CheckValue<IkReal> x789 = IKPowWithIntegerCheck(
                            IKsign(((((-6.14) * x788)) + (((7.0) * npz * x786)) + ((x784 * x787)) +
                                    (((-1.0) * x787 * x788)) + (((6.14) * x784)))),
                            -1);
                        if (!x789.valid) {
                          continue;
                        }
                        CheckValue<IkReal> x790 = IKatan2WithCheck(
                            IkReal(((-1.88498) + (((-4.298) * cj3)) + (((-2.45) * (cj3 * cj3))) + ((npz * x785)))),
                            IkReal(((((2.45) * cj3 * x786)) + ((x784 * x785)) + (((2.149) * x786)) +
                                    (((-1.0) * x785 * x788)))),
                            IKFAST_ATAN2_MAGTHRESH);
                        if (!x790.valid) {
                          continue;
                        }
                        j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x789.value))) + (x790.value));
                        sj5array[0] = IKsin(j5array[0]);
                        cj5array[0] = IKcos(j5array[0]);
                        if (j5array[0] > IKPI) {
                          j5array[0] -= IK2PI;
                        } else if (j5array[0] < -IKPI) {
                          j5array[0] += IK2PI;
                        }
                        j5valid[0] = true;
                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                          if (!j5valid[ij5]) {
                            continue;
                          }
                          _ij5[0] = ij5;
                          _ij5[1] = -1;
                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH) {
                              j5valid[iij5] = false;
                              _ij5[1] = iij5;
                              break;
                            }
                          }
                          j5 = j5array[ij5];
                          cj5 = cj5array[ij5];
                          sj5 = sj5array[ij5];
                          {
                            IkReal evalcond[4];
                            IkReal x791 = IKcos(j5);
                            IkReal x792 = IKsin(j5);
                            IkReal x793 = (npy * sj6);
                            IkReal x794 = ((1.0) * npz);
                            IkReal x795 = ((0.35) * cj3);
                            IkReal x796 = ((1.0) * cj6 * npx);
                            IkReal x797 = ((0.35) * cj4 * sj3);
                            evalcond[0] = ((((0.307) * x791)) + (((-1.0) * x794)) + ((x792 * x797)) + ((x791 * x795)));
                            evalcond[1] = ((-0.307) + (((-1.0) * x795)) + (((-1.0) * x792 * x796)) + ((x792 * x793)) +
                                           ((npz * x791)));
                            evalcond[2] =
                                ((((-1.0) * x792 * x794)) + (((-1.0) * x791 * x796)) + x797 + ((x791 * x793)));
                            evalcond[3] = ((((-0.307) * x792)) + (((-1.0) * x796)) + (((-1.0) * x792 * x795)) + x793 +
                                           ((x791 * x797)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                              continue;
                            }
                          }

                          rotationfunction0(solutions);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return solutions.GetNumSolutions() > 0;
  }
  inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
    for (int rotationiter = 0; rotationiter < 1; ++rotationiter) {
      IkReal x99 = ((1.0) * sj3);
      IkReal x100 = ((1.0) * sj4);
      IkReal x101 = ((1.0) * sj6);
      IkReal x102 = ((-1.0) * sj5);
      IkReal x103 = ((((-1.0) * r01 * x101)) + ((cj6 * r00)));
      IkReal x104 = (((r00 * sj6)) + ((cj6 * r01)));
      IkReal x105 = ((((-1.0) * r11 * x101)) + ((cj6 * r10)));
      IkReal x106 = (((r10 * sj6)) + ((cj6 * r11)));
      IkReal x107 = ((((-1.0) * r21 * x101)) + ((cj6 * r20)));
      IkReal x108 = (((cj6 * r21)) + ((r20 * sj6)));
      IkReal x109 = (((r02 * sj5)) + ((cj5 * x103)));
      IkReal x110 = (((r12 * sj5)) + ((cj5 * x105)));
      IkReal x111 = (((r22 * sj5)) + ((cj5 * x107)));
      IkReal x112 = (((cj5 * r22)) + (((-1.0) * sj5 * x107)));
      IkReal x113 = (((x102 * x103)) + ((cj5 * r02)));
      IkReal x114 = (((cj5 * r12)) + ((x102 * x105)));
      IkReal x115 = ((((-1.0) * x100 * x104)) + ((cj4 * x109)));
      IkReal x116 = ((((-1.0) * x100 * x106)) + ((cj4 * x110)));
      IkReal x117 = ((((-1.0) * sj4 * x108)) + ((cj4 * x111)));
      new_r00 = (((cj3 * x115)) + (((-1.0) * x113 * x99)));
      new_r01 = (((sj4 * x109)) + ((cj4 * x104)));
      new_r02 = (((cj3 * x113)) + ((sj3 * x115)));
      new_r10 = ((((-1.0) * x114 * x99)) + ((cj3 * x116)));
      new_r11 = (((sj4 * x110)) + ((cj4 * x106)));
      new_r12 = (((cj3 * x114)) + ((sj3 * x116)));
      new_r20 = (((cj3 * x117)) + (((-1.0) * x112 * x99)));
      new_r21 = (((sj4 * x111)) + ((cj4 * x108)));
      new_r22 = (((cj3 * x112)) + ((sj3 * x117)));
      {
        IkReal j1array[2], cj1array[2], sj1array[2];
        bool j1valid[2] = {false};
        _nj1 = 2;
        cj1array[0] = new_r22;
        if (cj1array[0] >= -1 - IKFAST_SINCOS_THRESH && cj1array[0] <= 1 + IKFAST_SINCOS_THRESH) {
          j1valid[0] = j1valid[1] = true;
          j1array[0] = IKacos(cj1array[0]);
          sj1array[0] = IKsin(j1array[0]);
          cj1array[1] = cj1array[0];
          j1array[1] = -j1array[0];
          sj1array[1] = -sj1array[0];
        } else if (isnan(cj1array[0])) {
          // probably any value will work
          j1valid[0] = true;
          cj1array[0] = 1;
          sj1array[0] = 0;
          j1array[0] = 0;
        }
        for (int ij1 = 0; ij1 < 2; ++ij1) {
          if (!j1valid[ij1]) {
            continue;
          }
          _ij1[0] = ij1;
          _ij1[1] = -1;
          for (int iij1 = ij1 + 1; iij1 < 2; ++iij1) {
            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH) {
              j1valid[iij1] = false;
              _ij1[1] = iij1;
              break;
            }
          }
          j1 = j1array[ij1];
          cj1 = cj1array[ij1];
          sj1 = sj1array[ij1];

          {
            IkReal j0eval[3];
            j0eval[0] = sj1;
            j0eval[1] = ((IKabs(new_r12)) + (IKabs(new_r02)));
            j0eval[2] = IKsign(sj1);
            if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000 ||
                IKabs(j0eval[2]) < 0.0000010000000000) {
              {
                IkReal j2eval[3];
                j2eval[0] = sj1;
                j2eval[1] = IKsign(sj1);
                j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 ||
                    IKabs(j2eval[2]) < 0.0000010000000000) {
                  {
                    IkReal j0eval[2];
                    j0eval[0] = new_r12;
                    j0eval[1] = sj1;
                    if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000) {
                      {
                        IkReal evalcond[5];
                        bool bgotonextstatement = true;
                        do {
                          evalcond[0] =
                              ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                          evalcond[1] = new_r20;
                          evalcond[2] = new_r02;
                          evalcond[3] = new_r12;
                          evalcond[4] = new_r21;
                          if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                              IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                              IKabs(evalcond[4]) < 0.0000050000000000) {
                            bgotonextstatement = false;
                            IkReal j2mul = 1;
                            j2 = 0;
                            j0mul = -1.0;
                            if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(new_r00) - 1) <= IKFAST_SINCOS_THRESH)
                              continue;
                            j0 = IKatan2(((-1.0) * new_r01), new_r00);
                            {
                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                              vinfos[0].jointtype = 1;
                              vinfos[0].foffset = j0;
                              vinfos[0].fmul = j0mul;
                              vinfos[0].freeind = 0;
                              vinfos[0].maxsolutions = 0;
                              vinfos[1].jointtype = 1;
                              vinfos[1].foffset = j1;
                              vinfos[1].indices[0] = _ij1[0];
                              vinfos[1].indices[1] = _ij1[1];
                              vinfos[1].maxsolutions = _nj1;
                              vinfos[2].jointtype = 1;
                              vinfos[2].foffset = j2;
                              vinfos[2].fmul = j2mul;
                              vinfos[2].freeind = 0;
                              vinfos[2].maxsolutions = 0;
                              vinfos[3].jointtype = 1;
                              vinfos[3].foffset = j3;
                              vinfos[3].indices[0] = _ij3[0];
                              vinfos[3].indices[1] = _ij3[1];
                              vinfos[3].maxsolutions = _nj3;
                              vinfos[4].jointtype = 1;
                              vinfos[4].foffset = j4;
                              vinfos[4].indices[0] = _ij4[0];
                              vinfos[4].indices[1] = _ij4[1];
                              vinfos[4].maxsolutions = _nj4;
                              vinfos[5].jointtype = 1;
                              vinfos[5].foffset = j5;
                              vinfos[5].indices[0] = _ij5[0];
                              vinfos[5].indices[1] = _ij5[1];
                              vinfos[5].maxsolutions = _nj5;
                              vinfos[6].jointtype = 1;
                              vinfos[6].foffset = j6;
                              vinfos[6].indices[0] = _ij6[0];
                              vinfos[6].indices[1] = _ij6[1];
                              vinfos[6].maxsolutions = _nj6;
                              std::vector<int> vfree(1);
                              vfree[0] = 2;
                              solutions.AddSolution(vinfos, vfree);
                            }
                          }
                        } while (0);
                        if (bgotonextstatement) {
                          bool bgotonextstatement = true;
                          do {
                            evalcond[0] = ((-3.14159265358979) +
                                           (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))),
                                                   6.28318530717959)));
                            evalcond[1] = new_r20;
                            evalcond[2] = new_r02;
                            evalcond[3] = new_r12;
                            evalcond[4] = new_r21;
                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                                IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                                IKabs(evalcond[4]) < 0.0000050000000000) {
                              bgotonextstatement = false;
                              IkReal j2mul = 1;
                              j2 = 0;
                              j0mul = 1.0;
                              if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(((-1.0) * new_r00)) - 1) <=
                                      IKFAST_SINCOS_THRESH)
                                continue;
                              j0 = IKatan2(((-1.0) * new_r01), ((-1.0) * new_r00));
                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].fmul = j0mul;
                                vinfos[0].freeind = 0;
                                vinfos[0].maxsolutions = 0;
                                vinfos[1].jointtype = 1;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 1;
                                vinfos[2].foffset = j2;
                                vinfos[2].fmul = j2mul;
                                vinfos[2].freeind = 0;
                                vinfos[2].maxsolutions = 0;
                                vinfos[3].jointtype = 1;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j6;
                                vinfos[6].indices[0] = _ij6[0];
                                vinfos[6].indices[1] = _ij6[1];
                                vinfos[6].maxsolutions = _nj6;
                                std::vector<int> vfree(1);
                                vfree[0] = 2;
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          } while (0);
                          if (bgotonextstatement) {
                            bool bgotonextstatement = true;
                            do {
                              evalcond[0] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                              if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                bgotonextstatement = false;
                                {
                                  IkReal j0eval[1];
                                  new_r02 = 0;
                                  new_r12 = 0;
                                  new_r20 = 0;
                                  new_r21 = 0;
                                  IkReal x118 = new_r22 * new_r22;
                                  IkReal x119 = ((16.0) * new_r10);
                                  IkReal x120 = ((16.0) * new_r01);
                                  IkReal x121 = ((16.0) * new_r22);
                                  IkReal x122 = ((8.0) * new_r11);
                                  IkReal x123 = ((8.0) * new_r00);
                                  IkReal x124 = (x118 * x119);
                                  IkReal x125 = (x118 * x120);
                                  j0eval[0] =
                                      ((IKabs(((((-1.0) * x119)) + x124))) +
                                       (IKabs(((((16.0) * new_r00)) + (((-32.0) * new_r00 * x118)) +
                                               ((new_r11 * x121))))) +
                                       (IKabs(((((-1.0) * new_r22 * x123)) + ((x118 * x122))))) +
                                       (IKabs(((((32.0) * new_r11)) + (((-1.0) * new_r00 * x121)) +
                                               (((-16.0) * new_r11 * x118))))) +
                                       (IKabs(((((-1.0) * x120)) + x125))) + (IKabs(((((-1.0) * x125)) + x120))) +
                                       (IKabs(((((-1.0) * x124)) + x119))) +
                                       (IKabs((((new_r22 * x122)) + (((-1.0) * x123))))));
                                  if (IKabs(j0eval[0]) < 0.0000000100000000) {
                                    continue;  // no branches [j0, j2]

                                  } else {
                                    IkReal op[4 + 1], zeror[4];
                                    int numroots;
                                    IkReal j0evalpoly[1];
                                    IkReal x126 = new_r22 * new_r22;
                                    IkReal x127 = ((16.0) * new_r10);
                                    IkReal x128 = (new_r11 * new_r22);
                                    IkReal x129 = (x126 * x127);
                                    IkReal x130 = ((((-8.0) * new_r00)) + (((8.0) * x128)));
                                    op[0] = x130;
                                    op[1] = ((((-1.0) * x129)) + x127);
                                    op[2] = ((((16.0) * x128)) + (((16.0) * new_r00)) + (((-32.0) * new_r00 * x126)));
                                    op[3] = ((((-1.0) * x127)) + x129);
                                    op[4] = x130;
                                    polyroots4(op, zeror, numroots);
                                    IkReal j0array[4], cj0array[4], sj0array[4], tempj0array[1];
                                    int numsolutions = 0;
                                    for (int ij0 = 0; ij0 < numroots; ++ij0) {
                                      IkReal htj0 = zeror[ij0];
                                      tempj0array[0] = ((2.0) * (atan(htj0)));
                                      for (int kj0 = 0; kj0 < 1; ++kj0) {
                                        j0array[numsolutions] = tempj0array[kj0];
                                        if (j0array[numsolutions] > IKPI) {
                                          j0array[numsolutions] -= IK2PI;
                                        } else if (j0array[numsolutions] < -IKPI) {
                                          j0array[numsolutions] += IK2PI;
                                        }
                                        sj0array[numsolutions] = IKsin(j0array[numsolutions]);
                                        cj0array[numsolutions] = IKcos(j0array[numsolutions]);
                                        numsolutions++;
                                      }
                                    }
                                    bool j0valid[4] = {true, true, true, true};
                                    _nj0 = 4;
                                    for (int ij0 = 0; ij0 < numsolutions; ++ij0) {
                                      if (!j0valid[ij0]) {
                                        continue;
                                      }
                                      j0 = j0array[ij0];
                                      cj0 = cj0array[ij0];
                                      sj0 = sj0array[ij0];
                                      htj0 = IKtan(j0 / 2);

                                      IkReal x131 = ((16.0) * new_r01);
                                      IkReal x132 = new_r22 * new_r22;
                                      IkReal x133 = (new_r00 * new_r22);
                                      IkReal x134 = ((8.0) * x133);
                                      IkReal x135 = (new_r11 * x132);
                                      IkReal x136 = (x131 * x132);
                                      IkReal x137 = ((8.0) * x135);
                                      j0evalpoly[0] =
                                          ((((htj0 * htj0) *
                                             (((((32.0) * new_r11)) + (((-16.0) * x133)) + (((-16.0) * x135)))))) +
                                           ((htj0 * ((x131 + (((-1.0) * x136)))))) + x137 + (((-1.0) * x134)) +
                                           (((htj0 * htj0 * htj0) * ((x136 + (((-1.0) * x131)))))) +
                                           (((htj0 * htj0 * htj0 * htj0) * ((x137 + (((-1.0) * x134)))))));
                                      if (IKabs(j0evalpoly[0]) > 0.0000001000000000) {
                                        continue;
                                      }
                                      _ij0[0] = ij0;
                                      _ij0[1] = -1;
                                      for (int iij0 = ij0 + 1; iij0 < numsolutions; ++iij0) {
                                        if (j0valid[iij0] &&
                                            IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                                          j0valid[iij0] = false;
                                          _ij0[1] = iij0;
                                          break;
                                        }
                                      }
                                      {
                                        IkReal j2eval[3];
                                        new_r02 = 0;
                                        new_r12 = 0;
                                        new_r20 = 0;
                                        new_r21 = 0;
                                        IkReal x138 = cj0 * cj0;
                                        IkReal x139 = (cj0 * new_r22);
                                        IkReal x140 = ((-1.0) + x138 + (((-1.0) * x138 * (new_r22 * new_r22))));
                                        j2eval[0] = x140;
                                        j2eval[1] = IKsign(x140);
                                        j2eval[2] = ((IKabs((((new_r01 * sj0)) + (((-1.0) * new_r00 * x139))))) +
                                                     (IKabs((((new_r01 * x139)) + ((new_r00 * sj0))))));
                                        if (IKabs(j2eval[0]) < 0.0000010000000000 ||
                                            IKabs(j2eval[1]) < 0.0000010000000000 ||
                                            IKabs(j2eval[2]) < 0.0000010000000000) {
                                          {
                                            IkReal j2eval[1];
                                            new_r02 = 0;
                                            new_r12 = 0;
                                            new_r20 = 0;
                                            new_r21 = 0;
                                            j2eval[0] = new_r22;
                                            if (IKabs(j2eval[0]) < 0.0000010000000000) {
                                              {
                                                IkReal j2eval[2];
                                                new_r02 = 0;
                                                new_r12 = 0;
                                                new_r20 = 0;
                                                new_r21 = 0;
                                                IkReal x141 = new_r22 * new_r22;
                                                j2eval[0] = (((cj0 * x141)) + (((-1.0) * cj0)));
                                                j2eval[1] = ((((-1.0) * sj0)) + ((sj0 * x141)));
                                                if (IKabs(j2eval[0]) < 0.0000010000000000 ||
                                                    IKabs(j2eval[1]) < 0.0000010000000000) {
                                                  {
                                                    IkReal evalcond[1];
                                                    bool bgotonextstatement = true;
                                                    do {
                                                      evalcond[0] = ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((-1.5707963267949) + j0)))),
                                                                             6.28318530717959)));
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j2array[1], cj2array[1], sj2array[1];
                                                          bool j2valid[1] = {false};
                                                          _nj2 = 1;
                                                          if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                    IKsqr(((-1.0) * new_r01)) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j2array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r01));
                                                          sj2array[0] = IKsin(j2array[0]);
                                                          cj2array[0] = IKcos(j2array[0]);
                                                          if (j2array[0] > IKPI) {
                                                            j2array[0] -= IK2PI;
                                                          } else if (j2array[0] < -IKPI) {
                                                            j2array[0] += IK2PI;
                                                          }
                                                          j2valid[0] = true;
                                                          for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                            if (!j2valid[ij2]) {
                                                              continue;
                                                            }
                                                            _ij2[0] = ij2;
                                                            _ij2[1] = -1;
                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                              if (j2valid[iij2] &&
                                                                  IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j2valid[iij2] = false;
                                                                _ij2[1] = iij2;
                                                                break;
                                                              }
                                                            }
                                                            j2 = j2array[ij2];
                                                            cj2 = cj2array[ij2];
                                                            sj2 = sj2array[ij2];
                                                            {
                                                              IkReal evalcond[4];
                                                              IkReal x142 = IKsin(j2);
                                                              IkReal x143 = IKcos(j2);
                                                              evalcond[0] = x142;
                                                              evalcond[1] = ((-1.0) * x143);
                                                              evalcond[2] = ((((-1.0) * x142)) + (((-1.0) * new_r00)));
                                                              evalcond[3] = ((((-1.0) * x143)) + (((-1.0) * new_r01)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 1;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 1;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 1;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j6;
                                                              vinfos[6].indices[0] = _ij6[0];
                                                              vinfos[6].indices[1] = _ij6[1];
                                                              vinfos[6].maxsolutions = _nj6;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement) {
                                                      bool bgotonextstatement = true;
                                                      do {
                                                        evalcond[0] = ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((1.5707963267949) + j0)))),
                                                                               6.28318530717959)));
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                          bgotonextstatement = false;
                                                          {
                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                            bool j2valid[1] = {false};
                                                            _nj2 = 1;
                                                            if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j2array[0] = IKatan2(new_r00, new_r01);
                                                            sj2array[0] = IKsin(j2array[0]);
                                                            cj2array[0] = IKcos(j2array[0]);
                                                            if (j2array[0] > IKPI) {
                                                              j2array[0] -= IK2PI;
                                                            } else if (j2array[0] < -IKPI) {
                                                              j2array[0] += IK2PI;
                                                            }
                                                            j2valid[0] = true;
                                                            for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                              if (!j2valid[ij2]) {
                                                                continue;
                                                              }
                                                              _ij2[0] = ij2;
                                                              _ij2[1] = -1;
                                                              for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                if (j2valid[iij2] &&
                                                                    IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                        IKFAST_SOLUTION_THRESH) {
                                                                  j2valid[iij2] = false;
                                                                  _ij2[1] = iij2;
                                                                  break;
                                                                }
                                                              }
                                                              j2 = j2array[ij2];
                                                              cj2 = cj2array[ij2];
                                                              sj2 = sj2array[ij2];
                                                              {
                                                                IkReal evalcond[4];
                                                                IkReal x144 = IKsin(j2);
                                                                IkReal x145 = IKcos(j2);
                                                                evalcond[0] = x144;
                                                                evalcond[1] = ((-1.0) * x145);
                                                                evalcond[2] = ((((-1.0) * x144)) + new_r00);
                                                                evalcond[3] = ((((-1.0) * x145)) + new_r01);
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 1;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement) {
                                                        bool bgotonextstatement = true;
                                                        do {
                                                          evalcond[0] = ((-3.14159265358979) +
                                                                         (IKfmod(((3.14159265358979) + (IKabs(j0))),
                                                                                 6.28318530717959)));
                                                          if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                            bgotonextstatement = false;
                                                            {
                                                              IkReal j2array[1], cj2array[1], sj2array[1];
                                                              bool j2valid[1] = {false};
                                                              _nj2 = 1;
                                                              if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <=
                                                                      IKFAST_SINCOS_THRESH)
                                                                continue;
                                                              j2array[0] = IKatan2(new_r10, new_r11);
                                                              sj2array[0] = IKsin(j2array[0]);
                                                              cj2array[0] = IKcos(j2array[0]);
                                                              if (j2array[0] > IKPI) {
                                                                j2array[0] -= IK2PI;
                                                              } else if (j2array[0] < -IKPI) {
                                                                j2array[0] += IK2PI;
                                                              }
                                                              j2valid[0] = true;
                                                              for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                if (!j2valid[ij2]) {
                                                                  continue;
                                                                }
                                                                _ij2[0] = ij2;
                                                                _ij2[1] = -1;
                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                  if (j2valid[iij2] &&
                                                                      IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                          IKFAST_SOLUTION_THRESH &&
                                                                      IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                          IKFAST_SOLUTION_THRESH) {
                                                                    j2valid[iij2] = false;
                                                                    _ij2[1] = iij2;
                                                                    break;
                                                                  }
                                                                }
                                                                j2 = j2array[ij2];
                                                                cj2 = cj2array[ij2];
                                                                sj2 = sj2array[ij2];
                                                                {
                                                                  IkReal evalcond[4];
                                                                  IkReal x146 = IKsin(j2);
                                                                  IkReal x147 = IKcos(j2);
                                                                  evalcond[0] = x146;
                                                                  evalcond[1] = ((-1.0) * x147);
                                                                  evalcond[2] = ((((-1.0) * x146)) + new_r10);
                                                                  evalcond[3] = ((((-1.0) * x147)) + new_r11);
                                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                    continue;
                                                                  }
                                                                }

                                                                {
                                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                      7);
                                                                  vinfos[0].jointtype = 1;
                                                                  vinfos[0].foffset = j0;
                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                  vinfos[0].maxsolutions = _nj0;
                                                                  vinfos[1].jointtype = 1;
                                                                  vinfos[1].foffset = j1;
                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                  vinfos[1].maxsolutions = _nj1;
                                                                  vinfos[2].jointtype = 1;
                                                                  vinfos[2].foffset = j2;
                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                  vinfos[2].maxsolutions = _nj2;
                                                                  vinfos[3].jointtype = 1;
                                                                  vinfos[3].foffset = j3;
                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                  vinfos[3].maxsolutions = _nj3;
                                                                  vinfos[4].jointtype = 1;
                                                                  vinfos[4].foffset = j4;
                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                  vinfos[4].maxsolutions = _nj4;
                                                                  vinfos[5].jointtype = 1;
                                                                  vinfos[5].foffset = j5;
                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                  vinfos[5].maxsolutions = _nj5;
                                                                  vinfos[6].jointtype = 1;
                                                                  vinfos[6].foffset = j6;
                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                  vinfos[6].maxsolutions = _nj6;
                                                                  std::vector<int> vfree(0);
                                                                  solutions.AddSolution(vinfos, vfree);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } while (0);
                                                        if (bgotonextstatement) {
                                                          bool bgotonextstatement = true;
                                                          do {
                                                            evalcond[0] =
                                                                ((-3.14159265358979) +
                                                                 (IKfmod(((3.14159265358979) +
                                                                          (IKabs(((-3.14159265358979) + j0)))),
                                                                         6.28318530717959)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                bool j2valid[1] = {false};
                                                                _nj2 = 1;
                                                                if (IKabs(((-1.0) * new_r10)) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(((-1.0) * new_r11)) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                          IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                        IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j2array[0] =
                                                                    IKatan2(((-1.0) * new_r10), ((-1.0) * new_r11));
                                                                sj2array[0] = IKsin(j2array[0]);
                                                                cj2array[0] = IKcos(j2array[0]);
                                                                if (j2array[0] > IKPI) {
                                                                  j2array[0] -= IK2PI;
                                                                } else if (j2array[0] < -IKPI) {
                                                                  j2array[0] += IK2PI;
                                                                }
                                                                j2valid[0] = true;
                                                                for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                  if (!j2valid[ij2]) {
                                                                    continue;
                                                                  }
                                                                  _ij2[0] = ij2;
                                                                  _ij2[1] = -1;
                                                                  for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                    if (j2valid[iij2] &&
                                                                        IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j2valid[iij2] = false;
                                                                      _ij2[1] = iij2;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j2 = j2array[ij2];
                                                                  cj2 = cj2array[ij2];
                                                                  sj2 = sj2array[ij2];
                                                                  {
                                                                    IkReal evalcond[4];
                                                                    IkReal x148 = IKsin(j2);
                                                                    IkReal x149 = IKcos(j2);
                                                                    evalcond[0] = x148;
                                                                    evalcond[1] = ((-1.0) * x149);
                                                                    evalcond[2] =
                                                                        ((((-1.0) * x148)) + (((-1.0) * new_r10)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * x149)) + (((-1.0) * new_r11)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement) {
                                                            bool bgotonextstatement = true;
                                                            do {
                                                              CheckValue<IkReal> x150 = IKPowWithIntegerCheck(
                                                                  ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                              if (!x150.valid) {
                                                                continue;
                                                              }
                                                              if ((x150.value) < -0.00001) continue;
                                                              IkReal gconst0 = ((-1.0) * (IKsqrt(x150.value)));
                                                              evalcond[0] =
                                                                  ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs((cj0 + (((-1.0) * gconst0))))) +
                                                                            (IKabs(((-1.0) + (IKsign(sj0)))))),
                                                                           6.28318530717959)));
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j2eval[1];
                                                                  new_r02 = 0;
                                                                  new_r12 = 0;
                                                                  new_r20 = 0;
                                                                  new_r21 = 0;
                                                                  if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) <
                                                                      -0.00001)
                                                                    continue;
                                                                  sj0 = IKsqrt(
                                                                      ((1.0) + (((-1.0) * (gconst0 * gconst0)))));
                                                                  cj0 = gconst0;
                                                                  if ((gconst0) < -1 - IKFAST_SINCOS_THRESH ||
                                                                      (gconst0) > 1 + IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                  j0 = IKacos(gconst0);
                                                                  CheckValue<IkReal> x151 = IKPowWithIntegerCheck(
                                                                      ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                  if (!x151.valid) {
                                                                    continue;
                                                                  }
                                                                  if ((x151.value) < -0.00001) continue;
                                                                  IkReal gconst0 = ((-1.0) * (IKsqrt(x151.value)));
                                                                  j2eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                  if (IKabs(j2eval[0]) < 0.0000010000000000) {
                                                                    {
                                                                      IkReal j2array[1], cj2array[1], sj2array[1];
                                                                      bool j2valid[1] = {false};
                                                                      _nj2 = 1;
                                                                      if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) <
                                                                          -0.00001)
                                                                        continue;
                                                                      CheckValue<IkReal> x152 =
                                                                          IKPowWithIntegerCheck(gconst0, -1);
                                                                      if (!x152.valid) {
                                                                        continue;
                                                                      }
                                                                      if (IKabs(((((-1.0) * new_r00 *
                                                                                   (IKsqrt(((1.0) + (((-1.0) *
                                                                                                      (gconst0 *
                                                                                                       gconst0)))))))) +
                                                                                 ((gconst0 * new_r10)))) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs((new_r11 * (x152.value))) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr(((((-1.0) * new_r00 *
                                                                                         (IKsqrt(((1.0) +
                                                                                                  (((-1.0) *
                                                                                                    (gconst0 *
                                                                                                     gconst0)))))))) +
                                                                                       ((gconst0 * new_r10)))) +
                                                                                IKsqr((new_r11 * (x152.value))) - 1) <=
                                                                              IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j2array[0] = IKatan2(
                                                                          ((((-1.0) * new_r00 *
                                                                             (IKsqrt((
                                                                                 (1.0) +
                                                                                 (((-1.0) * (gconst0 * gconst0)))))))) +
                                                                           ((gconst0 * new_r10))),
                                                                          (new_r11 * (x152.value)));
                                                                      sj2array[0] = IKsin(j2array[0]);
                                                                      cj2array[0] = IKcos(j2array[0]);
                                                                      if (j2array[0] > IKPI) {
                                                                        j2array[0] -= IK2PI;
                                                                      } else if (j2array[0] < -IKPI) {
                                                                        j2array[0] += IK2PI;
                                                                      }
                                                                      j2valid[0] = true;
                                                                      for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                        if (!j2valid[ij2]) {
                                                                          continue;
                                                                        }
                                                                        _ij2[0] = ij2;
                                                                        _ij2[1] = -1;
                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                          if (j2valid[iij2] &&
                                                                              IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                                  IKFAST_SOLUTION_THRESH) {
                                                                            j2valid[iij2] = false;
                                                                            _ij2[1] = iij2;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j2 = j2array[ij2];
                                                                        cj2 = cj2array[ij2];
                                                                        sj2 = sj2array[ij2];
                                                                        {
                                                                          IkReal evalcond[8];
                                                                          IkReal x153 = IKcos(j2);
                                                                          IkReal x154 = IKsin(j2);
                                                                          IkReal x155 = ((1.0) * gconst0);
                                                                          if ((((1.0) + (((-1.0) * gconst0 * x155)))) <
                                                                              -0.00001)
                                                                            continue;
                                                                          IkReal x156 = IKsqrt(
                                                                              ((1.0) + (((-1.0) * gconst0 * x155))));
                                                                          IkReal x157 = ((1.0) * x156);
                                                                          evalcond[0] = x154;
                                                                          evalcond[1] = ((-1.0) * x153);
                                                                          evalcond[2] =
                                                                              ((((-1.0) * x153 * x155)) + new_r11);
                                                                          evalcond[3] =
                                                                              ((((-1.0) * x154 * x155)) + new_r10);
                                                                          evalcond[4] = (((x153 * x156)) + new_r01);
                                                                          evalcond[5] = (((x154 * x156)) + new_r00);
                                                                          evalcond[6] = ((((-1.0) * x154)) +
                                                                                         ((gconst0 * new_r10)) +
                                                                                         (((-1.0) * new_r00 * x157)));
                                                                          evalcond[7] = ((((-1.0) * x153)) +
                                                                                         ((gconst0 * new_r11)) +
                                                                                         (((-1.0) * new_r01 * x157)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[4]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[5]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[6]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[7]) >
                                                                                  IKFAST_EVALCOND_THRESH) {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 1;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 1;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 1;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j6;
                                                                          vinfos[6].indices[0] = _ij6[0];
                                                                          vinfos[6].indices[1] = _ij6[1];
                                                                          vinfos[6].maxsolutions = _nj6;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }

                                                                  } else {
                                                                    {
                                                                      IkReal j2array[1], cj2array[1], sj2array[1];
                                                                      bool j2valid[1] = {false};
                                                                      _nj2 = 1;
                                                                      CheckValue<IkReal> x158 =
                                                                          IKPowWithIntegerCheck(IKsign(gconst0), -1);
                                                                      if (!x158.valid) {
                                                                        continue;
                                                                      }
                                                                      CheckValue<IkReal> x159 = IKatan2WithCheck(
                                                                          IkReal(new_r10), IkReal(new_r11),
                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                      if (!x159.valid) {
                                                                        continue;
                                                                      }
                                                                      j2array[0] =
                                                                          ((-1.5707963267949) +
                                                                           (((1.5707963267949) * (x158.value))) +
                                                                           (x159.value));
                                                                      sj2array[0] = IKsin(j2array[0]);
                                                                      cj2array[0] = IKcos(j2array[0]);
                                                                      if (j2array[0] > IKPI) {
                                                                        j2array[0] -= IK2PI;
                                                                      } else if (j2array[0] < -IKPI) {
                                                                        j2array[0] += IK2PI;
                                                                      }
                                                                      j2valid[0] = true;
                                                                      for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                        if (!j2valid[ij2]) {
                                                                          continue;
                                                                        }
                                                                        _ij2[0] = ij2;
                                                                        _ij2[1] = -1;
                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                          if (j2valid[iij2] &&
                                                                              IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                                  IKFAST_SOLUTION_THRESH) {
                                                                            j2valid[iij2] = false;
                                                                            _ij2[1] = iij2;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j2 = j2array[ij2];
                                                                        cj2 = cj2array[ij2];
                                                                        sj2 = sj2array[ij2];
                                                                        {
                                                                          IkReal evalcond[8];
                                                                          IkReal x160 = IKcos(j2);
                                                                          IkReal x161 = IKsin(j2);
                                                                          IkReal x162 = ((1.0) * gconst0);
                                                                          if ((((1.0) + (((-1.0) * gconst0 * x162)))) <
                                                                              -0.00001)
                                                                            continue;
                                                                          IkReal x163 = IKsqrt(
                                                                              ((1.0) + (((-1.0) * gconst0 * x162))));
                                                                          IkReal x164 = ((1.0) * x163);
                                                                          evalcond[0] = x161;
                                                                          evalcond[1] = ((-1.0) * x160);
                                                                          evalcond[2] =
                                                                              ((((-1.0) * x160 * x162)) + new_r11);
                                                                          evalcond[3] =
                                                                              ((((-1.0) * x161 * x162)) + new_r10);
                                                                          evalcond[4] = (new_r01 + ((x160 * x163)));
                                                                          evalcond[5] = (((x161 * x163)) + new_r00);
                                                                          evalcond[6] = ((((-1.0) * new_r00 * x164)) +
                                                                                         (((-1.0) * x161)) +
                                                                                         ((gconst0 * new_r10)));
                                                                          evalcond[7] = ((((-1.0) * x160)) +
                                                                                         ((gconst0 * new_r11)) +
                                                                                         (((-1.0) * new_r01 * x164)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[4]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[5]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[6]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[7]) >
                                                                                  IKFAST_EVALCOND_THRESH) {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 1;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 1;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 1;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j6;
                                                                          vinfos[6].indices[0] = _ij6[0];
                                                                          vinfos[6].indices[1] = _ij6[1];
                                                                          vinfos[6].maxsolutions = _nj6;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement) {
                                                              bool bgotonextstatement = true;
                                                              do {
                                                                CheckValue<IkReal> x165 = IKPowWithIntegerCheck(
                                                                    ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                if (!x165.valid) {
                                                                  continue;
                                                                }
                                                                if ((x165.value) < -0.00001) continue;
                                                                IkReal gconst0 = ((-1.0) * (IKsqrt(x165.value)));
                                                                evalcond[0] =
                                                                    ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((1.0) + (IKsign(sj0))))) +
                                                                              (IKabs((cj0 + (((-1.0) * gconst0)))))),
                                                                             6.28318530717959)));
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j2eval[1];
                                                                    new_r02 = 0;
                                                                    new_r12 = 0;
                                                                    new_r20 = 0;
                                                                    new_r21 = 0;
                                                                    if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) <
                                                                        -0.00001)
                                                                      continue;
                                                                    sj0 =
                                                                        ((-1.0) *
                                                                         (IKsqrt(((1.0) +
                                                                                  (((-1.0) * (gconst0 * gconst0)))))));
                                                                    cj0 = gconst0;
                                                                    if ((gconst0) < -1 - IKFAST_SINCOS_THRESH ||
                                                                        (gconst0) > 1 + IKFAST_SINCOS_THRESH)
                                                                      continue;
                                                                    j0 = ((-1.0) * (IKacos(gconst0)));
                                                                    CheckValue<IkReal> x166 = IKPowWithIntegerCheck(
                                                                        ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                    if (!x166.valid) {
                                                                      continue;
                                                                    }
                                                                    if ((x166.value) < -0.00001) continue;
                                                                    IkReal gconst0 = ((-1.0) * (IKsqrt(x166.value)));
                                                                    j2eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000) {
                                                                      {
                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                        bool j2valid[1] = {false};
                                                                        _nj2 = 1;
                                                                        if ((((1.0) +
                                                                              (((-1.0) * (gconst0 * gconst0))))) <
                                                                            -0.00001)
                                                                          continue;
                                                                        CheckValue<IkReal> x167 =
                                                                            IKPowWithIntegerCheck(gconst0, -1);
                                                                        if (!x167.valid) {
                                                                          continue;
                                                                        }
                                                                        if (IKabs((
                                                                                ((new_r00 *
                                                                                  (IKsqrt(((1.0) +
                                                                                           (((-1.0) * (gconst0 *
                                                                                                       gconst0)))))))) +
                                                                                ((gconst0 * new_r10)))) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs((new_r11 * (x167.value))) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(IKsqr((((new_r00 *
                                                                                           (IKsqrt(((1.0) +
                                                                                                    (((-1.0) *
                                                                                                      (gconst0 *
                                                                                                       gconst0)))))))) +
                                                                                         ((gconst0 * new_r10)))) +
                                                                                  IKsqr((new_r11 * (x167.value))) -
                                                                                  1) <= IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j2array[0] = IKatan2(
                                                                            (((new_r00 *
                                                                               (IKsqrt(((1.0) +
                                                                                        (((-1.0) *
                                                                                          (gconst0 * gconst0)))))))) +
                                                                             ((gconst0 * new_r10))),
                                                                            (new_r11 * (x167.value)));
                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                        if (j2array[0] > IKPI) {
                                                                          j2array[0] -= IK2PI;
                                                                        } else if (j2array[0] < -IKPI) {
                                                                          j2array[0] += IK2PI;
                                                                        }
                                                                        j2valid[0] = true;
                                                                        for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                          if (!j2valid[ij2]) {
                                                                            continue;
                                                                          }
                                                                          _ij2[0] = ij2;
                                                                          _ij2[1] = -1;
                                                                          for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                            if (j2valid[iij2] &&
                                                                                IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                                    IKFAST_SOLUTION_THRESH) {
                                                                              j2valid[iij2] = false;
                                                                              _ij2[1] = iij2;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j2 = j2array[ij2];
                                                                          cj2 = cj2array[ij2];
                                                                          sj2 = sj2array[ij2];
                                                                          {
                                                                            IkReal evalcond[8];
                                                                            IkReal x168 = IKcos(j2);
                                                                            IkReal x169 = IKsin(j2);
                                                                            IkReal x170 = ((1.0) * x169);
                                                                            IkReal x171 = ((1.0) * x168);
                                                                            if ((((1.0) +
                                                                                  (((-1.0) * (gconst0 * gconst0))))) <
                                                                                -0.00001)
                                                                              continue;
                                                                            IkReal x172 = IKsqrt(
                                                                                ((1.0) +
                                                                                 (((-1.0) * (gconst0 * gconst0)))));
                                                                            evalcond[0] = x169;
                                                                            evalcond[1] = ((-1.0) * x168);
                                                                            evalcond[2] =
                                                                                (new_r11 + (((-1.0) * gconst0 * x171)));
                                                                            evalcond[3] =
                                                                                (new_r10 + (((-1.0) * gconst0 * x170)));
                                                                            evalcond[4] =
                                                                                ((((-1.0) * x171 * x172)) + new_r01);
                                                                            evalcond[5] =
                                                                                ((((-1.0) * x170 * x172)) + new_r00);
                                                                            evalcond[6] = (((new_r00 * x172)) +
                                                                                           (((-1.0) * x170)) +
                                                                                           ((gconst0 * new_r10)));
                                                                            evalcond[7] = (((new_r01 * x172)) +
                                                                                           (((-1.0) * x171)) +
                                                                                           ((gconst0 * new_r11)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[6]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[7]) >
                                                                                    IKFAST_EVALCOND_THRESH) {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<
                                                                                IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }

                                                                    } else {
                                                                      {
                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                        bool j2valid[1] = {false};
                                                                        _nj2 = 1;
                                                                        CheckValue<IkReal> x173 =
                                                                            IKPowWithIntegerCheck(IKsign(gconst0), -1);
                                                                        if (!x173.valid) {
                                                                          continue;
                                                                        }
                                                                        CheckValue<IkReal> x174 = IKatan2WithCheck(
                                                                            IkReal(new_r10), IkReal(new_r11),
                                                                            IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x174.valid) {
                                                                          continue;
                                                                        }
                                                                        j2array[0] =
                                                                            ((-1.5707963267949) +
                                                                             (((1.5707963267949) * (x173.value))) +
                                                                             (x174.value));
                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                        if (j2array[0] > IKPI) {
                                                                          j2array[0] -= IK2PI;
                                                                        } else if (j2array[0] < -IKPI) {
                                                                          j2array[0] += IK2PI;
                                                                        }
                                                                        j2valid[0] = true;
                                                                        for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                          if (!j2valid[ij2]) {
                                                                            continue;
                                                                          }
                                                                          _ij2[0] = ij2;
                                                                          _ij2[1] = -1;
                                                                          for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                            if (j2valid[iij2] &&
                                                                                IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                                    IKFAST_SOLUTION_THRESH) {
                                                                              j2valid[iij2] = false;
                                                                              _ij2[1] = iij2;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j2 = j2array[ij2];
                                                                          cj2 = cj2array[ij2];
                                                                          sj2 = sj2array[ij2];
                                                                          {
                                                                            IkReal evalcond[8];
                                                                            IkReal x175 = IKcos(j2);
                                                                            IkReal x176 = IKsin(j2);
                                                                            IkReal x177 = ((1.0) * x176);
                                                                            IkReal x178 = ((1.0) * x175);
                                                                            if ((((1.0) +
                                                                                  (((-1.0) * (gconst0 * gconst0))))) <
                                                                                -0.00001)
                                                                              continue;
                                                                            IkReal x179 = IKsqrt(
                                                                                ((1.0) +
                                                                                 (((-1.0) * (gconst0 * gconst0)))));
                                                                            evalcond[0] = x176;
                                                                            evalcond[1] = ((-1.0) * x175);
                                                                            evalcond[2] =
                                                                                (new_r11 + (((-1.0) * gconst0 * x178)));
                                                                            evalcond[3] =
                                                                                (new_r10 + (((-1.0) * gconst0 * x177)));
                                                                            evalcond[4] =
                                                                                ((((-1.0) * x178 * x179)) + new_r01);
                                                                            evalcond[5] =
                                                                                ((((-1.0) * x177 * x179)) + new_r00);
                                                                            evalcond[6] = (((new_r00 * x179)) +
                                                                                           (((-1.0) * x177)) +
                                                                                           ((gconst0 * new_r10)));
                                                                            evalcond[7] = (((new_r01 * x179)) +
                                                                                           (((-1.0) * x178)) +
                                                                                           ((gconst0 * new_r11)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[6]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[7]) >
                                                                                    IKFAST_EVALCOND_THRESH) {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<
                                                                                IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement) {
                                                                bool bgotonextstatement = true;
                                                                do {
                                                                  CheckValue<IkReal> x180 = IKPowWithIntegerCheck(
                                                                      ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                  if (!x180.valid) {
                                                                    continue;
                                                                  }
                                                                  if ((x180.value) < -0.00001) continue;
                                                                  IkReal gconst1 = IKsqrt(x180.value);
                                                                  evalcond[0] =
                                                                      ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs((cj0 + (((-1.0) * gconst1))))) +
                                                                                (IKabs(((-1.0) + (IKsign(sj0)))))),
                                                                               6.28318530717959)));
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j2eval[1];
                                                                      new_r02 = 0;
                                                                      new_r12 = 0;
                                                                      new_r20 = 0;
                                                                      new_r21 = 0;
                                                                      if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) <
                                                                          -0.00001)
                                                                        continue;
                                                                      sj0 = IKsqrt(
                                                                          ((1.0) + (((-1.0) * (gconst1 * gconst1)))));
                                                                      cj0 = gconst1;
                                                                      if ((gconst1) < -1 - IKFAST_SINCOS_THRESH ||
                                                                          (gconst1) > 1 + IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j0 = IKacos(gconst1);
                                                                      CheckValue<IkReal> x181 = IKPowWithIntegerCheck(
                                                                          ((1.0) + (((-1.0) * (new_r22 * new_r22)))),
                                                                          -1);
                                                                      if (!x181.valid) {
                                                                        continue;
                                                                      }
                                                                      if ((x181.value) < -0.00001) continue;
                                                                      IkReal gconst1 = IKsqrt(x181.value);
                                                                      j2eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                      if (IKabs(j2eval[0]) < 0.0000010000000000) {
                                                                        {
                                                                          IkReal j2array[1], cj2array[1], sj2array[1];
                                                                          bool j2valid[1] = {false};
                                                                          _nj2 = 1;
                                                                          if ((((1.0) +
                                                                                (((-1.0) * (gconst1 * gconst1))))) <
                                                                              -0.00001)
                                                                            continue;
                                                                          CheckValue<IkReal> x182 =
                                                                              IKPowWithIntegerCheck(gconst1, -1);
                                                                          if (!x182.valid) {
                                                                            continue;
                                                                          }
                                                                          if (IKabs((((gconst1 * new_r10)) +
                                                                                     (((-1.0) * new_r00 *
                                                                                       (IKsqrt(((1.0) +
                                                                                                (((-1.0) *
                                                                                                  (gconst1 *
                                                                                                   gconst1)))))))))) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs((new_r11 * (x182.value))) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(
                                                                                  IKsqr(
                                                                                      (((gconst1 * new_r10)) +
                                                                                       (((-1.0) * new_r00 *
                                                                                         (IKsqrt(((1.0) +
                                                                                                  (((-1.0) *
                                                                                                    (gconst1 *
                                                                                                     gconst1)))))))))) +
                                                                                  IKsqr((new_r11 * (x182.value))) -
                                                                                  1) <= IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                          j2array[0] = IKatan2(
                                                                              (((gconst1 * new_r10)) +
                                                                               (((-1.0) * new_r00 *
                                                                                 (IKsqrt(((1.0) +
                                                                                          (((-1.0) *
                                                                                            (gconst1 * gconst1))))))))),
                                                                              (new_r11 * (x182.value)));
                                                                          sj2array[0] = IKsin(j2array[0]);
                                                                          cj2array[0] = IKcos(j2array[0]);
                                                                          if (j2array[0] > IKPI) {
                                                                            j2array[0] -= IK2PI;
                                                                          } else if (j2array[0] < -IKPI) {
                                                                            j2array[0] += IK2PI;
                                                                          }
                                                                          j2valid[0] = true;
                                                                          for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                            if (!j2valid[ij2]) {
                                                                              continue;
                                                                            }
                                                                            _ij2[0] = ij2;
                                                                            _ij2[1] = -1;
                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                              if (j2valid[iij2] &&
                                                                                  IKabs(cj2array[ij2] -
                                                                                        cj2array[iij2]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj2array[ij2] -
                                                                                        sj2array[iij2]) <
                                                                                      IKFAST_SOLUTION_THRESH) {
                                                                                j2valid[iij2] = false;
                                                                                _ij2[1] = iij2;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j2 = j2array[ij2];
                                                                            cj2 = cj2array[ij2];
                                                                            sj2 = sj2array[ij2];
                                                                            {
                                                                              IkReal evalcond[8];
                                                                              IkReal x183 = IKcos(j2);
                                                                              IkReal x184 = IKsin(j2);
                                                                              IkReal x185 = ((1.0) * gconst1);
                                                                              if ((((1.0) + (((-1.0) * gconst1 *
                                                                                              x185)))) < -0.00001)
                                                                                continue;
                                                                              IkReal x186 = IKsqrt((
                                                                                  (1.0) + (((-1.0) * gconst1 * x185))));
                                                                              IkReal x187 = ((1.0) * x186);
                                                                              evalcond[0] = x184;
                                                                              evalcond[1] = ((-1.0) * x183);
                                                                              evalcond[2] =
                                                                                  (new_r11 + (((-1.0) * x183 * x185)));
                                                                              evalcond[3] =
                                                                                  ((((-1.0) * x184 * x185)) + new_r10);
                                                                              evalcond[4] = (new_r01 + ((x183 * x186)));
                                                                              evalcond[5] = (((x184 * x186)) + new_r00);
                                                                              evalcond[6] =
                                                                                  (((gconst1 * new_r10)) +
                                                                                   (((-1.0) * x184)) +
                                                                                   (((-1.0) * new_r00 * x187)));
                                                                              evalcond[7] =
                                                                                  (((gconst1 * new_r11)) +
                                                                                   (((-1.0) * x183)) +
                                                                                   (((-1.0) * new_r01 * x187)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[6]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[7]) >
                                                                                      IKFAST_EVALCOND_THRESH) {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<
                                                                                  IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 1;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 1;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 1;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 1;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j6;
                                                                              vinfos[6].indices[0] = _ij6[0];
                                                                              vinfos[6].indices[1] = _ij6[1];
                                                                              vinfos[6].maxsolutions = _nj6;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }

                                                                      } else {
                                                                        {
                                                                          IkReal j2array[1], cj2array[1], sj2array[1];
                                                                          bool j2valid[1] = {false};
                                                                          _nj2 = 1;
                                                                          CheckValue<IkReal> x188 =
                                                                              IKPowWithIntegerCheck(IKsign(gconst1),
                                                                                                    -1);
                                                                          if (!x188.valid) {
                                                                            continue;
                                                                          }
                                                                          CheckValue<IkReal> x189 = IKatan2WithCheck(
                                                                              IkReal(new_r10), IkReal(new_r11),
                                                                              IKFAST_ATAN2_MAGTHRESH);
                                                                          if (!x189.valid) {
                                                                            continue;
                                                                          }
                                                                          j2array[0] =
                                                                              ((-1.5707963267949) +
                                                                               (((1.5707963267949) * (x188.value))) +
                                                                               (x189.value));
                                                                          sj2array[0] = IKsin(j2array[0]);
                                                                          cj2array[0] = IKcos(j2array[0]);
                                                                          if (j2array[0] > IKPI) {
                                                                            j2array[0] -= IK2PI;
                                                                          } else if (j2array[0] < -IKPI) {
                                                                            j2array[0] += IK2PI;
                                                                          }
                                                                          j2valid[0] = true;
                                                                          for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                            if (!j2valid[ij2]) {
                                                                              continue;
                                                                            }
                                                                            _ij2[0] = ij2;
                                                                            _ij2[1] = -1;
                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                              if (j2valid[iij2] &&
                                                                                  IKabs(cj2array[ij2] -
                                                                                        cj2array[iij2]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj2array[ij2] -
                                                                                        sj2array[iij2]) <
                                                                                      IKFAST_SOLUTION_THRESH) {
                                                                                j2valid[iij2] = false;
                                                                                _ij2[1] = iij2;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j2 = j2array[ij2];
                                                                            cj2 = cj2array[ij2];
                                                                            sj2 = sj2array[ij2];
                                                                            {
                                                                              IkReal evalcond[8];
                                                                              IkReal x190 = IKcos(j2);
                                                                              IkReal x191 = IKsin(j2);
                                                                              IkReal x192 = ((1.0) * gconst1);
                                                                              if ((((1.0) + (((-1.0) * gconst1 *
                                                                                              x192)))) < -0.00001)
                                                                                continue;
                                                                              IkReal x193 = IKsqrt((
                                                                                  (1.0) + (((-1.0) * gconst1 * x192))));
                                                                              IkReal x194 = ((1.0) * x193);
                                                                              evalcond[0] = x191;
                                                                              evalcond[1] = ((-1.0) * x190);
                                                                              evalcond[2] =
                                                                                  ((((-1.0) * x190 * x192)) + new_r11);
                                                                              evalcond[3] =
                                                                                  ((((-1.0) * x191 * x192)) + new_r10);
                                                                              evalcond[4] = (((x190 * x193)) + new_r01);
                                                                              evalcond[5] = (((x191 * x193)) + new_r00);
                                                                              evalcond[6] =
                                                                                  (((gconst1 * new_r10)) +
                                                                                   (((-1.0) * x191)) +
                                                                                   (((-1.0) * new_r00 * x194)));
                                                                              evalcond[7] =
                                                                                  (((gconst1 * new_r11)) +
                                                                                   (((-1.0) * x190)) +
                                                                                   (((-1.0) * new_r01 * x194)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[6]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[7]) >
                                                                                      IKFAST_EVALCOND_THRESH) {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<
                                                                                  IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 1;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 1;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 1;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 1;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j6;
                                                                              vinfos[6].indices[0] = _ij6[0];
                                                                              vinfos[6].indices[1] = _ij6[1];
                                                                              vinfos[6].maxsolutions = _nj6;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement) {
                                                                  bool bgotonextstatement = true;
                                                                  do {
                                                                    CheckValue<IkReal> x195 = IKPowWithIntegerCheck(
                                                                        ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                    if (!x195.valid) {
                                                                      continue;
                                                                    }
                                                                    if ((x195.value) < -0.00001) continue;
                                                                    IkReal gconst1 = IKsqrt(x195.value);
                                                                    evalcond[0] =
                                                                        ((-3.14159265358979) +
                                                                         (IKfmod(
                                                                             ((3.14159265358979) +
                                                                              (IKabs(((1.0) + (IKsign(sj0))))) +
                                                                              (IKabs((cj0 + (((-1.0) * gconst1)))))),
                                                                             6.28318530717959)));
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j2eval[1];
                                                                        new_r02 = 0;
                                                                        new_r12 = 0;
                                                                        new_r20 = 0;
                                                                        new_r21 = 0;
                                                                        if ((((1.0) +
                                                                              (((-1.0) * (gconst1 * gconst1))))) <
                                                                            -0.00001)
                                                                          continue;
                                                                        sj0 = ((-1.0) *
                                                                               (IKsqrt((
                                                                                   (1.0) +
                                                                                   (((-1.0) * (gconst1 * gconst1)))))));
                                                                        cj0 = gconst1;
                                                                        if ((gconst1) < -1 - IKFAST_SINCOS_THRESH ||
                                                                            (gconst1) > 1 + IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j0 = ((-1.0) * (IKacos(gconst1)));
                                                                        CheckValue<IkReal> x196 = IKPowWithIntegerCheck(
                                                                            ((1.0) + (((-1.0) * (new_r22 * new_r22)))),
                                                                            -1);
                                                                        if (!x196.valid) {
                                                                          continue;
                                                                        }
                                                                        if ((x196.value) < -0.00001) continue;
                                                                        IkReal gconst1 = IKsqrt(x196.value);
                                                                        j2eval[0] =
                                                                            ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                        if (IKabs(j2eval[0]) < 0.0000010000000000) {
                                                                          {
                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                            bool j2valid[1] = {false};
                                                                            _nj2 = 1;
                                                                            if ((((1.0) +
                                                                                  (((-1.0) * (gconst1 * gconst1))))) <
                                                                                -0.00001)
                                                                              continue;
                                                                            CheckValue<IkReal> x197 =
                                                                                IKPowWithIntegerCheck(gconst1, -1);
                                                                            if (!x197.valid) {
                                                                              continue;
                                                                            }
                                                                            if (IKabs((((gconst1 * new_r10)) +
                                                                                       ((new_r00 *
                                                                                         (IKsqrt(((1.0) +
                                                                                                  (((-1.0) *
                                                                                                    (gconst1 *
                                                                                                     gconst1)))))))))) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs((new_r11 * (x197.value))) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(
                                                                                    IKsqr((((gconst1 * new_r10)) +
                                                                                           ((new_r00 *
                                                                                             (IKsqrt(
                                                                                                 ((1.0) +
                                                                                                  (((-1.0) *
                                                                                                    (gconst1 *
                                                                                                     gconst1)))))))))) +
                                                                                    IKsqr((new_r11 * (x197.value))) -
                                                                                    1) <= IKFAST_SINCOS_THRESH)
                                                                              continue;
                                                                            j2array[0] = IKatan2(
                                                                                (((gconst1 * new_r10)) +
                                                                                 ((new_r00 *
                                                                                   (IKsqrt(((1.0) + (((-1.0) *
                                                                                                      (gconst1 *
                                                                                                       gconst1))))))))),
                                                                                (new_r11 * (x197.value)));
                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                            if (j2array[0] > IKPI) {
                                                                              j2array[0] -= IK2PI;
                                                                            } else if (j2array[0] < -IKPI) {
                                                                              j2array[0] += IK2PI;
                                                                            }
                                                                            j2valid[0] = true;
                                                                            for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                              if (!j2valid[ij2]) {
                                                                                continue;
                                                                              }
                                                                              _ij2[0] = ij2;
                                                                              _ij2[1] = -1;
                                                                              for (int iij2 = ij2 + 1; iij2 < 1;
                                                                                   ++iij2) {
                                                                                if (j2valid[iij2] &&
                                                                                    IKabs(cj2array[ij2] -
                                                                                          cj2array[iij2]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj2array[ij2] -
                                                                                          sj2array[iij2]) <
                                                                                        IKFAST_SOLUTION_THRESH) {
                                                                                  j2valid[iij2] = false;
                                                                                  _ij2[1] = iij2;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j2 = j2array[ij2];
                                                                              cj2 = cj2array[ij2];
                                                                              sj2 = sj2array[ij2];
                                                                              {
                                                                                IkReal evalcond[8];
                                                                                IkReal x198 = IKcos(j2);
                                                                                IkReal x199 = IKsin(j2);
                                                                                IkReal x200 = ((1.0) * x198);
                                                                                IkReal x201 = ((1.0) * x199);
                                                                                if ((((1.0) + (((-1.0) * (gconst1 *
                                                                                                          gconst1))))) <
                                                                                    -0.00001)
                                                                                  continue;
                                                                                IkReal x202 = IKsqrt(
                                                                                    ((1.0) +
                                                                                     (((-1.0) * (gconst1 * gconst1)))));
                                                                                evalcond[0] = x199;
                                                                                evalcond[1] = ((-1.0) * x198);
                                                                                evalcond[2] =
                                                                                    (new_r11 +
                                                                                     (((-1.0) * gconst1 * x200)));
                                                                                evalcond[3] =
                                                                                    (new_r10 +
                                                                                     (((-1.0) * gconst1 * x201)));
                                                                                evalcond[4] =
                                                                                    ((((-1.0) * x200 * x202)) +
                                                                                     new_r01);
                                                                                evalcond[5] =
                                                                                    ((((-1.0) * x201 * x202)) +
                                                                                     new_r00);
                                                                                evalcond[6] = (((gconst1 * new_r10)) +
                                                                                               ((new_r00 * x202)) +
                                                                                               (((-1.0) * x201)));
                                                                                evalcond[7] = (((gconst1 * new_r11)) +
                                                                                               ((new_r01 * x202)) +
                                                                                               (((-1.0) * x200)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[6]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[7]) >
                                                                                        IKFAST_EVALCOND_THRESH) {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 1;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 1;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 1;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }

                                                                        } else {
                                                                          {
                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                            bool j2valid[1] = {false};
                                                                            _nj2 = 1;
                                                                            CheckValue<IkReal> x203 =
                                                                                IKPowWithIntegerCheck(IKsign(gconst1),
                                                                                                      -1);
                                                                            if (!x203.valid) {
                                                                              continue;
                                                                            }
                                                                            CheckValue<IkReal> x204 = IKatan2WithCheck(
                                                                                IkReal(new_r10), IkReal(new_r11),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x204.valid) {
                                                                              continue;
                                                                            }
                                                                            j2array[0] =
                                                                                ((-1.5707963267949) +
                                                                                 (((1.5707963267949) * (x203.value))) +
                                                                                 (x204.value));
                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                            if (j2array[0] > IKPI) {
                                                                              j2array[0] -= IK2PI;
                                                                            } else if (j2array[0] < -IKPI) {
                                                                              j2array[0] += IK2PI;
                                                                            }
                                                                            j2valid[0] = true;
                                                                            for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                              if (!j2valid[ij2]) {
                                                                                continue;
                                                                              }
                                                                              _ij2[0] = ij2;
                                                                              _ij2[1] = -1;
                                                                              for (int iij2 = ij2 + 1; iij2 < 1;
                                                                                   ++iij2) {
                                                                                if (j2valid[iij2] &&
                                                                                    IKabs(cj2array[ij2] -
                                                                                          cj2array[iij2]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj2array[ij2] -
                                                                                          sj2array[iij2]) <
                                                                                        IKFAST_SOLUTION_THRESH) {
                                                                                  j2valid[iij2] = false;
                                                                                  _ij2[1] = iij2;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j2 = j2array[ij2];
                                                                              cj2 = cj2array[ij2];
                                                                              sj2 = sj2array[ij2];
                                                                              {
                                                                                IkReal evalcond[8];
                                                                                IkReal x205 = IKcos(j2);
                                                                                IkReal x206 = IKsin(j2);
                                                                                IkReal x207 = ((1.0) * x205);
                                                                                IkReal x208 = ((1.0) * x206);
                                                                                if ((((1.0) + (((-1.0) * (gconst1 *
                                                                                                          gconst1))))) <
                                                                                    -0.00001)
                                                                                  continue;
                                                                                IkReal x209 = IKsqrt(
                                                                                    ((1.0) +
                                                                                     (((-1.0) * (gconst1 * gconst1)))));
                                                                                evalcond[0] = x206;
                                                                                evalcond[1] = ((-1.0) * x205);
                                                                                evalcond[2] =
                                                                                    (new_r11 +
                                                                                     (((-1.0) * gconst1 * x207)));
                                                                                evalcond[3] =
                                                                                    (new_r10 +
                                                                                     (((-1.0) * gconst1 * x208)));
                                                                                evalcond[4] =
                                                                                    ((((-1.0) * x207 * x209)) +
                                                                                     new_r01);
                                                                                evalcond[5] =
                                                                                    ((((-1.0) * x208 * x209)) +
                                                                                     new_r00);
                                                                                evalcond[6] = (((gconst1 * new_r10)) +
                                                                                               ((new_r00 * x209)) +
                                                                                               (((-1.0) * x208)));
                                                                                evalcond[7] = (((gconst1 * new_r11)) +
                                                                                               ((new_r01 * x209)) +
                                                                                               (((-1.0) * x207)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[6]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[7]) >
                                                                                        IKFAST_EVALCOND_THRESH) {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 1;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 1;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 1;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement) {
                                                                    bool bgotonextstatement = true;
                                                                    do {
                                                                      if (1) {
                                                                        bgotonextstatement = false;
                                                                        continue;  // branch miss [j2]
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement) {
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }

                                                } else {
                                                  {
                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                    bool j2valid[1] = {false};
                                                    _nj2 = 1;
                                                    IkReal x210 = new_r22 * new_r22;
                                                    CheckValue<IkReal> x211 =
                                                        IKPowWithIntegerCheck((((cj0 * x210)) + (((-1.0) * cj0))), -1);
                                                    if (!x211.valid) {
                                                      continue;
                                                    }
                                                    CheckValue<IkReal> x212 =
                                                        IKPowWithIntegerCheck(((((-1.0) * sj0)) + ((sj0 * x210))), -1);
                                                    if (!x212.valid) {
                                                      continue;
                                                    }
                                                    if (IKabs(((x211.value) * (((((-1.0) * new_r01 * new_r22)) +
                                                                                (((-1.0) * new_r10)))))) <
                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(((x212.value) * ((((new_r10 * new_r22)) + new_r01)))) <
                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(((x211.value) * (((((-1.0) * new_r01 * new_r22)) +
                                                                                      (((-1.0) * new_r10)))))) +
                                                              IKsqr(((x212.value) *
                                                                     ((((new_r10 * new_r22)) + new_r01)))) -
                                                              1) <= IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j2array[0] = IKatan2(
                                                        ((x211.value) *
                                                         (((((-1.0) * new_r01 * new_r22)) + (((-1.0) * new_r10))))),
                                                        ((x212.value) * ((((new_r10 * new_r22)) + new_r01))));
                                                    sj2array[0] = IKsin(j2array[0]);
                                                    cj2array[0] = IKcos(j2array[0]);
                                                    if (j2array[0] > IKPI) {
                                                      j2array[0] -= IK2PI;
                                                    } else if (j2array[0] < -IKPI) {
                                                      j2array[0] += IK2PI;
                                                    }
                                                    j2valid[0] = true;
                                                    for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                      if (!j2valid[ij2]) {
                                                        continue;
                                                      }
                                                      _ij2[0] = ij2;
                                                      _ij2[1] = -1;
                                                      for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                        if (j2valid[iij2] &&
                                                            IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                IKFAST_SOLUTION_THRESH) {
                                                          j2valid[iij2] = false;
                                                          _ij2[1] = iij2;
                                                          break;
                                                        }
                                                      }
                                                      j2 = j2array[ij2];
                                                      cj2 = cj2array[ij2];
                                                      sj2 = sj2array[ij2];
                                                      {
                                                        IkReal evalcond[10];
                                                        IkReal x213 = IKsin(j2);
                                                        IkReal x214 = IKcos(j2);
                                                        IkReal x215 = (cj0 * new_r22);
                                                        IkReal x216 = (new_r22 * sj0);
                                                        IkReal x217 = ((1.0) * sj0);
                                                        IkReal x218 = ((1.0) * x214);
                                                        IkReal x219 = ((1.0) * x213);
                                                        evalcond[0] = (((new_r22 * x213)) + ((new_r11 * sj0)) +
                                                                       ((cj0 * new_r01)));
                                                        evalcond[1] = (x213 + ((new_r01 * x215)) + ((new_r11 * x216)));
                                                        evalcond[2] = ((((-1.0) * x219)) + (((-1.0) * new_r00 * x217)) +
                                                                       ((cj0 * new_r10)));
                                                        evalcond[3] = ((((-1.0) * new_r01 * x217)) + (((-1.0) * x218)) +
                                                                       ((cj0 * new_r11)));
                                                        evalcond[4] = (((x213 * x215)) + ((sj0 * x214)) + new_r01);
                                                        evalcond[5] = (((new_r10 * sj0)) + (((-1.0) * new_r22 * x218)) +
                                                                       ((cj0 * new_r00)));
                                                        evalcond[6] =
                                                            (((sj0 * x213)) + new_r00 + (((-1.0) * x215 * x218)));
                                                        evalcond[7] =
                                                            (((x213 * x216)) + (((-1.0) * cj0 * x218)) + new_r11);
                                                        evalcond[8] = (((new_r00 * x215)) + (((-1.0) * x218)) +
                                                                       ((new_r10 * x216)));
                                                        evalcond[9] = ((((-1.0) * cj0 * x219)) + new_r10 +
                                                                       (((-1.0) * x216 * x218)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH) {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        vinfos[3].jointtype = 1;
                                                        vinfos[3].foffset = j3;
                                                        vinfos[3].indices[0] = _ij3[0];
                                                        vinfos[3].indices[1] = _ij3[1];
                                                        vinfos[3].maxsolutions = _nj3;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j4;
                                                        vinfos[4].indices[0] = _ij4[0];
                                                        vinfos[4].indices[1] = _ij4[1];
                                                        vinfos[4].maxsolutions = _nj4;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j5;
                                                        vinfos[5].indices[0] = _ij5[0];
                                                        vinfos[5].indices[1] = _ij5[1];
                                                        vinfos[5].maxsolutions = _nj5;
                                                        vinfos[6].jointtype = 1;
                                                        vinfos[6].foffset = j6;
                                                        vinfos[6].indices[0] = _ij6[0];
                                                        vinfos[6].indices[1] = _ij6[1];
                                                        vinfos[6].maxsolutions = _nj6;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              }

                                            } else {
                                              {
                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                bool j2valid[1] = {false};
                                                _nj2 = 1;
                                                IkReal x220 = ((1.0) * new_r01);
                                                CheckValue<IkReal> x221 = IKPowWithIntegerCheck(new_r22, -1);
                                                if (!x221.valid) {
                                                  continue;
                                                }
                                                if (IKabs(((x221.value) *
                                                           (((((-1.0) * cj0 * x220)) + (((-1.0) * new_r11 * sj0)))))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(((((-1.0) * sj0 * x220)) + ((cj0 * new_r11)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(((x221.value) * (((((-1.0) * cj0 * x220)) +
                                                                                  (((-1.0) * new_r11 * sj0)))))) +
                                                          IKsqr(((((-1.0) * sj0 * x220)) + ((cj0 * new_r11)))) - 1) <=
                                                        IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j2array[0] =
                                                    IKatan2(((x221.value) *
                                                             (((((-1.0) * cj0 * x220)) + (((-1.0) * new_r11 * sj0))))),
                                                            ((((-1.0) * sj0 * x220)) + ((cj0 * new_r11))));
                                                sj2array[0] = IKsin(j2array[0]);
                                                cj2array[0] = IKcos(j2array[0]);
                                                if (j2array[0] > IKPI) {
                                                  j2array[0] -= IK2PI;
                                                } else if (j2array[0] < -IKPI) {
                                                  j2array[0] += IK2PI;
                                                }
                                                j2valid[0] = true;
                                                for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                  if (!j2valid[ij2]) {
                                                    continue;
                                                  }
                                                  _ij2[0] = ij2;
                                                  _ij2[1] = -1;
                                                  for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                    if (j2valid[iij2] &&
                                                        IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                            IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                            IKFAST_SOLUTION_THRESH) {
                                                      j2valid[iij2] = false;
                                                      _ij2[1] = iij2;
                                                      break;
                                                    }
                                                  }
                                                  j2 = j2array[ij2];
                                                  cj2 = cj2array[ij2];
                                                  sj2 = sj2array[ij2];
                                                  {
                                                    IkReal evalcond[10];
                                                    IkReal x222 = IKsin(j2);
                                                    IkReal x223 = IKcos(j2);
                                                    IkReal x224 = (cj0 * new_r22);
                                                    IkReal x225 = (new_r22 * sj0);
                                                    IkReal x226 = ((1.0) * sj0);
                                                    IkReal x227 = ((1.0) * x223);
                                                    IkReal x228 = ((1.0) * x222);
                                                    evalcond[0] =
                                                        (((new_r11 * sj0)) + ((new_r22 * x222)) + ((cj0 * new_r01)));
                                                    evalcond[1] = (((new_r01 * x224)) + x222 + ((new_r11 * x225)));
                                                    evalcond[2] = (((cj0 * new_r10)) + (((-1.0) * x228)) +
                                                                   (((-1.0) * new_r00 * x226)));
                                                    evalcond[3] = ((((-1.0) * new_r01 * x226)) + ((cj0 * new_r11)) +
                                                                   (((-1.0) * x227)));
                                                    evalcond[4] = (((x222 * x224)) + ((sj0 * x223)) + new_r01);
                                                    evalcond[5] = (((new_r10 * sj0)) + (((-1.0) * new_r22 * x227)) +
                                                                   ((cj0 * new_r00)));
                                                    evalcond[6] = ((((-1.0) * x224 * x227)) + ((sj0 * x222)) + new_r00);
                                                    evalcond[7] = ((((-1.0) * cj0 * x227)) + ((x222 * x225)) + new_r11);
                                                    evalcond[8] =
                                                        (((new_r00 * x224)) + ((new_r10 * x225)) + (((-1.0) * x227)));
                                                    evalcond[9] =
                                                        ((((-1.0) * cj0 * x228)) + (((-1.0) * x225 * x227)) + new_r10);
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH) {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 1;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 1;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 1;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 1;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j6;
                                                    vinfos[6].indices[0] = _ij6[0];
                                                    vinfos[6].indices[1] = _ij6[1];
                                                    vinfos[6].maxsolutions = _nj6;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          }

                                        } else {
                                          {
                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                            bool j2valid[1] = {false};
                                            _nj2 = 1;
                                            IkReal x229 = cj0 * cj0;
                                            IkReal x230 = (cj0 * new_r22);
                                            CheckValue<IkReal> x231 = IKatan2WithCheck(
                                                IkReal((((new_r01 * x230)) + ((new_r00 * sj0)))),
                                                IkReal(((((-1.0) * new_r00 * x230)) + ((new_r01 * sj0)))),
                                                IKFAST_ATAN2_MAGTHRESH);
                                            if (!x231.valid) {
                                              continue;
                                            }
                                            CheckValue<IkReal> x232 = IKPowWithIntegerCheck(
                                                IKsign(((-1.0) + x229 + (((-1.0) * x229 * (new_r22 * new_r22))))), -1);
                                            if (!x232.valid) {
                                              continue;
                                            }
                                            j2array[0] = ((-1.5707963267949) + (x231.value) +
                                                          (((1.5707963267949) * (x232.value))));
                                            sj2array[0] = IKsin(j2array[0]);
                                            cj2array[0] = IKcos(j2array[0]);
                                            if (j2array[0] > IKPI) {
                                              j2array[0] -= IK2PI;
                                            } else if (j2array[0] < -IKPI) {
                                              j2array[0] += IK2PI;
                                            }
                                            j2valid[0] = true;
                                            for (int ij2 = 0; ij2 < 1; ++ij2) {
                                              if (!j2valid[ij2]) {
                                                continue;
                                              }
                                              _ij2[0] = ij2;
                                              _ij2[1] = -1;
                                              for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                if (j2valid[iij2] &&
                                                    IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                                  j2valid[iij2] = false;
                                                  _ij2[1] = iij2;
                                                  break;
                                                }
                                              }
                                              j2 = j2array[ij2];
                                              cj2 = cj2array[ij2];
                                              sj2 = sj2array[ij2];
                                              {
                                                IkReal evalcond[10];
                                                IkReal x233 = IKsin(j2);
                                                IkReal x234 = IKcos(j2);
                                                IkReal x235 = (cj0 * new_r22);
                                                IkReal x236 = (new_r22 * sj0);
                                                IkReal x237 = ((1.0) * sj0);
                                                IkReal x238 = ((1.0) * x234);
                                                IkReal x239 = ((1.0) * x233);
                                                evalcond[0] =
                                                    (((new_r11 * sj0)) + ((new_r22 * x233)) + ((cj0 * new_r01)));
                                                evalcond[1] = (((new_r11 * x236)) + ((new_r01 * x235)) + x233);
                                                evalcond[2] = ((((-1.0) * x239)) + ((cj0 * new_r10)) +
                                                               (((-1.0) * new_r00 * x237)));
                                                evalcond[3] = ((((-1.0) * x238)) + (((-1.0) * new_r01 * x237)) +
                                                               ((cj0 * new_r11)));
                                                evalcond[4] = (((sj0 * x234)) + ((x233 * x235)) + new_r01);
                                                evalcond[5] = ((((-1.0) * new_r22 * x238)) + ((new_r10 * sj0)) +
                                                               ((cj0 * new_r00)));
                                                evalcond[6] = (((sj0 * x233)) + (((-1.0) * x235 * x238)) + new_r00);
                                                evalcond[7] = (((x233 * x236)) + (((-1.0) * cj0 * x238)) + new_r11);
                                                evalcond[8] =
                                                    (((new_r10 * x236)) + ((new_r00 * x235)) + (((-1.0) * x238)));
                                                evalcond[9] =
                                                    ((((-1.0) * cj0 * x239)) + (((-1.0) * x236 * x238)) + new_r10);
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH) {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                vinfos[0].jointtype = 1;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 1;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 1;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 1;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                vinfos[6].jointtype = 1;
                                                vinfos[6].foffset = j6;
                                                vinfos[6].indices[0] = _ij6[0];
                                                vinfos[6].indices[1] = _ij6[1];
                                                vinfos[6].maxsolutions = _nj6;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            } while (0);
                            if (bgotonextstatement) {
                              bool bgotonextstatement = true;
                              do {
                                if (1) {
                                  bgotonextstatement = false;
                                  continue;  // branch miss [j0, j2]
                                }
                              } while (0);
                              if (bgotonextstatement) {
                              }
                            }
                          }
                        }
                      }

                    } else {
                      {
                        IkReal j0array[1], cj0array[1], sj0array[1];
                        bool j0valid[1] = {false};
                        _nj0 = 1;
                        CheckValue<IkReal> x241 = IKPowWithIntegerCheck(sj1, -1);
                        if (!x241.valid) {
                          continue;
                        }
                        IkReal x240 = x241.value;
                        CheckValue<IkReal> x242 = IKPowWithIntegerCheck(new_r12, -1);
                        if (!x242.valid) {
                          continue;
                        }
                        if (IKabs((x240 * (x242.value) *
                                   (((1.0) + (((-1.0) * (new_r02 * new_r02))) + (((-1.0) * (cj1 * cj1))))))) <
                                IKFAST_ATAN2_MAGTHRESH &&
                            IKabs((new_r02 * x240)) < IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(IKsqr((x240 * (x242.value) *
                                         (((1.0) + (((-1.0) * (new_r02 * new_r02))) + (((-1.0) * (cj1 * cj1))))))) +
                                  IKsqr((new_r02 * x240)) - 1) <= IKFAST_SINCOS_THRESH)
                          continue;
                        j0array[0] = IKatan2((x240 * (x242.value) *
                                              (((1.0) + (((-1.0) * (new_r02 * new_r02))) + (((-1.0) * (cj1 * cj1)))))),
                                             (new_r02 * x240));
                        sj0array[0] = IKsin(j0array[0]);
                        cj0array[0] = IKcos(j0array[0]);
                        if (j0array[0] > IKPI) {
                          j0array[0] -= IK2PI;
                        } else if (j0array[0] < -IKPI) {
                          j0array[0] += IK2PI;
                        }
                        j0valid[0] = true;
                        for (int ij0 = 0; ij0 < 1; ++ij0) {
                          if (!j0valid[ij0]) {
                            continue;
                          }
                          _ij0[0] = ij0;
                          _ij0[1] = -1;
                          for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                            if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                              j0valid[iij0] = false;
                              _ij0[1] = iij0;
                              break;
                            }
                          }
                          j0 = j0array[ij0];
                          cj0 = cj0array[ij0];
                          sj0 = sj0array[ij0];
                          {
                            IkReal evalcond[8];
                            IkReal x243 = IKcos(j0);
                            IkReal x244 = IKsin(j0);
                            IkReal x245 = ((1.0) * cj1);
                            IkReal x246 = ((1.0) * sj1);
                            IkReal x247 = (new_r12 * x244);
                            IkReal x248 = (new_r02 * x243);
                            evalcond[0] = ((((-1.0) * x243 * x246)) + new_r02);
                            evalcond[1] = (new_r12 + (((-1.0) * x244 * x246)));
                            evalcond[2] = (((new_r12 * x243)) + (((-1.0) * new_r02 * x244)));
                            evalcond[3] = (x247 + x248 + (((-1.0) * x246)));
                            evalcond[4] = ((((-1.0) * new_r22 * x246)) + ((cj1 * x247)) + ((cj1 * x248)));
                            evalcond[5] = ((((-1.0) * new_r10 * x244 * x246)) + (((-1.0) * new_r20 * x245)) +
                                           (((-1.0) * new_r00 * x243 * x246)));
                            evalcond[6] = ((((-1.0) * new_r21 * x245)) + (((-1.0) * new_r01 * x243 * x246)) +
                                           (((-1.0) * new_r11 * x244 * x246)));
                            evalcond[7] = ((1.0) + (((-1.0) * new_r22 * x245)) + (((-1.0) * x246 * x248)) +
                                           (((-1.0) * x246 * x247)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                              continue;
                            }
                          }

                          {
                            IkReal j2eval[3];
                            j2eval[0] = sj1;
                            j2eval[1] = IKsign(sj1);
                            j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 ||
                                IKabs(j2eval[2]) < 0.0000010000000000) {
                              {
                                IkReal j2eval[2];
                                j2eval[0] = sj0;
                                j2eval[1] = sj1;
                                if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000) {
                                  {
                                    IkReal j2eval[3];
                                    j2eval[0] = cj0;
                                    j2eval[1] = cj1;
                                    j2eval[2] = sj1;
                                    if (IKabs(j2eval[0]) < 0.0000010000000000 ||
                                        IKabs(j2eval[1]) < 0.0000010000000000 ||
                                        IKabs(j2eval[2]) < 0.0000010000000000) {
                                      {
                                        IkReal evalcond[5];
                                        bool bgotonextstatement = true;
                                        do {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))),
                                                       6.28318530717959)));
                                          evalcond[1] = new_r02;
                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                              IKabs(evalcond[1]) < 0.0000050000000000) {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j2eval[3];
                                              sj0 = 1.0;
                                              cj0 = 0;
                                              j0 = 1.5707963267949;
                                              j2eval[0] = sj1;
                                              j2eval[1] = IKsign(sj1);
                                              j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                              if (IKabs(j2eval[0]) < 0.0000010000000000 ||
                                                  IKabs(j2eval[1]) < 0.0000010000000000 ||
                                                  IKabs(j2eval[2]) < 0.0000010000000000) {
                                                {
                                                  IkReal j2eval[3];
                                                  sj0 = 1.0;
                                                  cj0 = 0;
                                                  j0 = 1.5707963267949;
                                                  j2eval[0] = cj1;
                                                  j2eval[1] = IKsign(cj1);
                                                  j2eval[2] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                  if (IKabs(j2eval[0]) < 0.0000010000000000 ||
                                                      IKabs(j2eval[1]) < 0.0000010000000000 ||
                                                      IKabs(j2eval[2]) < 0.0000010000000000) {
                                                    {
                                                      IkReal j2eval[1];
                                                      sj0 = 1.0;
                                                      cj0 = 0;
                                                      j0 = 1.5707963267949;
                                                      j2eval[0] = sj1;
                                                      if (IKabs(j2eval[0]) < 0.0000010000000000) {
                                                        {
                                                          IkReal evalcond[4];
                                                          bool bgotonextstatement = true;
                                                          do {
                                                            evalcond[0] = ((-3.14159265358979) +
                                                                           (IKfmod(((3.14159265358979) + (IKabs(j1))),
                                                                                   6.28318530717959)));
                                                            evalcond[1] = new_r20;
                                                            evalcond[2] = new_r12;
                                                            evalcond[3] = new_r21;
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                IKabs(evalcond[3]) < 0.0000050000000000) {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                bool j2valid[1] = {false};
                                                                _nj2 = 1;
                                                                if (IKabs(((-1.0) * new_r11)) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((-1.0) * new_r11)) + IKsqr(new_r10) -
                                                                          1) <= IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j2array[0] = IKatan2(((-1.0) * new_r11), new_r10);
                                                                sj2array[0] = IKsin(j2array[0]);
                                                                cj2array[0] = IKcos(j2array[0]);
                                                                if (j2array[0] > IKPI) {
                                                                  j2array[0] -= IK2PI;
                                                                } else if (j2array[0] < -IKPI) {
                                                                  j2array[0] += IK2PI;
                                                                }
                                                                j2valid[0] = true;
                                                                for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                  if (!j2valid[ij2]) {
                                                                    continue;
                                                                  }
                                                                  _ij2[0] = ij2;
                                                                  _ij2[1] = -1;
                                                                  for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                    if (j2valid[iij2] &&
                                                                        IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j2valid[iij2] = false;
                                                                      _ij2[1] = iij2;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j2 = j2array[ij2];
                                                                  cj2 = cj2array[ij2];
                                                                  sj2 = sj2array[ij2];
                                                                  {
                                                                    IkReal evalcond[4];
                                                                    IkReal x249 = IKsin(j2);
                                                                    IkReal x250 = ((1.0) * (IKcos(j2)));
                                                                    evalcond[0] = (x249 + new_r11);
                                                                    evalcond[1] = (new_r10 + (((-1.0) * x250)));
                                                                    evalcond[2] =
                                                                        ((((-1.0) * x249)) + (((-1.0) * new_r00)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * new_r01)) + (((-1.0) * x250)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement) {
                                                            bool bgotonextstatement = true;
                                                            do {
                                                              evalcond[0] =
                                                                  ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-3.14159265358979) + j1)))),
                                                                           6.28318530717959)));
                                                              evalcond[1] = new_r20;
                                                              evalcond[2] = new_r12;
                                                              evalcond[3] = new_r21;
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                  IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                  IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                  IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j2array[1], cj2array[1], sj2array[1];
                                                                  bool j2valid[1] = {false};
                                                                  _nj2 = 1;
                                                                  if (IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                                      IKabs(((-1.0) * new_r10)) <
                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                      IKabs(IKsqr(new_r11) + IKsqr(((-1.0) * new_r10)) -
                                                                            1) <= IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                  j2array[0] = IKatan2(new_r11, ((-1.0) * new_r10));
                                                                  sj2array[0] = IKsin(j2array[0]);
                                                                  cj2array[0] = IKcos(j2array[0]);
                                                                  if (j2array[0] > IKPI) {
                                                                    j2array[0] -= IK2PI;
                                                                  } else if (j2array[0] < -IKPI) {
                                                                    j2array[0] += IK2PI;
                                                                  }
                                                                  j2valid[0] = true;
                                                                  for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                    if (!j2valid[ij2]) {
                                                                      continue;
                                                                    }
                                                                    _ij2[0] = ij2;
                                                                    _ij2[1] = -1;
                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                      if (j2valid[iij2] &&
                                                                          IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                              IKFAST_SOLUTION_THRESH &&
                                                                          IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                              IKFAST_SOLUTION_THRESH) {
                                                                        j2valid[iij2] = false;
                                                                        _ij2[1] = iij2;
                                                                        break;
                                                                      }
                                                                    }
                                                                    j2 = j2array[ij2];
                                                                    cj2 = cj2array[ij2];
                                                                    sj2 = sj2array[ij2];
                                                                    {
                                                                      IkReal evalcond[4];
                                                                      IkReal x251 = IKcos(j2);
                                                                      IkReal x252 = ((1.0) * (IKsin(j2)));
                                                                      evalcond[0] = (x251 + new_r10);
                                                                      evalcond[1] = (new_r11 + (((-1.0) * x252)));
                                                                      evalcond[2] =
                                                                          ((((-1.0) * new_r00)) + (((-1.0) * x252)));
                                                                      evalcond[3] =
                                                                          ((((-1.0) * new_r01)) + (((-1.0) * x251)));
                                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                        continue;
                                                                      }
                                                                    }

                                                                    {
                                                                      std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                          vinfos(7);
                                                                      vinfos[0].jointtype = 1;
                                                                      vinfos[0].foffset = j0;
                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                      vinfos[0].maxsolutions = _nj0;
                                                                      vinfos[1].jointtype = 1;
                                                                      vinfos[1].foffset = j1;
                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                      vinfos[1].maxsolutions = _nj1;
                                                                      vinfos[2].jointtype = 1;
                                                                      vinfos[2].foffset = j2;
                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                      vinfos[2].maxsolutions = _nj2;
                                                                      vinfos[3].jointtype = 1;
                                                                      vinfos[3].foffset = j3;
                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                      vinfos[3].maxsolutions = _nj3;
                                                                      vinfos[4].jointtype = 1;
                                                                      vinfos[4].foffset = j4;
                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                      vinfos[4].maxsolutions = _nj4;
                                                                      vinfos[5].jointtype = 1;
                                                                      vinfos[5].foffset = j5;
                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                      vinfos[5].maxsolutions = _nj5;
                                                                      vinfos[6].jointtype = 1;
                                                                      vinfos[6].foffset = j6;
                                                                      vinfos[6].indices[0] = _ij6[0];
                                                                      vinfos[6].indices[1] = _ij6[1];
                                                                      vinfos[6].maxsolutions = _nj6;
                                                                      std::vector<int> vfree(0);
                                                                      solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement) {
                                                              bool bgotonextstatement = true;
                                                              do {
                                                                evalcond[0] =
                                                                    ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((-1.5707963267949) + j1)))),
                                                                             6.28318530717959)));
                                                                evalcond[1] = new_r22;
                                                                evalcond[2] = new_r11;
                                                                evalcond[3] = new_r10;
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                    IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                    IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                    IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                    bool j2valid[1] = {false};
                                                                    _nj2 = 1;
                                                                    if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(((-1.0) * new_r20)) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(IKsqr(new_r21) +
                                                                              IKsqr(((-1.0) * new_r20)) - 1) <=
                                                                            IKFAST_SINCOS_THRESH)
                                                                      continue;
                                                                    j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                    if (j2array[0] > IKPI) {
                                                                      j2array[0] -= IK2PI;
                                                                    } else if (j2array[0] < -IKPI) {
                                                                      j2array[0] += IK2PI;
                                                                    }
                                                                    j2valid[0] = true;
                                                                    for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                      if (!j2valid[ij2]) {
                                                                        continue;
                                                                      }
                                                                      _ij2[0] = ij2;
                                                                      _ij2[1] = -1;
                                                                      for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                        if (j2valid[iij2] &&
                                                                            IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                                IKFAST_SOLUTION_THRESH &&
                                                                            IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                                IKFAST_SOLUTION_THRESH) {
                                                                          j2valid[iij2] = false;
                                                                          _ij2[1] = iij2;
                                                                          break;
                                                                        }
                                                                      }
                                                                      j2 = j2array[ij2];
                                                                      cj2 = cj2array[ij2];
                                                                      sj2 = sj2array[ij2];
                                                                      {
                                                                        IkReal evalcond[4];
                                                                        IkReal x253 = IKcos(j2);
                                                                        IkReal x254 = ((1.0) * (IKsin(j2)));
                                                                        evalcond[0] = (x253 + new_r20);
                                                                        evalcond[1] = (new_r21 + (((-1.0) * x254)));
                                                                        evalcond[2] =
                                                                            ((((-1.0) * new_r00)) + (((-1.0) * x254)));
                                                                        evalcond[3] =
                                                                            ((((-1.0) * new_r01)) + (((-1.0) * x253)));
                                                                        if (IKabs(evalcond[0]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[1]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[2]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[3]) >
                                                                                IKFAST_EVALCOND_THRESH) {
                                                                          continue;
                                                                        }
                                                                      }

                                                                      {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                            vinfos(7);
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        vinfos[3].jointtype = 1;
                                                                        vinfos[3].foffset = j3;
                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                        vinfos[3].maxsolutions = _nj3;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j4;
                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                        vinfos[4].maxsolutions = _nj4;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j5;
                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                        vinfos[5].maxsolutions = _nj5;
                                                                        vinfos[6].jointtype = 1;
                                                                        vinfos[6].foffset = j6;
                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                        vinfos[6].maxsolutions = _nj6;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement) {
                                                                bool bgotonextstatement = true;
                                                                do {
                                                                  evalcond[0] =
                                                                      ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((1.5707963267949) + j1)))),
                                                                               6.28318530717959)));
                                                                  evalcond[1] = new_r22;
                                                                  evalcond[2] = new_r11;
                                                                  evalcond[3] = new_r10;
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j2array[1], cj2array[1], sj2array[1];
                                                                      bool j2valid[1] = {false};
                                                                      _nj2 = 1;
                                                                      if (IKabs(((-1.0) * new_r21)) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr(((-1.0) * new_r21)) +
                                                                                IKsqr(new_r20) - 1) <=
                                                                              IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                      sj2array[0] = IKsin(j2array[0]);
                                                                      cj2array[0] = IKcos(j2array[0]);
                                                                      if (j2array[0] > IKPI) {
                                                                        j2array[0] -= IK2PI;
                                                                      } else if (j2array[0] < -IKPI) {
                                                                        j2array[0] += IK2PI;
                                                                      }
                                                                      j2valid[0] = true;
                                                                      for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                        if (!j2valid[ij2]) {
                                                                          continue;
                                                                        }
                                                                        _ij2[0] = ij2;
                                                                        _ij2[1] = -1;
                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                          if (j2valid[iij2] &&
                                                                              IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                                  IKFAST_SOLUTION_THRESH) {
                                                                            j2valid[iij2] = false;
                                                                            _ij2[1] = iij2;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j2 = j2array[ij2];
                                                                        cj2 = cj2array[ij2];
                                                                        sj2 = sj2array[ij2];
                                                                        {
                                                                          IkReal evalcond[4];
                                                                          IkReal x255 = IKsin(j2);
                                                                          IkReal x256 = ((1.0) * (IKcos(j2)));
                                                                          evalcond[0] = (x255 + new_r21);
                                                                          evalcond[1] = (new_r20 + (((-1.0) * x256)));
                                                                          evalcond[2] = ((((-1.0) * new_r00)) +
                                                                                         (((-1.0) * x255)));
                                                                          evalcond[3] = ((((-1.0) * new_r01)) +
                                                                                         (((-1.0) * x256)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH) {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 1;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 1;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 1;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j6;
                                                                          vinfos[6].indices[0] = _ij6[0];
                                                                          vinfos[6].indices[1] = _ij6[1];
                                                                          vinfos[6].maxsolutions = _nj6;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement) {
                                                                  bool bgotonextstatement = true;
                                                                  do {
                                                                    evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                        bool j2valid[1] = {false};
                                                                        _nj2 = 1;
                                                                        if (IKabs(((-1.0) * new_r00)) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(((-1.0) * new_r01)) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                                  IKsqr(((-1.0) * new_r01)) - 1) <=
                                                                                IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j2array[0] = IKatan2(((-1.0) * new_r00),
                                                                                             ((-1.0) * new_r01));
                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                        if (j2array[0] > IKPI) {
                                                                          j2array[0] -= IK2PI;
                                                                        } else if (j2array[0] < -IKPI) {
                                                                          j2array[0] += IK2PI;
                                                                        }
                                                                        j2valid[0] = true;
                                                                        for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                          if (!j2valid[ij2]) {
                                                                            continue;
                                                                          }
                                                                          _ij2[0] = ij2;
                                                                          _ij2[1] = -1;
                                                                          for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                            if (j2valid[iij2] &&
                                                                                IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                                    IKFAST_SOLUTION_THRESH) {
                                                                              j2valid[iij2] = false;
                                                                              _ij2[1] = iij2;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j2 = j2array[ij2];
                                                                          cj2 = cj2array[ij2];
                                                                          sj2 = sj2array[ij2];
                                                                          {
                                                                            IkReal evalcond[6];
                                                                            IkReal x257 = IKsin(j2);
                                                                            IkReal x258 = IKcos(j2);
                                                                            IkReal x259 = ((-1.0) * x258);
                                                                            evalcond[0] = x257;
                                                                            evalcond[1] = (new_r22 * x257);
                                                                            evalcond[2] = x259;
                                                                            evalcond[3] = (new_r22 * x259);
                                                                            evalcond[4] = ((((-1.0) * new_r00)) +
                                                                                           (((-1.0) * x257)));
                                                                            evalcond[5] = ((((-1.0) * new_r01)) +
                                                                                           (((-1.0) * x258)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH) {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<
                                                                                IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement) {
                                                                    bool bgotonextstatement = true;
                                                                    do {
                                                                      if (1) {
                                                                        bgotonextstatement = false;
                                                                        continue;  // branch miss [j2]
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement) {
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }

                                                      } else {
                                                        {
                                                          IkReal j2array[1], cj2array[1], sj2array[1];
                                                          bool j2valid[1] = {false};
                                                          _nj2 = 1;
                                                          CheckValue<IkReal> x260 = IKPowWithIntegerCheck(sj1, -1);
                                                          if (!x260.valid) {
                                                            continue;
                                                          }
                                                          if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(((-1.0) * new_r20 * (x260.value))) <
                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                    IKsqr(((-1.0) * new_r20 * (x260.value))) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j2array[0] = IKatan2(((-1.0) * new_r00),
                                                                               ((-1.0) * new_r20 * (x260.value)));
                                                          sj2array[0] = IKsin(j2array[0]);
                                                          cj2array[0] = IKcos(j2array[0]);
                                                          if (j2array[0] > IKPI) {
                                                            j2array[0] -= IK2PI;
                                                          } else if (j2array[0] < -IKPI) {
                                                            j2array[0] += IK2PI;
                                                          }
                                                          j2valid[0] = true;
                                                          for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                            if (!j2valid[ij2]) {
                                                              continue;
                                                            }
                                                            _ij2[0] = ij2;
                                                            _ij2[1] = -1;
                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                              if (j2valid[iij2] &&
                                                                  IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j2valid[iij2] = false;
                                                                _ij2[1] = iij2;
                                                                break;
                                                              }
                                                            }
                                                            j2 = j2array[ij2];
                                                            cj2 = cj2array[ij2];
                                                            sj2 = sj2array[ij2];
                                                            {
                                                              IkReal evalcond[8];
                                                              IkReal x261 = IKsin(j2);
                                                              IkReal x262 = IKcos(j2);
                                                              IkReal x263 = ((1.0) * sj1);
                                                              IkReal x264 = ((1.0) * x262);
                                                              evalcond[0] = (new_r20 + ((sj1 * x262)));
                                                              evalcond[1] = (((cj1 * x261)) + new_r11);
                                                              evalcond[2] = ((((-1.0) * x261 * x263)) + new_r21);
                                                              evalcond[3] = ((((-1.0) * cj1 * x264)) + new_r10);
                                                              evalcond[4] = ((((-1.0) * x261)) + (((-1.0) * new_r00)));
                                                              evalcond[5] = ((((-1.0) * new_r01)) + (((-1.0) * x264)));
                                                              evalcond[6] = (((cj1 * new_r11)) +
                                                                             (((-1.0) * new_r21 * x263)) + x261);
                                                              evalcond[7] =
                                                                  (((cj1 * new_r10)) + (((-1.0) * new_r20 * x263)) +
                                                                   (((-1.0) * x264)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 1;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 1;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 1;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j6;
                                                              vinfos[6].indices[0] = _ij6[0];
                                                              vinfos[6].indices[1] = _ij6[1];
                                                              vinfos[6].maxsolutions = _nj6;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }

                                                  } else {
                                                    {
                                                      IkReal j2array[1], cj2array[1], sj2array[1];
                                                      bool j2valid[1] = {false};
                                                      _nj2 = 1;
                                                      CheckValue<IkReal> x265 = IKPowWithIntegerCheck(IKsign(cj1), -1);
                                                      if (!x265.valid) {
                                                        continue;
                                                      }
                                                      CheckValue<IkReal> x266 =
                                                          IKatan2WithCheck(IkReal(((-1.0) * new_r11)), IkReal(new_r10),
                                                                           IKFAST_ATAN2_MAGTHRESH);
                                                      if (!x266.valid) {
                                                        continue;
                                                      }
                                                      j2array[0] =
                                                          ((-1.5707963267949) + (((1.5707963267949) * (x265.value))) +
                                                           (x266.value));
                                                      sj2array[0] = IKsin(j2array[0]);
                                                      cj2array[0] = IKcos(j2array[0]);
                                                      if (j2array[0] > IKPI) {
                                                        j2array[0] -= IK2PI;
                                                      } else if (j2array[0] < -IKPI) {
                                                        j2array[0] += IK2PI;
                                                      }
                                                      j2valid[0] = true;
                                                      for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                        if (!j2valid[ij2]) {
                                                          continue;
                                                        }
                                                        _ij2[0] = ij2;
                                                        _ij2[1] = -1;
                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                          if (j2valid[iij2] &&
                                                              IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                  IKFAST_SOLUTION_THRESH) {
                                                            j2valid[iij2] = false;
                                                            _ij2[1] = iij2;
                                                            break;
                                                          }
                                                        }
                                                        j2 = j2array[ij2];
                                                        cj2 = cj2array[ij2];
                                                        sj2 = sj2array[ij2];
                                                        {
                                                          IkReal evalcond[8];
                                                          IkReal x267 = IKsin(j2);
                                                          IkReal x268 = IKcos(j2);
                                                          IkReal x269 = ((1.0) * sj1);
                                                          IkReal x270 = ((1.0) * x268);
                                                          evalcond[0] = (new_r20 + ((sj1 * x268)));
                                                          evalcond[1] = (((cj1 * x267)) + new_r11);
                                                          evalcond[2] = ((((-1.0) * x267 * x269)) + new_r21);
                                                          evalcond[3] = ((((-1.0) * cj1 * x270)) + new_r10);
                                                          evalcond[4] = ((((-1.0) * x267)) + (((-1.0) * new_r00)));
                                                          evalcond[5] = ((((-1.0) * x270)) + (((-1.0) * new_r01)));
                                                          evalcond[6] =
                                                              (((cj1 * new_r11)) + (((-1.0) * new_r21 * x269)) + x267);
                                                          evalcond[7] =
                                                              (((cj1 * new_r10)) + (((-1.0) * new_r20 * x269)) +
                                                               (((-1.0) * x270)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                            continue;
                                                          }
                                                        }

                                                        {
                                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                          vinfos[0].jointtype = 1;
                                                          vinfos[0].foffset = j0;
                                                          vinfos[0].indices[0] = _ij0[0];
                                                          vinfos[0].indices[1] = _ij0[1];
                                                          vinfos[0].maxsolutions = _nj0;
                                                          vinfos[1].jointtype = 1;
                                                          vinfos[1].foffset = j1;
                                                          vinfos[1].indices[0] = _ij1[0];
                                                          vinfos[1].indices[1] = _ij1[1];
                                                          vinfos[1].maxsolutions = _nj1;
                                                          vinfos[2].jointtype = 1;
                                                          vinfos[2].foffset = j2;
                                                          vinfos[2].indices[0] = _ij2[0];
                                                          vinfos[2].indices[1] = _ij2[1];
                                                          vinfos[2].maxsolutions = _nj2;
                                                          vinfos[3].jointtype = 1;
                                                          vinfos[3].foffset = j3;
                                                          vinfos[3].indices[0] = _ij3[0];
                                                          vinfos[3].indices[1] = _ij3[1];
                                                          vinfos[3].maxsolutions = _nj3;
                                                          vinfos[4].jointtype = 1;
                                                          vinfos[4].foffset = j4;
                                                          vinfos[4].indices[0] = _ij4[0];
                                                          vinfos[4].indices[1] = _ij4[1];
                                                          vinfos[4].maxsolutions = _nj4;
                                                          vinfos[5].jointtype = 1;
                                                          vinfos[5].foffset = j5;
                                                          vinfos[5].indices[0] = _ij5[0];
                                                          vinfos[5].indices[1] = _ij5[1];
                                                          vinfos[5].maxsolutions = _nj5;
                                                          vinfos[6].jointtype = 1;
                                                          vinfos[6].foffset = j6;
                                                          vinfos[6].indices[0] = _ij6[0];
                                                          vinfos[6].indices[1] = _ij6[1];
                                                          vinfos[6].maxsolutions = _nj6;
                                                          std::vector<int> vfree(0);
                                                          solutions.AddSolution(vinfos, vfree);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }

                                              } else {
                                                {
                                                  IkReal j2array[1], cj2array[1], sj2array[1];
                                                  bool j2valid[1] = {false};
                                                  _nj2 = 1;
                                                  CheckValue<IkReal> x271 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                  if (!x271.valid) {
                                                    continue;
                                                  }
                                                  CheckValue<IkReal> x272 =
                                                      IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)),
                                                                       IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x272.valid) {
                                                    continue;
                                                  }
                                                  j2array[0] = ((-1.5707963267949) +
                                                                (((1.5707963267949) * (x271.value))) + (x272.value));
                                                  sj2array[0] = IKsin(j2array[0]);
                                                  cj2array[0] = IKcos(j2array[0]);
                                                  if (j2array[0] > IKPI) {
                                                    j2array[0] -= IK2PI;
                                                  } else if (j2array[0] < -IKPI) {
                                                    j2array[0] += IK2PI;
                                                  }
                                                  j2valid[0] = true;
                                                  for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                    if (!j2valid[ij2]) {
                                                      continue;
                                                    }
                                                    _ij2[0] = ij2;
                                                    _ij2[1] = -1;
                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                      if (j2valid[iij2] &&
                                                          IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j2valid[iij2] = false;
                                                        _ij2[1] = iij2;
                                                        break;
                                                      }
                                                    }
                                                    j2 = j2array[ij2];
                                                    cj2 = cj2array[ij2];
                                                    sj2 = sj2array[ij2];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x273 = IKsin(j2);
                                                      IkReal x274 = IKcos(j2);
                                                      IkReal x275 = ((1.0) * sj1);
                                                      IkReal x276 = ((1.0) * x274);
                                                      evalcond[0] = (new_r20 + ((sj1 * x274)));
                                                      evalcond[1] = (((cj1 * x273)) + new_r11);
                                                      evalcond[2] = ((((-1.0) * x273 * x275)) + new_r21);
                                                      evalcond[3] = ((((-1.0) * cj1 * x276)) + new_r10);
                                                      evalcond[4] = ((((-1.0) * x273)) + (((-1.0) * new_r00)));
                                                      evalcond[5] = ((((-1.0) * x276)) + (((-1.0) * new_r01)));
                                                      evalcond[6] =
                                                          (((cj1 * new_r11)) + (((-1.0) * new_r21 * x275)) + x273);
                                                      evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * new_r20 * x275)) +
                                                                     (((-1.0) * x276)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 1;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 1;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 1;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j6;
                                                      vinfos[6].indices[0] = _ij6[0];
                                                      vinfos[6].indices[1] = _ij6[1];
                                                      vinfos[6].maxsolutions = _nj6;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement) {
                                          bool bgotonextstatement = true;
                                          do {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))),
                                                         6.28318530717959)));
                                            evalcond[1] = new_r02;
                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                IKabs(evalcond[1]) < 0.0000050000000000) {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                bool j2valid[1] = {false};
                                                _nj2 = 1;
                                                if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <= IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j2array[0] = IKatan2(new_r00, new_r01);
                                                sj2array[0] = IKsin(j2array[0]);
                                                cj2array[0] = IKcos(j2array[0]);
                                                if (j2array[0] > IKPI) {
                                                  j2array[0] -= IK2PI;
                                                } else if (j2array[0] < -IKPI) {
                                                  j2array[0] += IK2PI;
                                                }
                                                j2valid[0] = true;
                                                for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                  if (!j2valid[ij2]) {
                                                    continue;
                                                  }
                                                  _ij2[0] = ij2;
                                                  _ij2[1] = -1;
                                                  for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                    if (j2valid[iij2] &&
                                                        IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                            IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                            IKFAST_SOLUTION_THRESH) {
                                                      j2valid[iij2] = false;
                                                      _ij2[1] = iij2;
                                                      break;
                                                    }
                                                  }
                                                  j2 = j2array[ij2];
                                                  cj2 = cj2array[ij2];
                                                  sj2 = sj2array[ij2];
                                                  {
                                                    IkReal evalcond[8];
                                                    IkReal x277 = IKcos(j2);
                                                    IkReal x278 = IKsin(j2);
                                                    IkReal x279 = ((1.0) * sj1);
                                                    IkReal x280 = ((1.0) * new_r11);
                                                    IkReal x281 = ((1.0) * new_r10);
                                                    IkReal x282 = ((1.0) * x277);
                                                    evalcond[0] = (new_r20 + ((sj1 * x277)));
                                                    evalcond[1] = ((((-1.0) * x278)) + new_r00);
                                                    evalcond[2] = ((((-1.0) * x282)) + new_r01);
                                                    evalcond[3] = ((((-1.0) * x278 * x279)) + new_r21);
                                                    evalcond[4] = (((cj1 * x278)) + (((-1.0) * x280)));
                                                    evalcond[5] = ((((-1.0) * cj1 * x282)) + (((-1.0) * x281)));
                                                    evalcond[6] =
                                                        ((((-1.0) * new_r21 * x279)) + x278 + (((-1.0) * cj1 * x280)));
                                                    evalcond[7] = ((((-1.0) * cj1 * x281)) +
                                                                   (((-1.0) * new_r20 * x279)) + (((-1.0) * x282)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 1;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 1;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 1;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 1;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j6;
                                                    vinfos[6].indices[0] = _ij6[0];
                                                    vinfos[6].indices[1] = _ij6[1];
                                                    vinfos[6].maxsolutions = _nj6;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement) {
                                            bool bgotonextstatement = true;
                                            do {
                                              evalcond[0] =
                                                  ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))),
                                                           6.28318530717959)));
                                              evalcond[1] = new_r22;
                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                  IKabs(evalcond[1]) < 0.0000050000000000) {
                                                bgotonextstatement = false;
                                                {
                                                  IkReal j2array[1], cj2array[1], sj2array[1];
                                                  bool j2valid[1] = {false};
                                                  _nj2 = 1;
                                                  if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <=
                                                          IKFAST_SINCOS_THRESH)
                                                    continue;
                                                  j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                  sj2array[0] = IKsin(j2array[0]);
                                                  cj2array[0] = IKcos(j2array[0]);
                                                  if (j2array[0] > IKPI) {
                                                    j2array[0] -= IK2PI;
                                                  } else if (j2array[0] < -IKPI) {
                                                    j2array[0] += IK2PI;
                                                  }
                                                  j2valid[0] = true;
                                                  for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                    if (!j2valid[ij2]) {
                                                      continue;
                                                    }
                                                    _ij2[0] = ij2;
                                                    _ij2[1] = -1;
                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                      if (j2valid[iij2] &&
                                                          IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j2valid[iij2] = false;
                                                        _ij2[1] = iij2;
                                                        break;
                                                      }
                                                    }
                                                    j2 = j2array[ij2];
                                                    cj2 = cj2array[ij2];
                                                    sj2 = sj2array[ij2];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x283 = IKcos(j2);
                                                      IkReal x284 = IKsin(j2);
                                                      IkReal x285 = ((1.0) * sj0);
                                                      IkReal x286 = ((1.0) * x284);
                                                      IkReal x287 = ((1.0) * x283);
                                                      evalcond[0] = (x283 + new_r20);
                                                      evalcond[1] = ((((-1.0) * x286)) + new_r21);
                                                      evalcond[2] = (((sj0 * x283)) + new_r01);
                                                      evalcond[3] = (((sj0 * x284)) + new_r00);
                                                      evalcond[4] = ((((-1.0) * cj0 * x287)) + new_r11);
                                                      evalcond[5] = ((((-1.0) * new_r02 * x286)) + new_r10);
                                                      evalcond[6] = ((((-1.0) * new_r00 * x285)) + (((-1.0) * x286)) +
                                                                     ((cj0 * new_r10)));
                                                      evalcond[7] = ((((-1.0) * new_r01 * x285)) + (((-1.0) * x287)) +
                                                                     ((cj0 * new_r11)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 1;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 1;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 1;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j6;
                                                      vinfos[6].indices[0] = _ij6[0];
                                                      vinfos[6].indices[1] = _ij6[1];
                                                      vinfos[6].maxsolutions = _nj6;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            } while (0);
                                            if (bgotonextstatement) {
                                              bool bgotonextstatement = true;
                                              do {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))),
                                                             6.28318530717959)));
                                                evalcond[1] = new_r22;
                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                    IKabs(evalcond[1]) < 0.0000050000000000) {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                    bool j2valid[1] = {false};
                                                    _nj2 = 1;
                                                    if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <=
                                                            IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                    sj2array[0] = IKsin(j2array[0]);
                                                    cj2array[0] = IKcos(j2array[0]);
                                                    if (j2array[0] > IKPI) {
                                                      j2array[0] -= IK2PI;
                                                    } else if (j2array[0] < -IKPI) {
                                                      j2array[0] += IK2PI;
                                                    }
                                                    j2valid[0] = true;
                                                    for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                      if (!j2valid[ij2]) {
                                                        continue;
                                                      }
                                                      _ij2[0] = ij2;
                                                      _ij2[1] = -1;
                                                      for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                        if (j2valid[iij2] &&
                                                            IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                IKFAST_SOLUTION_THRESH) {
                                                          j2valid[iij2] = false;
                                                          _ij2[1] = iij2;
                                                          break;
                                                        }
                                                      }
                                                      j2 = j2array[ij2];
                                                      cj2 = cj2array[ij2];
                                                      sj2 = sj2array[ij2];
                                                      {
                                                        IkReal evalcond[8];
                                                        IkReal x288 = IKcos(j2);
                                                        IkReal x289 = IKsin(j2);
                                                        IkReal x290 = ((1.0) * sj0);
                                                        IkReal x291 = ((1.0) * x288);
                                                        evalcond[0] = (x289 + new_r21);
                                                        evalcond[1] = ((((-1.0) * x291)) + new_r20);
                                                        evalcond[2] = (((sj0 * x288)) + new_r01);
                                                        evalcond[3] = (((sj0 * x289)) + new_r00);
                                                        evalcond[4] = (((new_r02 * x289)) + new_r10);
                                                        evalcond[5] = ((((-1.0) * cj0 * x291)) + new_r11);
                                                        evalcond[6] = ((((-1.0) * x289)) + ((cj0 * new_r10)) +
                                                                       (((-1.0) * new_r00 * x290)));
                                                        evalcond[7] = ((((-1.0) * new_r01 * x290)) + (((-1.0) * x291)) +
                                                                       ((cj0 * new_r11)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        vinfos[3].jointtype = 1;
                                                        vinfos[3].foffset = j3;
                                                        vinfos[3].indices[0] = _ij3[0];
                                                        vinfos[3].indices[1] = _ij3[1];
                                                        vinfos[3].maxsolutions = _nj3;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j4;
                                                        vinfos[4].indices[0] = _ij4[0];
                                                        vinfos[4].indices[1] = _ij4[1];
                                                        vinfos[4].maxsolutions = _nj4;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j5;
                                                        vinfos[5].indices[0] = _ij5[0];
                                                        vinfos[5].indices[1] = _ij5[1];
                                                        vinfos[5].maxsolutions = _nj5;
                                                        vinfos[6].jointtype = 1;
                                                        vinfos[6].foffset = j6;
                                                        vinfos[6].indices[0] = _ij6[0];
                                                        vinfos[6].indices[1] = _ij6[1];
                                                        vinfos[6].maxsolutions = _nj6;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement) {
                                                bool bgotonextstatement = true;
                                                do {
                                                  evalcond[0] =
                                                      ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                  evalcond[1] = new_r20;
                                                  evalcond[2] = new_r02;
                                                  evalcond[3] = new_r12;
                                                  evalcond[4] = new_r21;
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                      IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                      IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                      IKabs(evalcond[3]) < 0.0000050000000000 &&
                                                      IKabs(evalcond[4]) < 0.0000050000000000) {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j2array[1], cj2array[1], sj2array[1];
                                                      bool j2valid[1] = {false};
                                                      _nj2 = 1;
                                                      IkReal x292 = ((1.0) * new_r01);
                                                      if (IKabs(
                                                              ((((-1.0) * cj0 * x292)) + (((-1.0) * new_r00 * sj0)))) <
                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                          IKabs(((((-1.0) * sj0 * x292)) + ((cj0 * new_r00)))) <
                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                          IKabs(IKsqr(((((-1.0) * cj0 * x292)) +
                                                                       (((-1.0) * new_r00 * sj0)))) +
                                                                IKsqr(((((-1.0) * sj0 * x292)) + ((cj0 * new_r00)))) -
                                                                1) <= IKFAST_SINCOS_THRESH)
                                                        continue;
                                                      j2array[0] = IKatan2(
                                                          ((((-1.0) * cj0 * x292)) + (((-1.0) * new_r00 * sj0))),
                                                          ((((-1.0) * sj0 * x292)) + ((cj0 * new_r00))));
                                                      sj2array[0] = IKsin(j2array[0]);
                                                      cj2array[0] = IKcos(j2array[0]);
                                                      if (j2array[0] > IKPI) {
                                                        j2array[0] -= IK2PI;
                                                      } else if (j2array[0] < -IKPI) {
                                                        j2array[0] += IK2PI;
                                                      }
                                                      j2valid[0] = true;
                                                      for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                        if (!j2valid[ij2]) {
                                                          continue;
                                                        }
                                                        _ij2[0] = ij2;
                                                        _ij2[1] = -1;
                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                          if (j2valid[iij2] &&
                                                              IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                  IKFAST_SOLUTION_THRESH) {
                                                            j2valid[iij2] = false;
                                                            _ij2[1] = iij2;
                                                            break;
                                                          }
                                                        }
                                                        j2 = j2array[ij2];
                                                        cj2 = cj2array[ij2];
                                                        sj2 = sj2array[ij2];
                                                        {
                                                          IkReal evalcond[8];
                                                          IkReal x293 = IKsin(j2);
                                                          IkReal x294 = IKcos(j2);
                                                          IkReal x295 = ((1.0) * sj0);
                                                          IkReal x296 = ((1.0) * x294);
                                                          IkReal x297 = (sj0 * x293);
                                                          IkReal x298 = (cj0 * x293);
                                                          IkReal x299 = (cj0 * x296);
                                                          evalcond[0] = (((new_r11 * sj0)) + x293 + ((cj0 * new_r01)));
                                                          evalcond[1] = (((sj0 * x294)) + x298 + new_r01);
                                                          evalcond[2] = (((new_r10 * sj0)) + (((-1.0) * x296)) +
                                                                         ((cj0 * new_r00)));
                                                          evalcond[3] = ((((-1.0) * x293)) + ((cj0 * new_r10)) +
                                                                         (((-1.0) * new_r00 * x295)));
                                                          evalcond[4] = ((((-1.0) * new_r01 * x295)) +
                                                                         (((-1.0) * x296)) + ((cj0 * new_r11)));
                                                          evalcond[5] = ((((-1.0) * x299)) + x297 + new_r00);
                                                          evalcond[6] = ((((-1.0) * x299)) + x297 + new_r11);
                                                          evalcond[7] =
                                                              ((((-1.0) * x298)) + new_r10 + (((-1.0) * x294 * x295)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                            continue;
                                                          }
                                                        }

                                                        {
                                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                          vinfos[0].jointtype = 1;
                                                          vinfos[0].foffset = j0;
                                                          vinfos[0].indices[0] = _ij0[0];
                                                          vinfos[0].indices[1] = _ij0[1];
                                                          vinfos[0].maxsolutions = _nj0;
                                                          vinfos[1].jointtype = 1;
                                                          vinfos[1].foffset = j1;
                                                          vinfos[1].indices[0] = _ij1[0];
                                                          vinfos[1].indices[1] = _ij1[1];
                                                          vinfos[1].maxsolutions = _nj1;
                                                          vinfos[2].jointtype = 1;
                                                          vinfos[2].foffset = j2;
                                                          vinfos[2].indices[0] = _ij2[0];
                                                          vinfos[2].indices[1] = _ij2[1];
                                                          vinfos[2].maxsolutions = _nj2;
                                                          vinfos[3].jointtype = 1;
                                                          vinfos[3].foffset = j3;
                                                          vinfos[3].indices[0] = _ij3[0];
                                                          vinfos[3].indices[1] = _ij3[1];
                                                          vinfos[3].maxsolutions = _nj3;
                                                          vinfos[4].jointtype = 1;
                                                          vinfos[4].foffset = j4;
                                                          vinfos[4].indices[0] = _ij4[0];
                                                          vinfos[4].indices[1] = _ij4[1];
                                                          vinfos[4].maxsolutions = _nj4;
                                                          vinfos[5].jointtype = 1;
                                                          vinfos[5].foffset = j5;
                                                          vinfos[5].indices[0] = _ij5[0];
                                                          vinfos[5].indices[1] = _ij5[1];
                                                          vinfos[5].maxsolutions = _nj5;
                                                          vinfos[6].jointtype = 1;
                                                          vinfos[6].foffset = j6;
                                                          vinfos[6].indices[0] = _ij6[0];
                                                          vinfos[6].indices[1] = _ij6[1];
                                                          vinfos[6].maxsolutions = _nj6;
                                                          std::vector<int> vfree(0);
                                                          solutions.AddSolution(vinfos, vfree);
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement) {
                                                  bool bgotonextstatement = true;
                                                  do {
                                                    evalcond[0] = ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-3.14159265358979) + j1)))),
                                                                           6.28318530717959)));
                                                    evalcond[1] = new_r20;
                                                    evalcond[2] = new_r02;
                                                    evalcond[3] = new_r12;
                                                    evalcond[4] = new_r21;
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[3]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[4]) < 0.0000050000000000) {
                                                      bgotonextstatement = false;
                                                      {
                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                        bool j2valid[1] = {false};
                                                        _nj2 = 1;
                                                        IkReal x300 = ((1.0) * sj0);
                                                        if (IKabs((((cj0 * new_r01)) + (((-1.0) * new_r00 * x300)))) <
                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(((((-1.0) * cj0 * new_r00)) +
                                                                   (((-1.0) * new_r01 * x300)))) <
                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(IKsqr((((cj0 * new_r01)) +
                                                                         (((-1.0) * new_r00 * x300)))) +
                                                                  IKsqr(((((-1.0) * cj0 * new_r00)) +
                                                                         (((-1.0) * new_r01 * x300)))) -
                                                                  1) <= IKFAST_SINCOS_THRESH)
                                                          continue;
                                                        j2array[0] = IKatan2(
                                                            (((cj0 * new_r01)) + (((-1.0) * new_r00 * x300))),
                                                            ((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x300))));
                                                        sj2array[0] = IKsin(j2array[0]);
                                                        cj2array[0] = IKcos(j2array[0]);
                                                        if (j2array[0] > IKPI) {
                                                          j2array[0] -= IK2PI;
                                                        } else if (j2array[0] < -IKPI) {
                                                          j2array[0] += IK2PI;
                                                        }
                                                        j2valid[0] = true;
                                                        for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                          if (!j2valid[ij2]) {
                                                            continue;
                                                          }
                                                          _ij2[0] = ij2;
                                                          _ij2[1] = -1;
                                                          for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                            if (j2valid[iij2] &&
                                                                IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j2valid[iij2] = false;
                                                              _ij2[1] = iij2;
                                                              break;
                                                            }
                                                          }
                                                          j2 = j2array[ij2];
                                                          cj2 = cj2array[ij2];
                                                          sj2 = sj2array[ij2];
                                                          {
                                                            IkReal evalcond[8];
                                                            IkReal x301 = IKsin(j2);
                                                            IkReal x302 = IKcos(j2);
                                                            IkReal x303 = ((1.0) * sj0);
                                                            IkReal x304 = ((1.0) * x301);
                                                            IkReal x305 = (sj0 * x302);
                                                            IkReal x306 = ((1.0) * x302);
                                                            IkReal x307 = (cj0 * x304);
                                                            evalcond[0] =
                                                                (((new_r10 * sj0)) + x302 + ((cj0 * new_r00)));
                                                            evalcond[1] = (((new_r11 * sj0)) + ((cj0 * new_r01)) +
                                                                           (((-1.0) * x304)));
                                                            evalcond[2] = (((cj0 * x302)) + ((sj0 * x301)) + new_r00);
                                                            evalcond[3] = ((((-1.0) * new_r00 * x303)) +
                                                                           ((cj0 * new_r10)) + (((-1.0) * x304)));
                                                            evalcond[4] = ((((-1.0) * new_r01 * x303)) +
                                                                           ((cj0 * new_r11)) + (((-1.0) * x306)));
                                                            evalcond[5] = (x305 + new_r01 + (((-1.0) * x307)));
                                                            evalcond[6] = (x305 + new_r10 + (((-1.0) * x307)));
                                                            evalcond[7] = ((((-1.0) * x301 * x303)) +
                                                                           (((-1.0) * cj0 * x306)) + new_r11);
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                              continue;
                                                            }
                                                          }

                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 1;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 1;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 1;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j6;
                                                            vinfos[6].indices[0] = _ij6[0];
                                                            vinfos[6].indices[1] = _ij6[1];
                                                            vinfos[6].maxsolutions = _nj6;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {
                                                    bool bgotonextstatement = true;
                                                    do {
                                                      evalcond[0] = ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) + (IKabs(j0))),
                                                                             6.28318530717959)));
                                                      evalcond[1] = new_r12;
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                          IKabs(evalcond[1]) < 0.0000050000000000) {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j2array[1], cj2array[1], sj2array[1];
                                                          bool j2valid[1] = {false};
                                                          _nj2 = 1;
                                                          if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j2array[0] = IKatan2(new_r10, new_r11);
                                                          sj2array[0] = IKsin(j2array[0]);
                                                          cj2array[0] = IKcos(j2array[0]);
                                                          if (j2array[0] > IKPI) {
                                                            j2array[0] -= IK2PI;
                                                          } else if (j2array[0] < -IKPI) {
                                                            j2array[0] += IK2PI;
                                                          }
                                                          j2valid[0] = true;
                                                          for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                            if (!j2valid[ij2]) {
                                                              continue;
                                                            }
                                                            _ij2[0] = ij2;
                                                            _ij2[1] = -1;
                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                              if (j2valid[iij2] &&
                                                                  IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j2valid[iij2] = false;
                                                                _ij2[1] = iij2;
                                                                break;
                                                              }
                                                            }
                                                            j2 = j2array[ij2];
                                                            cj2 = cj2array[ij2];
                                                            sj2 = sj2array[ij2];
                                                            {
                                                              IkReal evalcond[8];
                                                              IkReal x308 = IKcos(j2);
                                                              IkReal x309 = IKsin(j2);
                                                              IkReal x310 = ((1.0) * sj1);
                                                              IkReal x311 = ((1.0) * x308);
                                                              evalcond[0] = (new_r20 + ((sj1 * x308)));
                                                              evalcond[1] = ((((-1.0) * x309)) + new_r10);
                                                              evalcond[2] = ((((-1.0) * x311)) + new_r11);
                                                              evalcond[3] = (((cj1 * x309)) + new_r01);
                                                              evalcond[4] = (new_r21 + (((-1.0) * x309 * x310)));
                                                              evalcond[5] = ((((-1.0) * cj1 * x311)) + new_r00);
                                                              evalcond[6] = ((((-1.0) * new_r21 * x310)) +
                                                                             ((cj1 * new_r01)) + x309);
                                                              evalcond[7] = ((((-1.0) * new_r20 * x310)) +
                                                                             ((cj1 * new_r00)) + (((-1.0) * x311)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 1;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 1;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 1;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j6;
                                                              vinfos[6].indices[0] = _ij6[0];
                                                              vinfos[6].indices[1] = _ij6[1];
                                                              vinfos[6].maxsolutions = _nj6;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement) {
                                                      bool bgotonextstatement = true;
                                                      do {
                                                        evalcond[0] = ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((-3.14159265358979) + j0)))),
                                                                               6.28318530717959)));
                                                        evalcond[1] = new_r12;
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                            IKabs(evalcond[1]) < 0.0000050000000000) {
                                                          bgotonextstatement = false;
                                                          {
                                                            IkReal j2eval[3];
                                                            sj0 = 0;
                                                            cj0 = -1.0;
                                                            j0 = 3.14159265358979;
                                                            j2eval[0] = sj1;
                                                            j2eval[1] = IKsign(sj1);
                                                            j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 ||
                                                                IKabs(j2eval[1]) < 0.0000010000000000 ||
                                                                IKabs(j2eval[2]) < 0.0000010000000000) {
                                                              {
                                                                IkReal j2eval[1];
                                                                sj0 = 0;
                                                                cj0 = -1.0;
                                                                j0 = 3.14159265358979;
                                                                j2eval[0] = sj1;
                                                                if (IKabs(j2eval[0]) < 0.0000010000000000) {
                                                                  {
                                                                    IkReal j2eval[2];
                                                                    sj0 = 0;
                                                                    cj0 = -1.0;
                                                                    j0 = 3.14159265358979;
                                                                    j2eval[0] = cj1;
                                                                    j2eval[1] = sj1;
                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 ||
                                                                        IKabs(j2eval[1]) < 0.0000010000000000) {
                                                                      {
                                                                        IkReal evalcond[4];
                                                                        bool bgotonextstatement = true;
                                                                        do {
                                                                          evalcond[0] =
                                                                              ((-3.14159265358979) +
                                                                               (IKfmod(
                                                                                   ((3.14159265358979) +
                                                                                    (IKabs(((-1.5707963267949) + j1)))),
                                                                                   6.28318530717959)));
                                                                          evalcond[1] = new_r22;
                                                                          evalcond[2] = new_r01;
                                                                          evalcond[3] = new_r00;
                                                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                              IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                              IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                              IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                              IkReal j2array[1], cj2array[1],
                                                                                  sj2array[1];
                                                                              bool j2valid[1] = {false};
                                                                              _nj2 = 1;
                                                                              if (IKabs(new_r21) <
                                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                                  IKabs(((-1.0) * new_r20)) <
                                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                                  IKabs(IKsqr(new_r21) +
                                                                                        IKsqr(((-1.0) * new_r20)) -
                                                                                        1) <= IKFAST_SINCOS_THRESH)
                                                                                continue;
                                                                              j2array[0] =
                                                                                  IKatan2(new_r21, ((-1.0) * new_r20));
                                                                              sj2array[0] = IKsin(j2array[0]);
                                                                              cj2array[0] = IKcos(j2array[0]);
                                                                              if (j2array[0] > IKPI) {
                                                                                j2array[0] -= IK2PI;
                                                                              } else if (j2array[0] < -IKPI) {
                                                                                j2array[0] += IK2PI;
                                                                              }
                                                                              j2valid[0] = true;
                                                                              for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                                if (!j2valid[ij2]) {
                                                                                  continue;
                                                                                }
                                                                                _ij2[0] = ij2;
                                                                                _ij2[1] = -1;
                                                                                for (int iij2 = ij2 + 1; iij2 < 1;
                                                                                     ++iij2) {
                                                                                  if (j2valid[iij2] &&
                                                                                      IKabs(cj2array[ij2] -
                                                                                            cj2array[iij2]) <
                                                                                          IKFAST_SOLUTION_THRESH &&
                                                                                      IKabs(sj2array[ij2] -
                                                                                            sj2array[iij2]) <
                                                                                          IKFAST_SOLUTION_THRESH) {
                                                                                    j2valid[iij2] = false;
                                                                                    _ij2[1] = iij2;
                                                                                    break;
                                                                                  }
                                                                                }
                                                                                j2 = j2array[ij2];
                                                                                cj2 = cj2array[ij2];
                                                                                sj2 = sj2array[ij2];
                                                                                {
                                                                                  IkReal evalcond[4];
                                                                                  IkReal x312 = IKcos(j2);
                                                                                  IkReal x313 = ((1.0) * (IKsin(j2)));
                                                                                  evalcond[0] = (x312 + new_r20);
                                                                                  evalcond[1] =
                                                                                      ((((-1.0) * x313)) + new_r21);
                                                                                  evalcond[2] = ((((-1.0) * x313)) +
                                                                                                 (((-1.0) * new_r10)));
                                                                                  evalcond[3] = ((((-1.0) * new_r11)) +
                                                                                                 (((-1.0) * x312)));
                                                                                  if (IKabs(evalcond[0]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[1]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[2]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[3]) >
                                                                                          IKFAST_EVALCOND_THRESH) {
                                                                                    continue;
                                                                                  }
                                                                                }

                                                                                {
                                                                                  std::vector<
                                                                                      IkSingleDOFSolutionBase<IkReal> >
                                                                                      vinfos(7);
                                                                                  vinfos[0].jointtype = 1;
                                                                                  vinfos[0].foffset = j0;
                                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                                  vinfos[0].maxsolutions = _nj0;
                                                                                  vinfos[1].jointtype = 1;
                                                                                  vinfos[1].foffset = j1;
                                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                                  vinfos[1].maxsolutions = _nj1;
                                                                                  vinfos[2].jointtype = 1;
                                                                                  vinfos[2].foffset = j2;
                                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                                  vinfos[2].maxsolutions = _nj2;
                                                                                  vinfos[3].jointtype = 1;
                                                                                  vinfos[3].foffset = j3;
                                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                                  vinfos[3].maxsolutions = _nj3;
                                                                                  vinfos[4].jointtype = 1;
                                                                                  vinfos[4].foffset = j4;
                                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                                  vinfos[4].maxsolutions = _nj4;
                                                                                  vinfos[5].jointtype = 1;
                                                                                  vinfos[5].foffset = j5;
                                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                                  vinfos[5].maxsolutions = _nj5;
                                                                                  vinfos[6].jointtype = 1;
                                                                                  vinfos[6].foffset = j6;
                                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                                  vinfos[6].maxsolutions = _nj6;
                                                                                  std::vector<int> vfree(0);
                                                                                  solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        } while (0);
                                                                        if (bgotonextstatement) {
                                                                          bool bgotonextstatement = true;
                                                                          do {
                                                                            evalcond[0] =
                                                                                ((-3.14159265358979) +
                                                                                 (IKfmod(((3.14159265358979) +
                                                                                          (IKabs(((1.5707963267949) +
                                                                                                  j1)))),
                                                                                         6.28318530717959)));
                                                                            evalcond[1] = new_r22;
                                                                            evalcond[2] = new_r01;
                                                                            evalcond[3] = new_r00;
                                                                            if (IKabs(evalcond[0]) <
                                                                                    0.0000050000000000 &&
                                                                                IKabs(evalcond[1]) <
                                                                                    0.0000050000000000 &&
                                                                                IKabs(evalcond[2]) <
                                                                                    0.0000050000000000 &&
                                                                                IKabs(evalcond[3]) <
                                                                                    0.0000050000000000) {
                                                                              bgotonextstatement = false;
                                                                              {
                                                                                IkReal j2array[1], cj2array[1],
                                                                                    sj2array[1];
                                                                                bool j2valid[1] = {false};
                                                                                _nj2 = 1;
                                                                                if (IKabs(((-1.0) * new_r21)) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs(new_r20) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs(IKsqr(((-1.0) * new_r21)) +
                                                                                          IKsqr(new_r20) - 1) <=
                                                                                        IKFAST_SINCOS_THRESH)
                                                                                  continue;
                                                                                j2array[0] = IKatan2(((-1.0) * new_r21),
                                                                                                     new_r20);
                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                if (j2array[0] > IKPI) {
                                                                                  j2array[0] -= IK2PI;
                                                                                } else if (j2array[0] < -IKPI) {
                                                                                  j2array[0] += IK2PI;
                                                                                }
                                                                                j2valid[0] = true;
                                                                                for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                                  if (!j2valid[ij2]) {
                                                                                    continue;
                                                                                  }
                                                                                  _ij2[0] = ij2;
                                                                                  _ij2[1] = -1;
                                                                                  for (int iij2 = ij2 + 1; iij2 < 1;
                                                                                       ++iij2) {
                                                                                    if (j2valid[iij2] &&
                                                                                        IKabs(cj2array[ij2] -
                                                                                              cj2array[iij2]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj2array[ij2] -
                                                                                              sj2array[iij2]) <
                                                                                            IKFAST_SOLUTION_THRESH) {
                                                                                      j2valid[iij2] = false;
                                                                                      _ij2[1] = iij2;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j2 = j2array[ij2];
                                                                                  cj2 = cj2array[ij2];
                                                                                  sj2 = sj2array[ij2];
                                                                                  {
                                                                                    IkReal evalcond[4];
                                                                                    IkReal x314 = IKsin(j2);
                                                                                    IkReal x315 = ((1.0) * (IKcos(j2)));
                                                                                    evalcond[0] = (x314 + new_r21);
                                                                                    evalcond[1] =
                                                                                        ((((-1.0) * x315)) + new_r20);
                                                                                    evalcond[2] =
                                                                                        ((((-1.0) * new_r10)) +
                                                                                         (((-1.0) * x314)));
                                                                                    evalcond[3] =
                                                                                        ((((-1.0) * x315)) +
                                                                                         (((-1.0) * new_r11)));
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH) {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<IkSingleDOFSolutionBase<
                                                                                        IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 1;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j6;
                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos,
                                                                                                          vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          } while (0);
                                                                          if (bgotonextstatement) {
                                                                            bool bgotonextstatement = true;
                                                                            do {
                                                                              evalcond[0] =
                                                                                  ((-3.14159265358979) +
                                                                                   (IKfmod(((3.14159265358979) +
                                                                                            (IKabs(j1))),
                                                                                           6.28318530717959)));
                                                                              evalcond[1] = new_r20;
                                                                              evalcond[2] = new_r02;
                                                                              evalcond[3] = new_r21;
                                                                              if (IKabs(evalcond[0]) <
                                                                                      0.0000050000000000 &&
                                                                                  IKabs(evalcond[1]) <
                                                                                      0.0000050000000000 &&
                                                                                  IKabs(evalcond[2]) <
                                                                                      0.0000050000000000 &&
                                                                                  IKabs(evalcond[3]) <
                                                                                      0.0000050000000000) {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                  IkReal j2array[1], cj2array[1],
                                                                                      sj2array[1];
                                                                                  bool j2valid[1] = {false};
                                                                                  _nj2 = 1;
                                                                                  if (IKabs(new_r01) <
                                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                                      IKabs(((-1.0) * new_r11)) <
                                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                                      IKabs(IKsqr(new_r01) +
                                                                                            IKsqr(((-1.0) * new_r11)) -
                                                                                            1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                  j2array[0] = IKatan2(
                                                                                      new_r01, ((-1.0) * new_r11));
                                                                                  sj2array[0] = IKsin(j2array[0]);
                                                                                  cj2array[0] = IKcos(j2array[0]);
                                                                                  if (j2array[0] > IKPI) {
                                                                                    j2array[0] -= IK2PI;
                                                                                  } else if (j2array[0] < -IKPI) {
                                                                                    j2array[0] += IK2PI;
                                                                                  }
                                                                                  j2valid[0] = true;
                                                                                  for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                                    if (!j2valid[ij2]) {
                                                                                      continue;
                                                                                    }
                                                                                    _ij2[0] = ij2;
                                                                                    _ij2[1] = -1;
                                                                                    for (int iij2 = ij2 + 1; iij2 < 1;
                                                                                         ++iij2) {
                                                                                      if (j2valid[iij2] &&
                                                                                          IKabs(cj2array[ij2] -
                                                                                                cj2array[iij2]) <
                                                                                              IKFAST_SOLUTION_THRESH &&
                                                                                          IKabs(sj2array[ij2] -
                                                                                                sj2array[iij2]) <
                                                                                              IKFAST_SOLUTION_THRESH) {
                                                                                        j2valid[iij2] = false;
                                                                                        _ij2[1] = iij2;
                                                                                        break;
                                                                                      }
                                                                                    }
                                                                                    j2 = j2array[ij2];
                                                                                    cj2 = cj2array[ij2];
                                                                                    sj2 = sj2array[ij2];
                                                                                    {
                                                                                      IkReal evalcond[4];
                                                                                      IkReal x316 = IKsin(j2);
                                                                                      IkReal x317 =
                                                                                          ((1.0) * (IKcos(j2)));
                                                                                      evalcond[0] =
                                                                                          (x316 + (((-1.0) * new_r01)));
                                                                                      evalcond[1] =
                                                                                          ((((-1.0) * new_r10)) +
                                                                                           (((-1.0) * x316)));
                                                                                      evalcond[2] =
                                                                                          ((((-1.0) * x317)) +
                                                                                           (((-1.0) * new_r11)));
                                                                                      evalcond[3] =
                                                                                          ((((-1.0) * x317)) +
                                                                                           (((-1.0) * new_r00)));
                                                                                      if (IKabs(evalcond[0]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[1]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[2]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[3]) >
                                                                                              IKFAST_EVALCOND_THRESH) {
                                                                                        continue;
                                                                                      }
                                                                                    }

                                                                                    {
                                                                                      std::vector<
                                                                                          IkSingleDOFSolutionBase<
                                                                                              IkReal> >
                                                                                          vinfos(7);
                                                                                      vinfos[0].jointtype = 1;
                                                                                      vinfos[0].foffset = j0;
                                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                                      vinfos[0].maxsolutions = _nj0;
                                                                                      vinfos[1].jointtype = 1;
                                                                                      vinfos[1].foffset = j1;
                                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                                      vinfos[1].maxsolutions = _nj1;
                                                                                      vinfos[2].jointtype = 1;
                                                                                      vinfos[2].foffset = j2;
                                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                                      vinfos[2].maxsolutions = _nj2;
                                                                                      vinfos[3].jointtype = 1;
                                                                                      vinfos[3].foffset = j3;
                                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                                      vinfos[3].maxsolutions = _nj3;
                                                                                      vinfos[4].jointtype = 1;
                                                                                      vinfos[4].foffset = j4;
                                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                                      vinfos[4].maxsolutions = _nj4;
                                                                                      vinfos[5].jointtype = 1;
                                                                                      vinfos[5].foffset = j5;
                                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                                      vinfos[5].maxsolutions = _nj5;
                                                                                      vinfos[6].jointtype = 1;
                                                                                      vinfos[6].foffset = j6;
                                                                                      vinfos[6].indices[0] = _ij6[0];
                                                                                      vinfos[6].indices[1] = _ij6[1];
                                                                                      vinfos[6].maxsolutions = _nj6;
                                                                                      std::vector<int> vfree(0);
                                                                                      solutions.AddSolution(vinfos,
                                                                                                            vfree);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            } while (0);
                                                                            if (bgotonextstatement) {
                                                                              bool bgotonextstatement = true;
                                                                              do {
                                                                                evalcond[0] =
                                                                                    ((-3.14159265358979) +
                                                                                     (IKfmod(
                                                                                         ((3.14159265358979) +
                                                                                          (IKabs(((-3.14159265358979) +
                                                                                                  j1)))),
                                                                                         6.28318530717959)));
                                                                                evalcond[1] = new_r20;
                                                                                evalcond[2] = new_r02;
                                                                                evalcond[3] = new_r21;
                                                                                if (IKabs(evalcond[0]) <
                                                                                        0.0000050000000000 &&
                                                                                    IKabs(evalcond[1]) <
                                                                                        0.0000050000000000 &&
                                                                                    IKabs(evalcond[2]) <
                                                                                        0.0000050000000000 &&
                                                                                    IKabs(evalcond[3]) <
                                                                                        0.0000050000000000) {
                                                                                  bgotonextstatement = false;
                                                                                  {
                                                                                    IkReal j2array[1], cj2array[1],
                                                                                        sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    if (IKabs(((-1.0) * new_r10)) <
                                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                                        IKabs(new_r00) <
                                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                                        IKabs(
                                                                                            IKsqr(((-1.0) * new_r10)) +
                                                                                            IKsqr(new_r00) - 1) <=
                                                                                            IKFAST_SINCOS_THRESH)
                                                                                      continue;
                                                                                    j2array[0] = IKatan2(
                                                                                        ((-1.0) * new_r10), new_r00);
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI) {
                                                                                      j2array[0] -= IK2PI;
                                                                                    } else if (j2array[0] < -IKPI) {
                                                                                      j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                                      if (!j2valid[ij2]) {
                                                                                        continue;
                                                                                      }
                                                                                      _ij2[0] = ij2;
                                                                                      _ij2[1] = -1;
                                                                                      for (int iij2 = ij2 + 1; iij2 < 1;
                                                                                           ++iij2) {
                                                                                        if (j2valid[iij2] &&
                                                                                            IKabs(cj2array[ij2] -
                                                                                                  cj2array[iij2]) <
                                                                                                IKFAST_SOLUTION_THRESH &&
                                                                                            IKabs(sj2array[ij2] -
                                                                                                  sj2array[iij2]) <
                                                                                                IKFAST_SOLUTION_THRESH) {
                                                                                          j2valid[iij2] = false;
                                                                                          _ij2[1] = iij2;
                                                                                          break;
                                                                                        }
                                                                                      }
                                                                                      j2 = j2array[ij2];
                                                                                      cj2 = cj2array[ij2];
                                                                                      sj2 = sj2array[ij2];
                                                                                      {
                                                                                        IkReal evalcond[4];
                                                                                        IkReal x318 = IKcos(j2);
                                                                                        IkReal x319 =
                                                                                            ((1.0) * (IKsin(j2)));
                                                                                        evalcond[0] =
                                                                                            (x318 +
                                                                                             (((-1.0) * new_r00)));
                                                                                        evalcond[1] =
                                                                                            ((((-1.0) * x319)) +
                                                                                             (((-1.0) * new_r10)));
                                                                                        evalcond[2] =
                                                                                            ((((-1.0) * new_r11)) +
                                                                                             (((-1.0) * x318)));
                                                                                        evalcond[3] =
                                                                                            ((((-1.0) * x319)) +
                                                                                             (((-1.0) * new_r01)));
                                                                                        if (IKabs(evalcond[0]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[1]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[2]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[3]) >
                                                                                                IKFAST_EVALCOND_THRESH) {
                                                                                          continue;
                                                                                        }
                                                                                      }

                                                                                      {
                                                                                        std::vector<
                                                                                            IkSingleDOFSolutionBase<
                                                                                                IkReal> >
                                                                                            vinfos(7);
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 1;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 1;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 1;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j6;
                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos,
                                                                                                              vfree);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              } while (0);
                                                                              if (bgotonextstatement) {
                                                                                bool bgotonextstatement = true;
                                                                                do {
                                                                                  evalcond[0] = ((IKabs(new_r20)) +
                                                                                                 (IKabs(new_r21)));
                                                                                  if (IKabs(evalcond[0]) <
                                                                                      0.0000050000000000) {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                      IkReal j2array[1], cj2array[1],
                                                                                          sj2array[1];
                                                                                      bool j2valid[1] = {false};
                                                                                      _nj2 = 1;
                                                                                      if (IKabs(((-1.0) * new_r10)) <
                                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                                          IKabs(((-1.0) * new_r11)) <
                                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                                          IKabs(IKsqr(((-1.0) *
                                                                                                       new_r10)) +
                                                                                                IKsqr(((-1.0) *
                                                                                                       new_r11)) -
                                                                                                1) <=
                                                                                              IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                      j2array[0] =
                                                                                          IKatan2(((-1.0) * new_r10),
                                                                                                  ((-1.0) * new_r11));
                                                                                      sj2array[0] = IKsin(j2array[0]);
                                                                                      cj2array[0] = IKcos(j2array[0]);
                                                                                      if (j2array[0] > IKPI) {
                                                                                        j2array[0] -= IK2PI;
                                                                                      } else if (j2array[0] < -IKPI) {
                                                                                        j2array[0] += IK2PI;
                                                                                      }
                                                                                      j2valid[0] = true;
                                                                                      for (int ij2 = 0; ij2 < 1;
                                                                                           ++ij2) {
                                                                                        if (!j2valid[ij2]) {
                                                                                          continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1;
                                                                                             iij2 < 1; ++iij2) {
                                                                                          if (j2valid[iij2] &&
                                                                                              IKabs(cj2array[ij2] -
                                                                                                    cj2array[iij2]) <
                                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                                              IKabs(sj2array[ij2] -
                                                                                                    sj2array[iij2]) <
                                                                                                  IKFAST_SOLUTION_THRESH) {
                                                                                            j2valid[iij2] = false;
                                                                                            _ij2[1] = iij2;
                                                                                            break;
                                                                                          }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                          IkReal evalcond[6];
                                                                                          IkReal x320 = IKsin(j2);
                                                                                          IkReal x321 = IKcos(j2);
                                                                                          IkReal x322 = ((-1.0) * x321);
                                                                                          evalcond[0] = x320;
                                                                                          evalcond[1] =
                                                                                              (new_r22 * x320);
                                                                                          evalcond[2] = x322;
                                                                                          evalcond[3] =
                                                                                              (new_r22 * x322);
                                                                                          evalcond[4] =
                                                                                              ((((-1.0) * x320)) +
                                                                                               (((-1.0) * new_r10)));
                                                                                          evalcond[5] =
                                                                                              ((((-1.0) * x321)) +
                                                                                               (((-1.0) * new_r11)));
                                                                                          if (IKabs(evalcond[0]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[1]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[2]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[3]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[4]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[5]) >
                                                                                                  IKFAST_EVALCOND_THRESH) {
                                                                                            continue;
                                                                                          }
                                                                                        }

                                                                                        {
                                                                                          std::vector<
                                                                                              IkSingleDOFSolutionBase<
                                                                                                  IkReal> >
                                                                                              vinfos(7);
                                                                                          vinfos[0].jointtype = 1;
                                                                                          vinfos[0].foffset = j0;
                                                                                          vinfos[0].indices[0] =
                                                                                              _ij0[0];
                                                                                          vinfos[0].indices[1] =
                                                                                              _ij0[1];
                                                                                          vinfos[0].maxsolutions = _nj0;
                                                                                          vinfos[1].jointtype = 1;
                                                                                          vinfos[1].foffset = j1;
                                                                                          vinfos[1].indices[0] =
                                                                                              _ij1[0];
                                                                                          vinfos[1].indices[1] =
                                                                                              _ij1[1];
                                                                                          vinfos[1].maxsolutions = _nj1;
                                                                                          vinfos[2].jointtype = 1;
                                                                                          vinfos[2].foffset = j2;
                                                                                          vinfos[2].indices[0] =
                                                                                              _ij2[0];
                                                                                          vinfos[2].indices[1] =
                                                                                              _ij2[1];
                                                                                          vinfos[2].maxsolutions = _nj2;
                                                                                          vinfos[3].jointtype = 1;
                                                                                          vinfos[3].foffset = j3;
                                                                                          vinfos[3].indices[0] =
                                                                                              _ij3[0];
                                                                                          vinfos[3].indices[1] =
                                                                                              _ij3[1];
                                                                                          vinfos[3].maxsolutions = _nj3;
                                                                                          vinfos[4].jointtype = 1;
                                                                                          vinfos[4].foffset = j4;
                                                                                          vinfos[4].indices[0] =
                                                                                              _ij4[0];
                                                                                          vinfos[4].indices[1] =
                                                                                              _ij4[1];
                                                                                          vinfos[4].maxsolutions = _nj4;
                                                                                          vinfos[5].jointtype = 1;
                                                                                          vinfos[5].foffset = j5;
                                                                                          vinfos[5].indices[0] =
                                                                                              _ij5[0];
                                                                                          vinfos[5].indices[1] =
                                                                                              _ij5[1];
                                                                                          vinfos[5].maxsolutions = _nj5;
                                                                                          vinfos[6].jointtype = 1;
                                                                                          vinfos[6].foffset = j6;
                                                                                          vinfos[6].indices[0] =
                                                                                              _ij6[0];
                                                                                          vinfos[6].indices[1] =
                                                                                              _ij6[1];
                                                                                          vinfos[6].maxsolutions = _nj6;
                                                                                          std::vector<int> vfree(0);
                                                                                          solutions.AddSolution(vinfos,
                                                                                                                vfree);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                } while (0);
                                                                                if (bgotonextstatement) {
                                                                                  bool bgotonextstatement = true;
                                                                                  do {
                                                                                    if (1) {
                                                                                      bgotonextstatement = false;
                                                                                      continue;  // branch miss [j2]
                                                                                    }
                                                                                  } while (0);
                                                                                  if (bgotonextstatement) {
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }

                                                                    } else {
                                                                      {
                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                        bool j2valid[1] = {false};
                                                                        _nj2 = 1;
                                                                        CheckValue<IkReal> x323 =
                                                                            IKPowWithIntegerCheck(cj1, -1);
                                                                        if (!x323.valid) {
                                                                          continue;
                                                                        }
                                                                        CheckValue<IkReal> x324 =
                                                                            IKPowWithIntegerCheck(sj1, -1);
                                                                        if (!x324.valid) {
                                                                          continue;
                                                                        }
                                                                        if (IKabs((new_r01 * (x323.value))) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(((-1.0) * new_r20 * (x324.value))) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(IKsqr((new_r01 * (x323.value))) +
                                                                                  IKsqr(((-1.0) * new_r20 *
                                                                                         (x324.value))) -
                                                                                  1) <= IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j2array[0] =
                                                                            IKatan2((new_r01 * (x323.value)),
                                                                                    ((-1.0) * new_r20 * (x324.value)));
                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                        if (j2array[0] > IKPI) {
                                                                          j2array[0] -= IK2PI;
                                                                        } else if (j2array[0] < -IKPI) {
                                                                          j2array[0] += IK2PI;
                                                                        }
                                                                        j2valid[0] = true;
                                                                        for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                          if (!j2valid[ij2]) {
                                                                            continue;
                                                                          }
                                                                          _ij2[0] = ij2;
                                                                          _ij2[1] = -1;
                                                                          for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                            if (j2valid[iij2] &&
                                                                                IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                                    IKFAST_SOLUTION_THRESH) {
                                                                              j2valid[iij2] = false;
                                                                              _ij2[1] = iij2;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j2 = j2array[ij2];
                                                                          cj2 = cj2array[ij2];
                                                                          sj2 = sj2array[ij2];
                                                                          {
                                                                            IkReal evalcond[8];
                                                                            IkReal x325 = IKsin(j2);
                                                                            IkReal x326 = IKcos(j2);
                                                                            IkReal x327 = ((1.0) * new_r00);
                                                                            IkReal x328 = ((1.0) * sj1);
                                                                            IkReal x329 = ((1.0) * new_r01);
                                                                            IkReal x330 = ((1.0) * x326);
                                                                            evalcond[0] = (((sj1 * x326)) + new_r20);
                                                                            evalcond[1] =
                                                                                ((((-1.0) * x325 * x328)) + new_r21);
                                                                            evalcond[2] = ((((-1.0) * x325)) +
                                                                                           (((-1.0) * new_r10)));
                                                                            evalcond[3] = ((((-1.0) * new_r11)) +
                                                                                           (((-1.0) * x330)));
                                                                            evalcond[4] =
                                                                                (((cj1 * x325)) + (((-1.0) * x329)));
                                                                            evalcond[5] = ((((-1.0) * x327)) +
                                                                                           (((-1.0) * cj1 * x330)));
                                                                            evalcond[6] =
                                                                                ((((-1.0) * cj1 * x329)) + x325 +
                                                                                 (((-1.0) * new_r21 * x328)));
                                                                            evalcond[7] = ((((-1.0) * cj1 * x327)) +
                                                                                           (((-1.0) * x330)) +
                                                                                           (((-1.0) * new_r20 * x328)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[6]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[7]) >
                                                                                    IKFAST_EVALCOND_THRESH) {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<
                                                                                IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }

                                                                } else {
                                                                  {
                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                    bool j2valid[1] = {false};
                                                                    _nj2 = 1;
                                                                    CheckValue<IkReal> x331 =
                                                                        IKPowWithIntegerCheck(sj1, -1);
                                                                    if (!x331.valid) {
                                                                      continue;
                                                                    }
                                                                    if (IKabs((new_r21 * (x331.value))) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(((-1.0) * new_r11)) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(IKsqr((new_r21 * (x331.value))) +
                                                                              IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                            IKFAST_SINCOS_THRESH)
                                                                      continue;
                                                                    j2array[0] = IKatan2((new_r21 * (x331.value)),
                                                                                         ((-1.0) * new_r11));
                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                    if (j2array[0] > IKPI) {
                                                                      j2array[0] -= IK2PI;
                                                                    } else if (j2array[0] < -IKPI) {
                                                                      j2array[0] += IK2PI;
                                                                    }
                                                                    j2valid[0] = true;
                                                                    for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                      if (!j2valid[ij2]) {
                                                                        continue;
                                                                      }
                                                                      _ij2[0] = ij2;
                                                                      _ij2[1] = -1;
                                                                      for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                        if (j2valid[iij2] &&
                                                                            IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                                IKFAST_SOLUTION_THRESH &&
                                                                            IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                                IKFAST_SOLUTION_THRESH) {
                                                                          j2valid[iij2] = false;
                                                                          _ij2[1] = iij2;
                                                                          break;
                                                                        }
                                                                      }
                                                                      j2 = j2array[ij2];
                                                                      cj2 = cj2array[ij2];
                                                                      sj2 = sj2array[ij2];
                                                                      {
                                                                        IkReal evalcond[8];
                                                                        IkReal x332 = IKsin(j2);
                                                                        IkReal x333 = IKcos(j2);
                                                                        IkReal x334 = ((1.0) * new_r00);
                                                                        IkReal x335 = ((1.0) * sj1);
                                                                        IkReal x336 = ((1.0) * new_r01);
                                                                        IkReal x337 = ((1.0) * x333);
                                                                        evalcond[0] = (new_r20 + ((sj1 * x333)));
                                                                        evalcond[1] =
                                                                            ((((-1.0) * x332 * x335)) + new_r21);
                                                                        evalcond[2] =
                                                                            ((((-1.0) * x332)) + (((-1.0) * new_r10)));
                                                                        evalcond[3] =
                                                                            ((((-1.0) * new_r11)) + (((-1.0) * x337)));
                                                                        evalcond[4] =
                                                                            (((cj1 * x332)) + (((-1.0) * x336)));
                                                                        evalcond[5] = ((((-1.0) * x334)) +
                                                                                       (((-1.0) * cj1 * x337)));
                                                                        evalcond[6] = ((((-1.0) * new_r21 * x335)) +
                                                                                       x332 + (((-1.0) * cj1 * x336)));
                                                                        evalcond[7] = ((((-1.0) * new_r20 * x335)) +
                                                                                       (((-1.0) * x337)) +
                                                                                       (((-1.0) * cj1 * x334)));
                                                                        if (IKabs(evalcond[0]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[1]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[2]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[3]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[4]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[5]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[6]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[7]) >
                                                                                IKFAST_EVALCOND_THRESH) {
                                                                          continue;
                                                                        }
                                                                      }

                                                                      {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                            vinfos(7);
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        vinfos[3].jointtype = 1;
                                                                        vinfos[3].foffset = j3;
                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                        vinfos[3].maxsolutions = _nj3;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j4;
                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                        vinfos[4].maxsolutions = _nj4;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j5;
                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                        vinfos[5].maxsolutions = _nj5;
                                                                        vinfos[6].jointtype = 1;
                                                                        vinfos[6].foffset = j6;
                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                        vinfos[6].maxsolutions = _nj6;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }

                                                            } else {
                                                              {
                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                bool j2valid[1] = {false};
                                                                _nj2 = 1;
                                                                CheckValue<IkReal> x338 =
                                                                    IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                                if (!x338.valid) {
                                                                  continue;
                                                                }
                                                                CheckValue<IkReal> x339 = IKatan2WithCheck(
                                                                    IkReal(new_r21), IkReal(((-1.0) * new_r20)),
                                                                    IKFAST_ATAN2_MAGTHRESH);
                                                                if (!x339.valid) {
                                                                  continue;
                                                                }
                                                                j2array[0] = ((-1.5707963267949) +
                                                                              (((1.5707963267949) * (x338.value))) +
                                                                              (x339.value));
                                                                sj2array[0] = IKsin(j2array[0]);
                                                                cj2array[0] = IKcos(j2array[0]);
                                                                if (j2array[0] > IKPI) {
                                                                  j2array[0] -= IK2PI;
                                                                } else if (j2array[0] < -IKPI) {
                                                                  j2array[0] += IK2PI;
                                                                }
                                                                j2valid[0] = true;
                                                                for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                  if (!j2valid[ij2]) {
                                                                    continue;
                                                                  }
                                                                  _ij2[0] = ij2;
                                                                  _ij2[1] = -1;
                                                                  for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                    if (j2valid[iij2] &&
                                                                        IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j2valid[iij2] = false;
                                                                      _ij2[1] = iij2;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j2 = j2array[ij2];
                                                                  cj2 = cj2array[ij2];
                                                                  sj2 = sj2array[ij2];
                                                                  {
                                                                    IkReal evalcond[8];
                                                                    IkReal x340 = IKsin(j2);
                                                                    IkReal x341 = IKcos(j2);
                                                                    IkReal x342 = ((1.0) * new_r00);
                                                                    IkReal x343 = ((1.0) * sj1);
                                                                    IkReal x344 = ((1.0) * new_r01);
                                                                    IkReal x345 = ((1.0) * x341);
                                                                    evalcond[0] = (((sj1 * x341)) + new_r20);
                                                                    evalcond[1] = ((((-1.0) * x340 * x343)) + new_r21);
                                                                    evalcond[2] =
                                                                        ((((-1.0) * new_r10)) + (((-1.0) * x340)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * new_r11)) + (((-1.0) * x345)));
                                                                    evalcond[4] = (((cj1 * x340)) + (((-1.0) * x344)));
                                                                    evalcond[5] =
                                                                        ((((-1.0) * cj1 * x345)) + (((-1.0) * x342)));
                                                                    evalcond[6] = ((((-1.0) * cj1 * x344)) + x340 +
                                                                                   (((-1.0) * new_r21 * x343)));
                                                                    evalcond[7] = ((((-1.0) * cj1 * x342)) +
                                                                                   (((-1.0) * new_r20 * x343)) +
                                                                                   (((-1.0) * x345)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement) {
                                                        bool bgotonextstatement = true;
                                                        do {
                                                          evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                          if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                            bgotonextstatement = false;
                                                            {
                                                              IkReal j2eval[1];
                                                              new_r21 = 0;
                                                              new_r20 = 0;
                                                              new_r02 = 0;
                                                              new_r12 = 0;
                                                              j2eval[0] = IKabs(new_r22);
                                                              if (IKabs(j2eval[0]) < 0.0000000100000000) {
                                                                continue;  // no branches [j2]

                                                              } else {
                                                                IkReal op[2 + 1], zeror[2];
                                                                int numroots;
                                                                op[0] = new_r22;
                                                                op[1] = 0;
                                                                op[2] = ((-1.0) * new_r22);
                                                                polyroots2(op, zeror, numroots);
                                                                IkReal j2array[2], cj2array[2], sj2array[2],
                                                                    tempj2array[1];
                                                                int numsolutions = 0;
                                                                for (int ij2 = 0; ij2 < numroots; ++ij2) {
                                                                  IkReal htj2 = zeror[ij2];
                                                                  tempj2array[0] = ((2.0) * (atan(htj2)));
                                                                  for (int kj2 = 0; kj2 < 1; ++kj2) {
                                                                    j2array[numsolutions] = tempj2array[kj2];
                                                                    if (j2array[numsolutions] > IKPI) {
                                                                      j2array[numsolutions] -= IK2PI;
                                                                    } else if (j2array[numsolutions] < -IKPI) {
                                                                      j2array[numsolutions] += IK2PI;
                                                                    }
                                                                    sj2array[numsolutions] =
                                                                        IKsin(j2array[numsolutions]);
                                                                    cj2array[numsolutions] =
                                                                        IKcos(j2array[numsolutions]);
                                                                    numsolutions++;
                                                                  }
                                                                }
                                                                bool j2valid[2] = {true, true};
                                                                _nj2 = 2;
                                                                for (int ij2 = 0; ij2 < numsolutions; ++ij2) {
                                                                  if (!j2valid[ij2]) {
                                                                    continue;
                                                                  }
                                                                  j2 = j2array[ij2];
                                                                  cj2 = cj2array[ij2];
                                                                  sj2 = sj2array[ij2];
                                                                  htj2 = IKtan(j2 / 2);

                                                                  _ij2[0] = ij2;
                                                                  _ij2[1] = -1;
                                                                  for (int iij2 = ij2 + 1; iij2 < numsolutions;
                                                                       ++iij2) {
                                                                    if (j2valid[iij2] &&
                                                                        IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j2valid[iij2] = false;
                                                                      _ij2[1] = iij2;
                                                                      break;
                                                                    }
                                                                  }
                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } while (0);
                                                        if (bgotonextstatement) {
                                                          bool bgotonextstatement = true;
                                                          do {
                                                            if (1) {
                                                              bgotonextstatement = false;
                                                              continue;  // branch miss [j2]
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement) {
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }

                                    } else {
                                      {
                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                        bool j2valid[1] = {false};
                                        _nj2 = 1;
                                        CheckValue<IkReal> x347 = IKPowWithIntegerCheck(sj1, -1);
                                        if (!x347.valid) {
                                          continue;
                                        }
                                        IkReal x346 = x347.value;
                                        CheckValue<IkReal> x348 = IKPowWithIntegerCheck(cj0, -1);
                                        if (!x348.valid) {
                                          continue;
                                        }
                                        CheckValue<IkReal> x349 = IKPowWithIntegerCheck(cj1, -1);
                                        if (!x349.valid) {
                                          continue;
                                        }
                                        if (IKabs((x346 * (x348.value) * (x349.value) *
                                                   ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(((-1.0) * new_r20 * x346)) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(IKsqr((x346 * (x348.value) * (x349.value) *
                                                         ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) +
                                                  IKsqr(((-1.0) * new_r20 * x346)) - 1) <= IKFAST_SINCOS_THRESH)
                                          continue;
                                        j2array[0] = IKatan2((x346 * (x348.value) * (x349.value) *
                                                              ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1))))),
                                                             ((-1.0) * new_r20 * x346));
                                        sj2array[0] = IKsin(j2array[0]);
                                        cj2array[0] = IKcos(j2array[0]);
                                        if (j2array[0] > IKPI) {
                                          j2array[0] -= IK2PI;
                                        } else if (j2array[0] < -IKPI) {
                                          j2array[0] += IK2PI;
                                        }
                                        j2valid[0] = true;
                                        for (int ij2 = 0; ij2 < 1; ++ij2) {
                                          if (!j2valid[ij2]) {
                                            continue;
                                          }
                                          _ij2[0] = ij2;
                                          _ij2[1] = -1;
                                          for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                            if (j2valid[iij2] &&
                                                IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                              j2valid[iij2] = false;
                                              _ij2[1] = iij2;
                                              break;
                                            }
                                          }
                                          j2 = j2array[ij2];
                                          cj2 = cj2array[ij2];
                                          sj2 = sj2array[ij2];
                                          {
                                            IkReal evalcond[12];
                                            IkReal x350 = IKsin(j2);
                                            IkReal x351 = IKcos(j2);
                                            IkReal x352 = ((1.0) * sj1);
                                            IkReal x353 = ((1.0) * sj0);
                                            IkReal x354 = (cj0 * new_r00);
                                            IkReal x355 = (cj0 * cj1);
                                            IkReal x356 = (new_r11 * sj0);
                                            IkReal x357 = (new_r10 * sj0);
                                            IkReal x358 = ((1.0) * x351);
                                            IkReal x359 = (cj1 * x350);
                                            IkReal x360 = ((1.0) * x350);
                                            evalcond[0] = (((sj1 * x351)) + new_r20);
                                            evalcond[1] = (new_r21 + (((-1.0) * x350 * x352)));
                                            evalcond[2] = (x356 + x359 + ((cj0 * new_r01)));
                                            evalcond[3] =
                                                ((((-1.0) * x360)) + (((-1.0) * new_r00 * x353)) + ((cj0 * new_r10)));
                                            evalcond[4] =
                                                ((((-1.0) * x358)) + (((-1.0) * new_r01 * x353)) + ((cj0 * new_r11)));
                                            evalcond[5] = (((sj0 * x351)) + ((x350 * x355)) + new_r01);
                                            evalcond[6] = ((((-1.0) * cj1 * x358)) + x354 + x357);
                                            evalcond[7] = (((sj0 * x350)) + new_r00 + (((-1.0) * x355 * x358)));
                                            evalcond[8] = (((sj0 * x359)) + (((-1.0) * cj0 * x358)) + new_r11);
                                            evalcond[9] =
                                                (new_r10 + (((-1.0) * cj1 * x351 * x353)) + (((-1.0) * cj0 * x360)));
                                            evalcond[10] = (((new_r01 * x355)) + ((cj1 * x356)) + x350 +
                                                            (((-1.0) * new_r21 * x352)));
                                            evalcond[11] = (((cj1 * x357)) + ((cj1 * x354)) + (((-1.0) * x358)) +
                                                            (((-1.0) * new_r20 * x352)));
                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                            vinfos[0].jointtype = 1;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 1;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 1;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 1;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            vinfos[6].jointtype = 1;
                                            vinfos[6].foffset = j6;
                                            vinfos[6].indices[0] = _ij6[0];
                                            vinfos[6].indices[1] = _ij6[1];
                                            vinfos[6].maxsolutions = _nj6;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos, vfree);
                                          }
                                        }
                                      }
                                    }
                                  }

                                } else {
                                  {
                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                    bool j2valid[1] = {false};
                                    _nj2 = 1;
                                    CheckValue<IkReal> x362 = IKPowWithIntegerCheck(sj1, -1);
                                    if (!x362.valid) {
                                      continue;
                                    }
                                    IkReal x361 = x362.value;
                                    CheckValue<IkReal> x363 = IKPowWithIntegerCheck(sj0, -1);
                                    if (!x363.valid) {
                                      continue;
                                    }
                                    if (IKabs((x361 * (x363.value) *
                                               (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(((-1.0) * new_r20 * x361)) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(
                                            IKsqr((x361 * (x363.value) *
                                                   (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) +
                                            IKsqr(((-1.0) * new_r20 * x361)) - 1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j2array[0] =
                                        IKatan2((x361 * (x363.value) *
                                                 (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1))))),
                                                ((-1.0) * new_r20 * x361));
                                    sj2array[0] = IKsin(j2array[0]);
                                    cj2array[0] = IKcos(j2array[0]);
                                    if (j2array[0] > IKPI) {
                                      j2array[0] -= IK2PI;
                                    } else if (j2array[0] < -IKPI) {
                                      j2array[0] += IK2PI;
                                    }
                                    j2valid[0] = true;
                                    for (int ij2 = 0; ij2 < 1; ++ij2) {
                                      if (!j2valid[ij2]) {
                                        continue;
                                      }
                                      _ij2[0] = ij2;
                                      _ij2[1] = -1;
                                      for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                        if (j2valid[iij2] &&
                                            IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                          j2valid[iij2] = false;
                                          _ij2[1] = iij2;
                                          break;
                                        }
                                      }
                                      j2 = j2array[ij2];
                                      cj2 = cj2array[ij2];
                                      sj2 = sj2array[ij2];
                                      {
                                        IkReal evalcond[12];
                                        IkReal x364 = IKsin(j2);
                                        IkReal x365 = IKcos(j2);
                                        IkReal x366 = ((1.0) * sj1);
                                        IkReal x367 = ((1.0) * sj0);
                                        IkReal x368 = (cj0 * new_r00);
                                        IkReal x369 = (cj0 * cj1);
                                        IkReal x370 = (new_r11 * sj0);
                                        IkReal x371 = (new_r10 * sj0);
                                        IkReal x372 = ((1.0) * x365);
                                        IkReal x373 = (cj1 * x364);
                                        IkReal x374 = ((1.0) * x364);
                                        evalcond[0] = (((sj1 * x365)) + new_r20);
                                        evalcond[1] = ((((-1.0) * x364 * x366)) + new_r21);
                                        evalcond[2] = (x373 + x370 + ((cj0 * new_r01)));
                                        evalcond[3] =
                                            ((((-1.0) * new_r00 * x367)) + (((-1.0) * x374)) + ((cj0 * new_r10)));
                                        evalcond[4] =
                                            ((((-1.0) * x372)) + ((cj0 * new_r11)) + (((-1.0) * new_r01 * x367)));
                                        evalcond[5] = (((x364 * x369)) + ((sj0 * x365)) + new_r01);
                                        evalcond[6] = ((((-1.0) * cj1 * x372)) + x371 + x368);
                                        evalcond[7] = (((sj0 * x364)) + (((-1.0) * x369 * x372)) + new_r00);
                                        evalcond[8] = (((sj0 * x373)) + new_r11 + (((-1.0) * cj0 * x372)));
                                        evalcond[9] =
                                            ((((-1.0) * cj1 * x365 * x367)) + new_r10 + (((-1.0) * cj0 * x374)));
                                        evalcond[10] =
                                            (x364 + ((new_r01 * x369)) + ((cj1 * x370)) + (((-1.0) * new_r21 * x366)));
                                        evalcond[11] = ((((-1.0) * new_r20 * x366)) + (((-1.0) * x372)) +
                                                        ((cj1 * x371)) + ((cj1 * x368)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                        vinfos[0].jointtype = 1;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 1;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 1;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 1;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        vinfos[6].jointtype = 1;
                                        vinfos[6].foffset = j6;
                                        vinfos[6].indices[0] = _ij6[0];
                                        vinfos[6].indices[1] = _ij6[1];
                                        vinfos[6].maxsolutions = _nj6;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }

                            } else {
                              {
                                IkReal j2array[1], cj2array[1], sj2array[1];
                                bool j2valid[1] = {false};
                                _nj2 = 1;
                                CheckValue<IkReal> x375 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                if (!x375.valid) {
                                  continue;
                                }
                                CheckValue<IkReal> x376 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)),
                                                                           IKFAST_ATAN2_MAGTHRESH);
                                if (!x376.valid) {
                                  continue;
                                }
                                j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x375.value))) + (x376.value));
                                sj2array[0] = IKsin(j2array[0]);
                                cj2array[0] = IKcos(j2array[0]);
                                if (j2array[0] > IKPI) {
                                  j2array[0] -= IK2PI;
                                } else if (j2array[0] < -IKPI) {
                                  j2array[0] += IK2PI;
                                }
                                j2valid[0] = true;
                                for (int ij2 = 0; ij2 < 1; ++ij2) {
                                  if (!j2valid[ij2]) {
                                    continue;
                                  }
                                  _ij2[0] = ij2;
                                  _ij2[1] = -1;
                                  for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                    if (j2valid[iij2] &&
                                        IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                      j2valid[iij2] = false;
                                      _ij2[1] = iij2;
                                      break;
                                    }
                                  }
                                  j2 = j2array[ij2];
                                  cj2 = cj2array[ij2];
                                  sj2 = sj2array[ij2];
                                  {
                                    IkReal evalcond[12];
                                    IkReal x377 = IKsin(j2);
                                    IkReal x378 = IKcos(j2);
                                    IkReal x379 = ((1.0) * sj1);
                                    IkReal x380 = ((1.0) * sj0);
                                    IkReal x381 = (cj0 * new_r00);
                                    IkReal x382 = (cj0 * cj1);
                                    IkReal x383 = (new_r11 * sj0);
                                    IkReal x384 = (new_r10 * sj0);
                                    IkReal x385 = ((1.0) * x378);
                                    IkReal x386 = (cj1 * x377);
                                    IkReal x387 = ((1.0) * x377);
                                    evalcond[0] = (((sj1 * x378)) + new_r20);
                                    evalcond[1] = ((((-1.0) * x377 * x379)) + new_r21);
                                    evalcond[2] = (x386 + x383 + ((cj0 * new_r01)));
                                    evalcond[3] = ((((-1.0) * new_r00 * x380)) + (((-1.0) * x387)) + ((cj0 * new_r10)));
                                    evalcond[4] = ((((-1.0) * new_r01 * x380)) + (((-1.0) * x385)) + ((cj0 * new_r11)));
                                    evalcond[5] = (((x377 * x382)) + ((sj0 * x378)) + new_r01);
                                    evalcond[6] = ((((-1.0) * cj1 * x385)) + x384 + x381);
                                    evalcond[7] = (((sj0 * x377)) + new_r00 + (((-1.0) * x382 * x385)));
                                    evalcond[8] = ((((-1.0) * cj0 * x385)) + new_r11 + ((sj0 * x386)));
                                    evalcond[9] = ((((-1.0) * cj1 * x378 * x380)) + (((-1.0) * cj0 * x387)) + new_r10);
                                    evalcond[10] =
                                        ((((-1.0) * new_r21 * x379)) + ((cj1 * x383)) + ((new_r01 * x382)) + x377);
                                    evalcond[11] = ((((-1.0) * new_r20 * x379)) + ((cj1 * x384)) + ((cj1 * x381)) +
                                                    (((-1.0) * x385)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j6;
                                    vinfos[6].indices[0] = _ij6[0];
                                    vinfos[6].indices[1] = _ij6[1];
                                    vinfos[6].maxsolutions = _nj6;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }

                } else {
                  {
                    IkReal j2array[1], cj2array[1], sj2array[1];
                    bool j2valid[1] = {false};
                    _nj2 = 1;
                    CheckValue<IkReal> x388 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                    if (!x388.valid) {
                      continue;
                    }
                    CheckValue<IkReal> x389 =
                        IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                    if (!x389.valid) {
                      continue;
                    }
                    j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x388.value))) + (x389.value));
                    sj2array[0] = IKsin(j2array[0]);
                    cj2array[0] = IKcos(j2array[0]);
                    if (j2array[0] > IKPI) {
                      j2array[0] -= IK2PI;
                    } else if (j2array[0] < -IKPI) {
                      j2array[0] += IK2PI;
                    }
                    j2valid[0] = true;
                    for (int ij2 = 0; ij2 < 1; ++ij2) {
                      if (!j2valid[ij2]) {
                        continue;
                      }
                      _ij2[0] = ij2;
                      _ij2[1] = -1;
                      for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                            IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                          j2valid[iij2] = false;
                          _ij2[1] = iij2;
                          break;
                        }
                      }
                      j2 = j2array[ij2];
                      cj2 = cj2array[ij2];
                      sj2 = sj2array[ij2];
                      {
                        IkReal evalcond[2];
                        evalcond[0] = (((sj1 * (IKcos(j2)))) + new_r20);
                        evalcond[1] = ((((-1.0) * sj1 * (IKsin(j2)))) + new_r21);
                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH) {
                          continue;
                        }
                      }

                      {
                        IkReal j0eval[3];
                        j0eval[0] = sj1;
                        j0eval[1] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                        j0eval[2] = IKsign(sj1);
                        if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000 ||
                            IKabs(j0eval[2]) < 0.0000010000000000) {
                          {
                            IkReal j0eval[2];
                            j0eval[0] = cj2;
                            j0eval[1] = sj1;
                            if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000) {
                              {
                                IkReal evalcond[5];
                                bool bgotonextstatement = true;
                                do {
                                  evalcond[0] = ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j2)))),
                                                         6.28318530717959)));
                                  evalcond[1] = new_r20;
                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                      IKabs(evalcond[1]) < 0.0000050000000000) {
                                    bgotonextstatement = false;
                                    {
                                      IkReal j0array[1], cj0array[1], sj0array[1];
                                      bool j0valid[1] = {false};
                                      _nj0 = 1;
                                      if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                          IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                          IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(new_r10) - 1) <= IKFAST_SINCOS_THRESH)
                                        continue;
                                      j0array[0] = IKatan2(((-1.0) * new_r00), new_r10);
                                      sj0array[0] = IKsin(j0array[0]);
                                      cj0array[0] = IKcos(j0array[0]);
                                      if (j0array[0] > IKPI) {
                                        j0array[0] -= IK2PI;
                                      } else if (j0array[0] < -IKPI) {
                                        j0array[0] += IK2PI;
                                      }
                                      j0valid[0] = true;
                                      for (int ij0 = 0; ij0 < 1; ++ij0) {
                                        if (!j0valid[ij0]) {
                                          continue;
                                        }
                                        _ij0[0] = ij0;
                                        _ij0[1] = -1;
                                        for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                          if (j0valid[iij0] &&
                                              IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                              IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                                            j0valid[iij0] = false;
                                            _ij0[1] = iij0;
                                            break;
                                          }
                                        }
                                        j0 = j0array[ij0];
                                        cj0 = cj0array[ij0];
                                        sj0 = sj0array[ij0];
                                        {
                                          IkReal evalcond[18];
                                          IkReal x390 = IKsin(j0);
                                          IkReal x391 = IKcos(j0);
                                          IkReal x392 = ((1.0) * sj1);
                                          IkReal x393 = ((1.0) * cj1);
                                          IkReal x394 = (new_r10 * x390);
                                          IkReal x395 = (new_r01 * x391);
                                          IkReal x396 = (new_r00 * x391);
                                          IkReal x397 = ((1.0) * x390);
                                          IkReal x398 = (new_r11 * x390);
                                          IkReal x399 = (new_r12 * x390);
                                          IkReal x400 = (cj1 * x391);
                                          IkReal x401 = (new_r02 * x391);
                                          evalcond[0] = (x390 + new_r00);
                                          evalcond[1] = (x400 + new_r01);
                                          evalcond[2] = (((cj1 * x390)) + new_r11);
                                          evalcond[3] = ((((-1.0) * x391)) + new_r10);
                                          evalcond[4] = ((((-1.0) * x391 * x392)) + new_r02);
                                          evalcond[5] = ((((-1.0) * x390 * x392)) + new_r12);
                                          evalcond[6] = (x394 + x396);
                                          evalcond[7] = ((((-1.0) * new_r02 * x397)) + ((new_r12 * x391)));
                                          evalcond[8] = ((((-1.0) * new_r01 * x397)) + ((new_r11 * x391)));
                                          evalcond[9] = (cj1 + x395 + x398);
                                          evalcond[10] = ((-1.0) + (((-1.0) * new_r00 * x397)) + ((new_r10 * x391)));
                                          evalcond[11] = (((cj1 * x394)) + ((cj1 * x396)));
                                          evalcond[12] = ((((-1.0) * x392)) + x399 + x401);
                                          evalcond[13] = ((((-1.0) * x392 * x394)) + (((-1.0) * x392 * x396)));
                                          evalcond[14] =
                                              ((((-1.0) * new_r22 * x392)) + ((cj1 * x399)) + ((new_r02 * x400)));
                                          evalcond[15] =
                                              ((1.0) + (((-1.0) * new_r21 * x392)) + ((cj1 * x395)) + ((cj1 * x398)));
                                          evalcond[16] = ((((-1.0) * new_r21 * x393)) + (((-1.0) * x392 * x395)) +
                                                          (((-1.0) * x392 * x398)));
                                          evalcond[17] = ((1.0) + (((-1.0) * x392 * x401)) +
                                                          (((-1.0) * new_r22 * x393)) + (((-1.0) * x392 * x399)));
                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH) {
                                            continue;
                                          }
                                        }

                                        {
                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                          vinfos[0].jointtype = 1;
                                          vinfos[0].foffset = j0;
                                          vinfos[0].indices[0] = _ij0[0];
                                          vinfos[0].indices[1] = _ij0[1];
                                          vinfos[0].maxsolutions = _nj0;
                                          vinfos[1].jointtype = 1;
                                          vinfos[1].foffset = j1;
                                          vinfos[1].indices[0] = _ij1[0];
                                          vinfos[1].indices[1] = _ij1[1];
                                          vinfos[1].maxsolutions = _nj1;
                                          vinfos[2].jointtype = 1;
                                          vinfos[2].foffset = j2;
                                          vinfos[2].indices[0] = _ij2[0];
                                          vinfos[2].indices[1] = _ij2[1];
                                          vinfos[2].maxsolutions = _nj2;
                                          vinfos[3].jointtype = 1;
                                          vinfos[3].foffset = j3;
                                          vinfos[3].indices[0] = _ij3[0];
                                          vinfos[3].indices[1] = _ij3[1];
                                          vinfos[3].maxsolutions = _nj3;
                                          vinfos[4].jointtype = 1;
                                          vinfos[4].foffset = j4;
                                          vinfos[4].indices[0] = _ij4[0];
                                          vinfos[4].indices[1] = _ij4[1];
                                          vinfos[4].maxsolutions = _nj4;
                                          vinfos[5].jointtype = 1;
                                          vinfos[5].foffset = j5;
                                          vinfos[5].indices[0] = _ij5[0];
                                          vinfos[5].indices[1] = _ij5[1];
                                          vinfos[5].maxsolutions = _nj5;
                                          vinfos[6].jointtype = 1;
                                          vinfos[6].foffset = j6;
                                          vinfos[6].indices[0] = _ij6[0];
                                          vinfos[6].indices[1] = _ij6[1];
                                          vinfos[6].maxsolutions = _nj6;
                                          std::vector<int> vfree(0);
                                          solutions.AddSolution(vinfos, vfree);
                                        }
                                      }
                                    }
                                  }
                                } while (0);
                                if (bgotonextstatement) {
                                  bool bgotonextstatement = true;
                                  do {
                                    evalcond[0] = ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j2)))),
                                                           6.28318530717959)));
                                    evalcond[1] = new_r20;
                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                        IKabs(evalcond[1]) < 0.0000050000000000) {
                                      bgotonextstatement = false;
                                      {
                                        IkReal j0array[1], cj0array[1], sj0array[1];
                                        bool j0valid[1] = {false};
                                        _nj0 = 1;
                                        if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(IKsqr(new_r00) + IKsqr(((-1.0) * new_r10)) - 1) <=
                                                IKFAST_SINCOS_THRESH)
                                          continue;
                                        j0array[0] = IKatan2(new_r00, ((-1.0) * new_r10));
                                        sj0array[0] = IKsin(j0array[0]);
                                        cj0array[0] = IKcos(j0array[0]);
                                        if (j0array[0] > IKPI) {
                                          j0array[0] -= IK2PI;
                                        } else if (j0array[0] < -IKPI) {
                                          j0array[0] += IK2PI;
                                        }
                                        j0valid[0] = true;
                                        for (int ij0 = 0; ij0 < 1; ++ij0) {
                                          if (!j0valid[ij0]) {
                                            continue;
                                          }
                                          _ij0[0] = ij0;
                                          _ij0[1] = -1;
                                          for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                            if (j0valid[iij0] &&
                                                IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                                              j0valid[iij0] = false;
                                              _ij0[1] = iij0;
                                              break;
                                            }
                                          }
                                          j0 = j0array[ij0];
                                          cj0 = cj0array[ij0];
                                          sj0 = sj0array[ij0];
                                          {
                                            IkReal evalcond[18];
                                            IkReal x402 = IKcos(j0);
                                            IkReal x403 = IKsin(j0);
                                            IkReal x404 = ((1.0) * sj1);
                                            IkReal x405 = ((1.0) * cj1);
                                            IkReal x406 = (new_r10 * x403);
                                            IkReal x407 = (new_r01 * x402);
                                            IkReal x408 = (new_r00 * x402);
                                            IkReal x409 = ((1.0) * x403);
                                            IkReal x410 = (new_r11 * x403);
                                            IkReal x411 = (new_r12 * x403);
                                            IkReal x412 = (new_r02 * x402);
                                            evalcond[0] = (x402 + new_r10);
                                            evalcond[1] = (new_r00 + (((-1.0) * x409)));
                                            evalcond[2] = ((((-1.0) * x402 * x404)) + new_r02);
                                            evalcond[3] = ((((-1.0) * x403 * x404)) + new_r12);
                                            evalcond[4] = ((((-1.0) * x402 * x405)) + new_r01);
                                            evalcond[5] = ((((-1.0) * x403 * x405)) + new_r11);
                                            evalcond[6] = (x406 + x408);
                                            evalcond[7] = (((new_r12 * x402)) + (((-1.0) * new_r02 * x409)));
                                            evalcond[8] = (((new_r11 * x402)) + (((-1.0) * new_r01 * x409)));
                                            evalcond[9] = ((1.0) + ((new_r10 * x402)) + (((-1.0) * new_r00 * x409)));
                                            evalcond[10] = (((cj1 * x406)) + ((cj1 * x408)));
                                            evalcond[11] = (x412 + x411 + (((-1.0) * x404)));
                                            evalcond[12] = (x407 + x410 + (((-1.0) * x405)));
                                            evalcond[13] = ((((-1.0) * x404 * x408)) + (((-1.0) * x404 * x406)));
                                            evalcond[14] =
                                                (((cj1 * x412)) + ((cj1 * x411)) + (((-1.0) * new_r22 * x404)));
                                            evalcond[15] = ((-1.0) + (sj1 * sj1) + ((cj1 * x407)) + ((cj1 * x410)));
                                            evalcond[16] = ((((-1.0) * x404 * x407)) + (((-1.0) * x404 * x410)) +
                                                            (((-1.0) * new_r21 * x405)));
                                            evalcond[17] = ((1.0) + (((-1.0) * x404 * x411)) +
                                                            (((-1.0) * x404 * x412)) + (((-1.0) * new_r22 * x405)));
                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH) {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                            vinfos[0].jointtype = 1;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 1;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 1;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 1;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            vinfos[6].jointtype = 1;
                                            vinfos[6].foffset = j6;
                                            vinfos[6].indices[0] = _ij6[0];
                                            vinfos[6].indices[1] = _ij6[1];
                                            vinfos[6].maxsolutions = _nj6;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos, vfree);
                                          }
                                        }
                                      }
                                    }
                                  } while (0);
                                  if (bgotonextstatement) {
                                    bool bgotonextstatement = true;
                                    do {
                                      evalcond[0] = ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                      evalcond[1] = new_r20;
                                      evalcond[2] = new_r02;
                                      evalcond[3] = new_r12;
                                      evalcond[4] = new_r21;
                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                          IKabs(evalcond[1]) < 0.0000050000000000 &&
                                          IKabs(evalcond[2]) < 0.0000050000000000 &&
                                          IKabs(evalcond[3]) < 0.0000050000000000 &&
                                          IKabs(evalcond[4]) < 0.0000050000000000) {
                                        bgotonextstatement = false;
                                        {
                                          IkReal j0array[1], cj0array[1], sj0array[1];
                                          bool j0valid[1] = {false};
                                          _nj0 = 1;
                                          IkReal x413 = ((1.0) * sj2);
                                          if (IKabs(((((-1.0) * cj2 * new_r01)) + (((-1.0) * new_r00 * x413)))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs((((cj2 * new_r00)) + (((-1.0) * new_r01 * x413)))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(IKsqr(((((-1.0) * cj2 * new_r01)) + (((-1.0) * new_r00 * x413)))) +
                                                    IKsqr((((cj2 * new_r00)) + (((-1.0) * new_r01 * x413)))) - 1) <=
                                                  IKFAST_SINCOS_THRESH)
                                            continue;
                                          j0array[0] =
                                              IKatan2(((((-1.0) * cj2 * new_r01)) + (((-1.0) * new_r00 * x413))),
                                                      (((cj2 * new_r00)) + (((-1.0) * new_r01 * x413))));
                                          sj0array[0] = IKsin(j0array[0]);
                                          cj0array[0] = IKcos(j0array[0]);
                                          if (j0array[0] > IKPI) {
                                            j0array[0] -= IK2PI;
                                          } else if (j0array[0] < -IKPI) {
                                            j0array[0] += IK2PI;
                                          }
                                          j0valid[0] = true;
                                          for (int ij0 = 0; ij0 < 1; ++ij0) {
                                            if (!j0valid[ij0]) {
                                              continue;
                                            }
                                            _ij0[0] = ij0;
                                            _ij0[1] = -1;
                                            for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                              if (j0valid[iij0] &&
                                                  IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                                                j0valid[iij0] = false;
                                                _ij0[1] = iij0;
                                                break;
                                              }
                                            }
                                            j0 = j0array[ij0];
                                            cj0 = cj0array[ij0];
                                            sj0 = sj0array[ij0];
                                            {
                                              IkReal evalcond[8];
                                              IkReal x414 = IKcos(j0);
                                              IkReal x415 = IKsin(j0);
                                              IkReal x416 = ((1.0) * cj2);
                                              IkReal x417 = ((1.0) * sj2);
                                              IkReal x418 = (sj2 * x415);
                                              IkReal x419 = ((1.0) * x415);
                                              IkReal x420 = (x414 * x416);
                                              evalcond[0] = (sj2 + ((new_r11 * x415)) + ((new_r01 * x414)));
                                              evalcond[1] = (((sj2 * x414)) + new_r01 + ((cj2 * x415)));
                                              evalcond[2] = ((((-1.0) * x420)) + x418 + new_r00);
                                              evalcond[3] = ((((-1.0) * x420)) + x418 + new_r11);
                                              evalcond[4] =
                                                  (((new_r10 * x415)) + (((-1.0) * x416)) + ((new_r00 * x414)));
                                              evalcond[5] =
                                                  ((((-1.0) * x415 * x416)) + new_r10 + (((-1.0) * x414 * x417)));
                                              evalcond[6] = (((new_r10 * x414)) + (((-1.0) * new_r00 * x419)) +
                                                             (((-1.0) * x417)));
                                              evalcond[7] = (((new_r11 * x414)) + (((-1.0) * x416)) +
                                                             (((-1.0) * new_r01 * x419)));
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                              vinfos[0].jointtype = 1;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 1;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 1;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 1;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              vinfos[6].jointtype = 1;
                                              vinfos[6].foffset = j6;
                                              vinfos[6].indices[0] = _ij6[0];
                                              vinfos[6].indices[1] = _ij6[1];
                                              vinfos[6].maxsolutions = _nj6;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    } while (0);
                                    if (bgotonextstatement) {
                                      bool bgotonextstatement = true;
                                      do {
                                        evalcond[0] =
                                            ((-3.14159265358979) +
                                             (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))),
                                                     6.28318530717959)));
                                        evalcond[1] = new_r20;
                                        evalcond[2] = new_r02;
                                        evalcond[3] = new_r12;
                                        evalcond[4] = new_r21;
                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                            IKabs(evalcond[1]) < 0.0000050000000000 &&
                                            IKabs(evalcond[2]) < 0.0000050000000000 &&
                                            IKabs(evalcond[3]) < 0.0000050000000000 &&
                                            IKabs(evalcond[4]) < 0.0000050000000000) {
                                          bgotonextstatement = false;
                                          {
                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                            bool j0valid[1] = {false};
                                            _nj0 = 1;
                                            IkReal x421 = ((1.0) * new_r00);
                                            if (IKabs(((((-1.0) * sj2 * x421)) + (((-1.0) * cj2 * new_r01)))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(((((-1.0) * cj2 * x421)) + ((new_r01 * sj2)))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(IKsqr(((((-1.0) * sj2 * x421)) + (((-1.0) * cj2 * new_r01)))) +
                                                      IKsqr(((((-1.0) * cj2 * x421)) + ((new_r01 * sj2)))) - 1) <=
                                                    IKFAST_SINCOS_THRESH)
                                              continue;
                                            j0array[0] = IKatan2(((((-1.0) * sj2 * x421)) + (((-1.0) * cj2 * new_r01))),
                                                                 ((((-1.0) * cj2 * x421)) + ((new_r01 * sj2))));
                                            sj0array[0] = IKsin(j0array[0]);
                                            cj0array[0] = IKcos(j0array[0]);
                                            if (j0array[0] > IKPI) {
                                              j0array[0] -= IK2PI;
                                            } else if (j0array[0] < -IKPI) {
                                              j0array[0] += IK2PI;
                                            }
                                            j0valid[0] = true;
                                            for (int ij0 = 0; ij0 < 1; ++ij0) {
                                              if (!j0valid[ij0]) {
                                                continue;
                                              }
                                              _ij0[0] = ij0;
                                              _ij0[1] = -1;
                                              for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                                if (j0valid[iij0] &&
                                                    IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                                                  j0valid[iij0] = false;
                                                  _ij0[1] = iij0;
                                                  break;
                                                }
                                              }
                                              j0 = j0array[ij0];
                                              cj0 = cj0array[ij0];
                                              sj0 = sj0array[ij0];
                                              {
                                                IkReal evalcond[8];
                                                IkReal x422 = IKcos(j0);
                                                IkReal x423 = IKsin(j0);
                                                IkReal x424 = ((1.0) * sj2);
                                                IkReal x425 = (cj2 * x423);
                                                IkReal x426 = (sj2 * x423);
                                                IkReal x427 = ((1.0) * x422);
                                                IkReal x428 = ((1.0) * x423);
                                                IkReal x429 = (x422 * x424);
                                                evalcond[0] = (cj2 + ((new_r10 * x423)) + ((new_r00 * x422)));
                                                evalcond[1] = (x426 + ((cj2 * x422)) + new_r00);
                                                evalcond[2] = ((((-1.0) * x429)) + x425 + new_r01);
                                                evalcond[3] = ((((-1.0) * x429)) + x425 + new_r10);
                                                evalcond[4] =
                                                    ((((-1.0) * x424)) + ((new_r11 * x423)) + ((new_r01 * x422)));
                                                evalcond[5] =
                                                    ((((-1.0) * cj2 * x427)) + new_r11 + (((-1.0) * x423 * x424)));
                                                evalcond[6] = ((((-1.0) * new_r00 * x428)) + (((-1.0) * x424)) +
                                                               ((new_r10 * x422)));
                                                evalcond[7] = (((new_r11 * x422)) + (((-1.0) * cj2)) +
                                                               (((-1.0) * new_r01 * x428)));
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                vinfos[0].jointtype = 1;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 1;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 1;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 1;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                vinfos[6].jointtype = 1;
                                                vinfos[6].foffset = j6;
                                                vinfos[6].indices[0] = _ij6[0];
                                                vinfos[6].indices[1] = _ij6[1];
                                                vinfos[6].maxsolutions = _nj6;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      } while (0);
                                      if (bgotonextstatement) {
                                        bool bgotonextstatement = true;
                                        do {
                                          evalcond[0] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                                          if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j0eval[1];
                                              new_r02 = 0;
                                              new_r12 = 0;
                                              new_r20 = 0;
                                              new_r21 = 0;
                                              j0eval[0] = ((IKabs(new_r11)) + (IKabs(new_r01)));
                                              if (IKabs(j0eval[0]) < 0.0000010000000000) {
                                                {
                                                  IkReal j0eval[1];
                                                  new_r02 = 0;
                                                  new_r12 = 0;
                                                  new_r20 = 0;
                                                  new_r21 = 0;
                                                  j0eval[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                  if (IKabs(j0eval[0]) < 0.0000010000000000) {
                                                    {
                                                      IkReal j0eval[1];
                                                      new_r02 = 0;
                                                      new_r12 = 0;
                                                      new_r20 = 0;
                                                      new_r21 = 0;
                                                      j0eval[0] =
                                                          ((IKabs((new_r11 * new_r22))) + (IKabs((new_r01 * new_r22))));
                                                      if (IKabs(j0eval[0]) < 0.0000010000000000) {
                                                        continue;  // no branches [j0]

                                                      } else {
                                                        {
                                                          IkReal j0array[2], cj0array[2], sj0array[2];
                                                          bool j0valid[2] = {false};
                                                          _nj0 = 2;
                                                          CheckValue<IkReal> x431 = IKatan2WithCheck(
                                                              IkReal((new_r01 * new_r22)), IkReal((new_r11 * new_r22)),
                                                              IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x431.valid) {
                                                            continue;
                                                          }
                                                          IkReal x430 = x431.value;
                                                          j0array[0] = ((-1.0) * x430);
                                                          sj0array[0] = IKsin(j0array[0]);
                                                          cj0array[0] = IKcos(j0array[0]);
                                                          j0array[1] = ((3.14159265358979) + (((-1.0) * x430)));
                                                          sj0array[1] = IKsin(j0array[1]);
                                                          cj0array[1] = IKcos(j0array[1]);
                                                          if (j0array[0] > IKPI) {
                                                            j0array[0] -= IK2PI;
                                                          } else if (j0array[0] < -IKPI) {
                                                            j0array[0] += IK2PI;
                                                          }
                                                          j0valid[0] = true;
                                                          if (j0array[1] > IKPI) {
                                                            j0array[1] -= IK2PI;
                                                          } else if (j0array[1] < -IKPI) {
                                                            j0array[1] += IK2PI;
                                                          }
                                                          j0valid[1] = true;
                                                          for (int ij0 = 0; ij0 < 2; ++ij0) {
                                                            if (!j0valid[ij0]) {
                                                              continue;
                                                            }
                                                            _ij0[0] = ij0;
                                                            _ij0[1] = -1;
                                                            for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                                                              if (j0valid[iij0] &&
                                                                  IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j0valid[iij0] = false;
                                                                _ij0[1] = iij0;
                                                                break;
                                                              }
                                                            }
                                                            j0 = j0array[ij0];
                                                            cj0 = cj0array[ij0];
                                                            sj0 = sj0array[ij0];
                                                            {
                                                              IkReal evalcond[5];
                                                              IkReal x432 = IKcos(j0);
                                                              IkReal x433 = IKsin(j0);
                                                              IkReal x434 = (new_r10 * x433);
                                                              IkReal x435 = ((1.0) * x433);
                                                              IkReal x436 = (new_r00 * x432);
                                                              evalcond[0] = (((new_r01 * x432)) + ((new_r11 * x433)));
                                                              evalcond[1] = (x434 + x436);
                                                              evalcond[2] =
                                                                  ((((-1.0) * new_r00 * x435)) + ((new_r10 * x432)));
                                                              evalcond[3] =
                                                                  ((((-1.0) * new_r01 * x435)) + ((new_r11 * x432)));
                                                              evalcond[4] = (((new_r22 * x436)) + ((new_r22 * x434)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 1;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 1;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 1;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j6;
                                                              vinfos[6].indices[0] = _ij6[0];
                                                              vinfos[6].indices[1] = _ij6[1];
                                                              vinfos[6].maxsolutions = _nj6;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }

                                                  } else {
                                                    {
                                                      IkReal j0array[2], cj0array[2], sj0array[2];
                                                      bool j0valid[2] = {false};
                                                      _nj0 = 2;
                                                      CheckValue<IkReal> x438 = IKatan2WithCheck(
                                                          IkReal(new_r00), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                                      if (!x438.valid) {
                                                        continue;
                                                      }
                                                      IkReal x437 = x438.value;
                                                      j0array[0] = ((-1.0) * x437);
                                                      sj0array[0] = IKsin(j0array[0]);
                                                      cj0array[0] = IKcos(j0array[0]);
                                                      j0array[1] = ((3.14159265358979) + (((-1.0) * x437)));
                                                      sj0array[1] = IKsin(j0array[1]);
                                                      cj0array[1] = IKcos(j0array[1]);
                                                      if (j0array[0] > IKPI) {
                                                        j0array[0] -= IK2PI;
                                                      } else if (j0array[0] < -IKPI) {
                                                        j0array[0] += IK2PI;
                                                      }
                                                      j0valid[0] = true;
                                                      if (j0array[1] > IKPI) {
                                                        j0array[1] -= IK2PI;
                                                      } else if (j0array[1] < -IKPI) {
                                                        j0array[1] += IK2PI;
                                                      }
                                                      j0valid[1] = true;
                                                      for (int ij0 = 0; ij0 < 2; ++ij0) {
                                                        if (!j0valid[ij0]) {
                                                          continue;
                                                        }
                                                        _ij0[0] = ij0;
                                                        _ij0[1] = -1;
                                                        for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                                                          if (j0valid[iij0] &&
                                                              IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                                  IKFAST_SOLUTION_THRESH) {
                                                            j0valid[iij0] = false;
                                                            _ij0[1] = iij0;
                                                            break;
                                                          }
                                                        }
                                                        j0 = j0array[ij0];
                                                        cj0 = cj0array[ij0];
                                                        sj0 = sj0array[ij0];
                                                        {
                                                          IkReal evalcond[5];
                                                          IkReal x439 = IKcos(j0);
                                                          IkReal x440 = IKsin(j0);
                                                          IkReal x441 = ((1.0) * x440);
                                                          IkReal x442 = (new_r11 * x440);
                                                          IkReal x443 = (new_r22 * x439);
                                                          evalcond[0] = (((new_r01 * x439)) + x442);
                                                          evalcond[1] =
                                                              ((((-1.0) * new_r00 * x441)) + ((new_r10 * x439)));
                                                          evalcond[2] =
                                                              ((((-1.0) * new_r01 * x441)) + ((new_r11 * x439)));
                                                          evalcond[3] = (((new_r22 * x442)) + ((new_r01 * x443)));
                                                          evalcond[4] =
                                                              (((new_r00 * x443)) + ((new_r10 * new_r22 * x440)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                                                            continue;
                                                          }
                                                        }

                                                        {
                                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                          vinfos[0].jointtype = 1;
                                                          vinfos[0].foffset = j0;
                                                          vinfos[0].indices[0] = _ij0[0];
                                                          vinfos[0].indices[1] = _ij0[1];
                                                          vinfos[0].maxsolutions = _nj0;
                                                          vinfos[1].jointtype = 1;
                                                          vinfos[1].foffset = j1;
                                                          vinfos[1].indices[0] = _ij1[0];
                                                          vinfos[1].indices[1] = _ij1[1];
                                                          vinfos[1].maxsolutions = _nj1;
                                                          vinfos[2].jointtype = 1;
                                                          vinfos[2].foffset = j2;
                                                          vinfos[2].indices[0] = _ij2[0];
                                                          vinfos[2].indices[1] = _ij2[1];
                                                          vinfos[2].maxsolutions = _nj2;
                                                          vinfos[3].jointtype = 1;
                                                          vinfos[3].foffset = j3;
                                                          vinfos[3].indices[0] = _ij3[0];
                                                          vinfos[3].indices[1] = _ij3[1];
                                                          vinfos[3].maxsolutions = _nj3;
                                                          vinfos[4].jointtype = 1;
                                                          vinfos[4].foffset = j4;
                                                          vinfos[4].indices[0] = _ij4[0];
                                                          vinfos[4].indices[1] = _ij4[1];
                                                          vinfos[4].maxsolutions = _nj4;
                                                          vinfos[5].jointtype = 1;
                                                          vinfos[5].foffset = j5;
                                                          vinfos[5].indices[0] = _ij5[0];
                                                          vinfos[5].indices[1] = _ij5[1];
                                                          vinfos[5].maxsolutions = _nj5;
                                                          vinfos[6].jointtype = 1;
                                                          vinfos[6].foffset = j6;
                                                          vinfos[6].indices[0] = _ij6[0];
                                                          vinfos[6].indices[1] = _ij6[1];
                                                          vinfos[6].maxsolutions = _nj6;
                                                          std::vector<int> vfree(0);
                                                          solutions.AddSolution(vinfos, vfree);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }

                                              } else {
                                                {
                                                  IkReal j0array[2], cj0array[2], sj0array[2];
                                                  bool j0valid[2] = {false};
                                                  _nj0 = 2;
                                                  CheckValue<IkReal> x445 = IKatan2WithCheck(
                                                      IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x445.valid) {
                                                    continue;
                                                  }
                                                  IkReal x444 = x445.value;
                                                  j0array[0] = ((-1.0) * x444);
                                                  sj0array[0] = IKsin(j0array[0]);
                                                  cj0array[0] = IKcos(j0array[0]);
                                                  j0array[1] = ((3.14159265358979) + (((-1.0) * x444)));
                                                  sj0array[1] = IKsin(j0array[1]);
                                                  cj0array[1] = IKcos(j0array[1]);
                                                  if (j0array[0] > IKPI) {
                                                    j0array[0] -= IK2PI;
                                                  } else if (j0array[0] < -IKPI) {
                                                    j0array[0] += IK2PI;
                                                  }
                                                  j0valid[0] = true;
                                                  if (j0array[1] > IKPI) {
                                                    j0array[1] -= IK2PI;
                                                  } else if (j0array[1] < -IKPI) {
                                                    j0array[1] += IK2PI;
                                                  }
                                                  j0valid[1] = true;
                                                  for (int ij0 = 0; ij0 < 2; ++ij0) {
                                                    if (!j0valid[ij0]) {
                                                      continue;
                                                    }
                                                    _ij0[0] = ij0;
                                                    _ij0[1] = -1;
                                                    for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                                                      if (j0valid[iij0] &&
                                                          IKabs(cj0array[ij0] - cj0array[iij0]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj0array[ij0] - sj0array[iij0]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j0valid[iij0] = false;
                                                        _ij0[1] = iij0;
                                                        break;
                                                      }
                                                    }
                                                    j0 = j0array[ij0];
                                                    cj0 = cj0array[ij0];
                                                    sj0 = sj0array[ij0];
                                                    {
                                                      IkReal evalcond[5];
                                                      IkReal x446 = IKcos(j0);
                                                      IkReal x447 = IKsin(j0);
                                                      IkReal x448 = (new_r10 * x447);
                                                      IkReal x449 = ((1.0) * x447);
                                                      IkReal x450 = (new_r00 * x446);
                                                      evalcond[0] = (x448 + x450);
                                                      evalcond[1] = ((((-1.0) * new_r00 * x449)) + ((new_r10 * x446)));
                                                      evalcond[2] = ((((-1.0) * new_r01 * x449)) + ((new_r11 * x446)));
                                                      evalcond[3] =
                                                          (((new_r01 * new_r22 * x446)) + ((new_r11 * new_r22 * x447)));
                                                      evalcond[4] = (((new_r22 * x448)) + ((new_r22 * x450)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 1;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 1;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 1;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j6;
                                                      vinfos[6].indices[0] = _ij6[0];
                                                      vinfos[6].indices[1] = _ij6[1];
                                                      vinfos[6].maxsolutions = _nj6;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement) {
                                          bool bgotonextstatement = true;
                                          do {
                                            if (1) {
                                              bgotonextstatement = false;
                                              continue;  // branch miss [j0]
                                            }
                                          } while (0);
                                          if (bgotonextstatement) {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }

                            } else {
                              {
                                IkReal j0array[1], cj0array[1], sj0array[1];
                                bool j0valid[1] = {false};
                                _nj0 = 1;
                                CheckValue<IkReal> x452 = IKPowWithIntegerCheck(sj1, -1);
                                if (!x452.valid) {
                                  continue;
                                }
                                IkReal x451 = x452.value;
                                CheckValue<IkReal> x453 = IKPowWithIntegerCheck(cj2, -1);
                                if (!x453.valid) {
                                  continue;
                                }
                                if (IKabs((x451 * (x453.value) *
                                           (((((-1.0) * new_r01 * sj1)) + (((-1.0) * cj1 * new_r02 * sj2)))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs((new_r02 * x451)) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr((x451 * (x453.value) *
                                                 (((((-1.0) * new_r01 * sj1)) + (((-1.0) * cj1 * new_r02 * sj2)))))) +
                                          IKsqr((new_r02 * x451)) - 1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j0array[0] =
                                    IKatan2((x451 * (x453.value) *
                                             (((((-1.0) * new_r01 * sj1)) + (((-1.0) * cj1 * new_r02 * sj2))))),
                                            (new_r02 * x451));
                                sj0array[0] = IKsin(j0array[0]);
                                cj0array[0] = IKcos(j0array[0]);
                                if (j0array[0] > IKPI) {
                                  j0array[0] -= IK2PI;
                                } else if (j0array[0] < -IKPI) {
                                  j0array[0] += IK2PI;
                                }
                                j0valid[0] = true;
                                for (int ij0 = 0; ij0 < 1; ++ij0) {
                                  if (!j0valid[ij0]) {
                                    continue;
                                  }
                                  _ij0[0] = ij0;
                                  _ij0[1] = -1;
                                  for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                    if (j0valid[iij0] &&
                                        IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                                      j0valid[iij0] = false;
                                      _ij0[1] = iij0;
                                      break;
                                    }
                                  }
                                  j0 = j0array[ij0];
                                  cj0 = cj0array[ij0];
                                  sj0 = sj0array[ij0];
                                  {
                                    IkReal evalcond[18];
                                    IkReal x454 = IKcos(j0);
                                    IkReal x455 = IKsin(j0);
                                    IkReal x456 = ((1.0) * cj2);
                                    IkReal x457 = ((1.0) * sj1);
                                    IkReal x458 = ((1.0) * cj1);
                                    IkReal x459 = ((1.0) * sj2);
                                    IkReal x460 = (new_r10 * x455);
                                    IkReal x461 = (new_r01 * x454);
                                    IkReal x462 = (new_r00 * x454);
                                    IkReal x463 = ((1.0) * x455);
                                    IkReal x464 = (new_r11 * x455);
                                    IkReal x465 = (new_r12 * x455);
                                    IkReal x466 = (sj2 * x455);
                                    IkReal x467 = (cj1 * x454);
                                    IkReal x468 = (cj2 * x455);
                                    IkReal x469 = (new_r02 * x454);
                                    evalcond[0] = ((((-1.0) * x454 * x457)) + new_r02);
                                    evalcond[1] = ((((-1.0) * x455 * x457)) + new_r12);
                                    evalcond[2] = (((new_r12 * x454)) + (((-1.0) * new_r02 * x463)));
                                    evalcond[3] = (x468 + new_r01 + ((sj2 * x467)));
                                    evalcond[4] = ((((-1.0) * x457)) + x469 + x465);
                                    evalcond[5] = (((cj1 * sj2)) + x461 + x464);
                                    evalcond[6] = ((((-1.0) * x456 * x467)) + x466 + new_r00);
                                    evalcond[7] = (((cj1 * x466)) + (((-1.0) * x454 * x456)) + new_r11);
                                    evalcond[8] =
                                        (((new_r10 * x454)) + (((-1.0) * x459)) + (((-1.0) * new_r00 * x463)));
                                    evalcond[9] =
                                        (((new_r11 * x454)) + (((-1.0) * new_r01 * x463)) + (((-1.0) * x456)));
                                    evalcond[10] = ((((-1.0) * cj1 * x456)) + x462 + x460);
                                    evalcond[11] =
                                        ((((-1.0) * x454 * x459)) + (((-1.0) * cj1 * x455 * x456)) + new_r10);
                                    evalcond[12] = (((cj1 * x465)) + (((-1.0) * new_r22 * x457)) + ((new_r02 * x467)));
                                    evalcond[13] =
                                        ((((-1.0) * new_r21 * x457)) + sj2 + ((cj1 * x461)) + ((cj1 * x464)));
                                    evalcond[14] = ((((-1.0) * new_r20 * x458)) + (((-1.0) * x457 * x462)) +
                                                    (((-1.0) * x457 * x460)));
                                    evalcond[15] = ((((-1.0) * new_r21 * x458)) + (((-1.0) * x457 * x464)) +
                                                    (((-1.0) * x457 * x461)));
                                    evalcond[16] = ((1.0) + (((-1.0) * new_r22 * x458)) + (((-1.0) * x457 * x465)) +
                                                    (((-1.0) * x457 * x469)));
                                    evalcond[17] = ((((-1.0) * new_r20 * x457)) + ((cj1 * x460)) + ((cj1 * x462)) +
                                                    (((-1.0) * x456)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH) {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j6;
                                    vinfos[6].indices[0] = _ij6[0];
                                    vinfos[6].indices[1] = _ij6[1];
                                    vinfos[6].maxsolutions = _nj6;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }

                        } else {
                          {
                            IkReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1] = {false};
                            _nj0 = 1;
                            CheckValue<IkReal> x470 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                            if (!x470.valid) {
                              continue;
                            }
                            CheckValue<IkReal> x471 =
                                IKatan2WithCheck(IkReal(new_r12), IkReal(new_r02), IKFAST_ATAN2_MAGTHRESH);
                            if (!x471.valid) {
                              continue;
                            }
                            j0array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x470.value))) + (x471.value));
                            sj0array[0] = IKsin(j0array[0]);
                            cj0array[0] = IKcos(j0array[0]);
                            if (j0array[0] > IKPI) {
                              j0array[0] -= IK2PI;
                            } else if (j0array[0] < -IKPI) {
                              j0array[0] += IK2PI;
                            }
                            j0valid[0] = true;
                            for (int ij0 = 0; ij0 < 1; ++ij0) {
                              if (!j0valid[ij0]) {
                                continue;
                              }
                              _ij0[0] = ij0;
                              _ij0[1] = -1;
                              for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                                if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                                  j0valid[iij0] = false;
                                  _ij0[1] = iij0;
                                  break;
                                }
                              }
                              j0 = j0array[ij0];
                              cj0 = cj0array[ij0];
                              sj0 = sj0array[ij0];
                              {
                                IkReal evalcond[18];
                                IkReal x472 = IKcos(j0);
                                IkReal x473 = IKsin(j0);
                                IkReal x474 = ((1.0) * cj2);
                                IkReal x475 = ((1.0) * sj1);
                                IkReal x476 = ((1.0) * cj1);
                                IkReal x477 = ((1.0) * sj2);
                                IkReal x478 = (new_r10 * x473);
                                IkReal x479 = (new_r01 * x472);
                                IkReal x480 = (new_r00 * x472);
                                IkReal x481 = ((1.0) * x473);
                                IkReal x482 = (new_r11 * x473);
                                IkReal x483 = (new_r12 * x473);
                                IkReal x484 = (sj2 * x473);
                                IkReal x485 = (cj1 * x472);
                                IkReal x486 = (cj2 * x473);
                                IkReal x487 = (new_r02 * x472);
                                evalcond[0] = ((((-1.0) * x472 * x475)) + new_r02);
                                evalcond[1] = ((((-1.0) * x473 * x475)) + new_r12);
                                evalcond[2] = (((new_r12 * x472)) + (((-1.0) * new_r02 * x481)));
                                evalcond[3] = (x486 + ((sj2 * x485)) + new_r01);
                                evalcond[4] = ((((-1.0) * x475)) + x483 + x487);
                                evalcond[5] = (((cj1 * sj2)) + x482 + x479);
                                evalcond[6] = ((((-1.0) * x474 * x485)) + x484 + new_r00);
                                evalcond[7] = ((((-1.0) * x472 * x474)) + ((cj1 * x484)) + new_r11);
                                evalcond[8] = ((((-1.0) * new_r00 * x481)) + ((new_r10 * x472)) + (((-1.0) * x477)));
                                evalcond[9] = ((((-1.0) * new_r01 * x481)) + ((new_r11 * x472)) + (((-1.0) * x474)));
                                evalcond[10] = ((((-1.0) * cj1 * x474)) + x480 + x478);
                                evalcond[11] = ((((-1.0) * x472 * x477)) + (((-1.0) * cj1 * x473 * x474)) + new_r10);
                                evalcond[12] = (((new_r02 * x485)) + (((-1.0) * new_r22 * x475)) + ((cj1 * x483)));
                                evalcond[13] = (sj2 + (((-1.0) * new_r21 * x475)) + ((cj1 * x479)) + ((cj1 * x482)));
                                evalcond[14] =
                                    ((((-1.0) * x475 * x480)) + (((-1.0) * x475 * x478)) + (((-1.0) * new_r20 * x476)));
                                evalcond[15] =
                                    ((((-1.0) * x475 * x482)) + (((-1.0) * x475 * x479)) + (((-1.0) * new_r21 * x476)));
                                evalcond[16] = ((1.0) + (((-1.0) * x475 * x483)) + (((-1.0) * x475 * x487)) +
                                                (((-1.0) * new_r22 * x476)));
                                evalcond[17] =
                                    ((((-1.0) * x474)) + ((cj1 * x478)) + ((cj1 * x480)) + (((-1.0) * new_r20 * x475)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH) {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 1;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 1;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 1;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j6;
                                vinfos[6].indices[0] = _ij6[0];
                                vinfos[6].indices[1] = _ij6[1];
                                vinfos[6].maxsolutions = _nj6;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

            } else {
              {
                IkReal j0array[1], cj0array[1], sj0array[1];
                bool j0valid[1] = {false};
                _nj0 = 1;
                CheckValue<IkReal> x488 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                if (!x488.valid) {
                  continue;
                }
                CheckValue<IkReal> x489 = IKatan2WithCheck(IkReal(new_r12), IkReal(new_r02), IKFAST_ATAN2_MAGTHRESH);
                if (!x489.valid) {
                  continue;
                }
                j0array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x488.value))) + (x489.value));
                sj0array[0] = IKsin(j0array[0]);
                cj0array[0] = IKcos(j0array[0]);
                if (j0array[0] > IKPI) {
                  j0array[0] -= IK2PI;
                } else if (j0array[0] < -IKPI) {
                  j0array[0] += IK2PI;
                }
                j0valid[0] = true;
                for (int ij0 = 0; ij0 < 1; ++ij0) {
                  if (!j0valid[ij0]) {
                    continue;
                  }
                  _ij0[0] = ij0;
                  _ij0[1] = -1;
                  for (int iij0 = ij0 + 1; iij0 < 1; ++iij0) {
                    if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                        IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH) {
                      j0valid[iij0] = false;
                      _ij0[1] = iij0;
                      break;
                    }
                  }
                  j0 = j0array[ij0];
                  cj0 = cj0array[ij0];
                  sj0 = sj0array[ij0];
                  {
                    IkReal evalcond[8];
                    IkReal x490 = IKcos(j0);
                    IkReal x491 = IKsin(j0);
                    IkReal x492 = ((1.0) * cj1);
                    IkReal x493 = ((1.0) * sj1);
                    IkReal x494 = (new_r12 * x491);
                    IkReal x495 = (new_r02 * x490);
                    evalcond[0] = ((((-1.0) * x490 * x493)) + new_r02);
                    evalcond[1] = ((((-1.0) * x491 * x493)) + new_r12);
                    evalcond[2] = ((((-1.0) * new_r02 * x491)) + ((new_r12 * x490)));
                    evalcond[3] = ((((-1.0) * x493)) + x494 + x495);
                    evalcond[4] = ((((-1.0) * new_r22 * x493)) + ((cj1 * x494)) + ((cj1 * x495)));
                    evalcond[5] = ((((-1.0) * new_r20 * x492)) + (((-1.0) * new_r10 * x491 * x493)) +
                                   (((-1.0) * new_r00 * x490 * x493)));
                    evalcond[6] = ((((-1.0) * new_r21 * x492)) + (((-1.0) * new_r01 * x490 * x493)) +
                                   (((-1.0) * new_r11 * x491 * x493)));
                    evalcond[7] =
                        ((1.0) + (((-1.0) * x493 * x495)) + (((-1.0) * x493 * x494)) + (((-1.0) * new_r22 * x492)));
                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                      continue;
                    }
                  }

                  {
                    IkReal j2eval[3];
                    j2eval[0] = sj1;
                    j2eval[1] = IKsign(sj1);
                    j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 ||
                        IKabs(j2eval[2]) < 0.0000010000000000) {
                      {
                        IkReal j2eval[2];
                        j2eval[0] = sj0;
                        j2eval[1] = sj1;
                        if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000) {
                          {
                            IkReal j2eval[3];
                            j2eval[0] = cj0;
                            j2eval[1] = cj1;
                            j2eval[2] = sj1;
                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 ||
                                IKabs(j2eval[2]) < 0.0000010000000000) {
                              {
                                IkReal evalcond[5];
                                bool bgotonextstatement = true;
                                do {
                                  evalcond[0] = ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))),
                                                         6.28318530717959)));
                                  evalcond[1] = new_r02;
                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                      IKabs(evalcond[1]) < 0.0000050000000000) {
                                    bgotonextstatement = false;
                                    {
                                      IkReal j2eval[3];
                                      sj0 = 1.0;
                                      cj0 = 0;
                                      j0 = 1.5707963267949;
                                      j2eval[0] = sj1;
                                      j2eval[1] = IKsign(sj1);
                                      j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                      if (IKabs(j2eval[0]) < 0.0000010000000000 ||
                                          IKabs(j2eval[1]) < 0.0000010000000000 ||
                                          IKabs(j2eval[2]) < 0.0000010000000000) {
                                        {
                                          IkReal j2eval[3];
                                          sj0 = 1.0;
                                          cj0 = 0;
                                          j0 = 1.5707963267949;
                                          j2eval[0] = cj1;
                                          j2eval[1] = IKsign(cj1);
                                          j2eval[2] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                          if (IKabs(j2eval[0]) < 0.0000010000000000 ||
                                              IKabs(j2eval[1]) < 0.0000010000000000 ||
                                              IKabs(j2eval[2]) < 0.0000010000000000) {
                                            {
                                              IkReal j2eval[1];
                                              sj0 = 1.0;
                                              cj0 = 0;
                                              j0 = 1.5707963267949;
                                              j2eval[0] = sj1;
                                              if (IKabs(j2eval[0]) < 0.0000010000000000) {
                                                {
                                                  IkReal evalcond[4];
                                                  bool bgotonextstatement = true;
                                                  do {
                                                    evalcond[0] = ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) + (IKabs(j1))),
                                                                           6.28318530717959)));
                                                    evalcond[1] = new_r20;
                                                    evalcond[2] = new_r12;
                                                    evalcond[3] = new_r21;
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[3]) < 0.0000050000000000) {
                                                      bgotonextstatement = false;
                                                      {
                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                        bool j2valid[1] = {false};
                                                        _nj2 = 1;
                                                        if (IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(IKsqr(((-1.0) * new_r11)) + IKsqr(new_r10) - 1) <=
                                                                IKFAST_SINCOS_THRESH)
                                                          continue;
                                                        j2array[0] = IKatan2(((-1.0) * new_r11), new_r10);
                                                        sj2array[0] = IKsin(j2array[0]);
                                                        cj2array[0] = IKcos(j2array[0]);
                                                        if (j2array[0] > IKPI) {
                                                          j2array[0] -= IK2PI;
                                                        } else if (j2array[0] < -IKPI) {
                                                          j2array[0] += IK2PI;
                                                        }
                                                        j2valid[0] = true;
                                                        for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                          if (!j2valid[ij2]) {
                                                            continue;
                                                          }
                                                          _ij2[0] = ij2;
                                                          _ij2[1] = -1;
                                                          for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                            if (j2valid[iij2] &&
                                                                IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j2valid[iij2] = false;
                                                              _ij2[1] = iij2;
                                                              break;
                                                            }
                                                          }
                                                          j2 = j2array[ij2];
                                                          cj2 = cj2array[ij2];
                                                          sj2 = sj2array[ij2];
                                                          {
                                                            IkReal evalcond[4];
                                                            IkReal x496 = IKsin(j2);
                                                            IkReal x497 = ((1.0) * (IKcos(j2)));
                                                            evalcond[0] = (x496 + new_r11);
                                                            evalcond[1] = ((((-1.0) * x497)) + new_r10);
                                                            evalcond[2] = ((((-1.0) * x496)) + (((-1.0) * new_r00)));
                                                            evalcond[3] = ((((-1.0) * x497)) + (((-1.0) * new_r01)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                              continue;
                                                            }
                                                          }

                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 1;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 1;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 1;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j6;
                                                            vinfos[6].indices[0] = _ij6[0];
                                                            vinfos[6].indices[1] = _ij6[1];
                                                            vinfos[6].maxsolutions = _nj6;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {
                                                    bool bgotonextstatement = true;
                                                    do {
                                                      evalcond[0] = ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((-3.14159265358979) + j1)))),
                                                                             6.28318530717959)));
                                                      evalcond[1] = new_r20;
                                                      evalcond[2] = new_r12;
                                                      evalcond[3] = new_r21;
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                          IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                          IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                          IKabs(evalcond[3]) < 0.0000050000000000) {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j2array[1], cj2array[1], sj2array[1];
                                                          bool j2valid[1] = {false};
                                                          _nj2 = 1;
                                                          if (IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(new_r11) + IKsqr(((-1.0) * new_r10)) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j2array[0] = IKatan2(new_r11, ((-1.0) * new_r10));
                                                          sj2array[0] = IKsin(j2array[0]);
                                                          cj2array[0] = IKcos(j2array[0]);
                                                          if (j2array[0] > IKPI) {
                                                            j2array[0] -= IK2PI;
                                                          } else if (j2array[0] < -IKPI) {
                                                            j2array[0] += IK2PI;
                                                          }
                                                          j2valid[0] = true;
                                                          for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                            if (!j2valid[ij2]) {
                                                              continue;
                                                            }
                                                            _ij2[0] = ij2;
                                                            _ij2[1] = -1;
                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                              if (j2valid[iij2] &&
                                                                  IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                      IKFAST_SOLUTION_THRESH) {
                                                                j2valid[iij2] = false;
                                                                _ij2[1] = iij2;
                                                                break;
                                                              }
                                                            }
                                                            j2 = j2array[ij2];
                                                            cj2 = cj2array[ij2];
                                                            sj2 = sj2array[ij2];
                                                            {
                                                              IkReal evalcond[4];
                                                              IkReal x498 = IKcos(j2);
                                                              IkReal x499 = ((1.0) * (IKsin(j2)));
                                                              evalcond[0] = (x498 + new_r10);
                                                              evalcond[1] = ((((-1.0) * x499)) + new_r11);
                                                              evalcond[2] = ((((-1.0) * x499)) + (((-1.0) * new_r00)));
                                                              evalcond[3] = ((((-1.0) * x498)) + (((-1.0) * new_r01)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 1;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 1;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 1;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j6;
                                                              vinfos[6].indices[0] = _ij6[0];
                                                              vinfos[6].indices[1] = _ij6[1];
                                                              vinfos[6].maxsolutions = _nj6;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement) {
                                                      bool bgotonextstatement = true;
                                                      do {
                                                        evalcond[0] = ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((-1.5707963267949) + j1)))),
                                                                               6.28318530717959)));
                                                        evalcond[1] = new_r22;
                                                        evalcond[2] = new_r11;
                                                        evalcond[3] = new_r10;
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                            IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                            IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                            IKabs(evalcond[3]) < 0.0000050000000000) {
                                                          bgotonextstatement = false;
                                                          {
                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                            bool j2valid[1] = {false};
                                                            _nj2 = 1;
                                                            if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                            sj2array[0] = IKsin(j2array[0]);
                                                            cj2array[0] = IKcos(j2array[0]);
                                                            if (j2array[0] > IKPI) {
                                                              j2array[0] -= IK2PI;
                                                            } else if (j2array[0] < -IKPI) {
                                                              j2array[0] += IK2PI;
                                                            }
                                                            j2valid[0] = true;
                                                            for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                              if (!j2valid[ij2]) {
                                                                continue;
                                                              }
                                                              _ij2[0] = ij2;
                                                              _ij2[1] = -1;
                                                              for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                if (j2valid[iij2] &&
                                                                    IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                        IKFAST_SOLUTION_THRESH) {
                                                                  j2valid[iij2] = false;
                                                                  _ij2[1] = iij2;
                                                                  break;
                                                                }
                                                              }
                                                              j2 = j2array[ij2];
                                                              cj2 = cj2array[ij2];
                                                              sj2 = sj2array[ij2];
                                                              {
                                                                IkReal evalcond[4];
                                                                IkReal x500 = IKcos(j2);
                                                                IkReal x501 = ((1.0) * (IKsin(j2)));
                                                                evalcond[0] = (x500 + new_r20);
                                                                evalcond[1] = ((((-1.0) * x501)) + new_r21);
                                                                evalcond[2] =
                                                                    ((((-1.0) * x501)) + (((-1.0) * new_r00)));
                                                                evalcond[3] =
                                                                    ((((-1.0) * new_r01)) + (((-1.0) * x500)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 1;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement) {
                                                        bool bgotonextstatement = true;
                                                        do {
                                                          evalcond[0] = ((-3.14159265358979) +
                                                                         (IKfmod(((3.14159265358979) +
                                                                                  (IKabs(((1.5707963267949) + j1)))),
                                                                                 6.28318530717959)));
                                                          evalcond[1] = new_r22;
                                                          evalcond[2] = new_r11;
                                                          evalcond[3] = new_r10;
                                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                              IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                              IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                              IKabs(evalcond[3]) < 0.0000050000000000) {
                                                            bgotonextstatement = false;
                                                            {
                                                              IkReal j2array[1], cj2array[1], sj2array[1];
                                                              bool j2valid[1] = {false};
                                                              _nj2 = 1;
                                                              if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) -
                                                                        1) <= IKFAST_SINCOS_THRESH)
                                                                continue;
                                                              j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                              sj2array[0] = IKsin(j2array[0]);
                                                              cj2array[0] = IKcos(j2array[0]);
                                                              if (j2array[0] > IKPI) {
                                                                j2array[0] -= IK2PI;
                                                              } else if (j2array[0] < -IKPI) {
                                                                j2array[0] += IK2PI;
                                                              }
                                                              j2valid[0] = true;
                                                              for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                if (!j2valid[ij2]) {
                                                                  continue;
                                                                }
                                                                _ij2[0] = ij2;
                                                                _ij2[1] = -1;
                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                  if (j2valid[iij2] &&
                                                                      IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                          IKFAST_SOLUTION_THRESH &&
                                                                      IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                          IKFAST_SOLUTION_THRESH) {
                                                                    j2valid[iij2] = false;
                                                                    _ij2[1] = iij2;
                                                                    break;
                                                                  }
                                                                }
                                                                j2 = j2array[ij2];
                                                                cj2 = cj2array[ij2];
                                                                sj2 = sj2array[ij2];
                                                                {
                                                                  IkReal evalcond[4];
                                                                  IkReal x502 = IKsin(j2);
                                                                  IkReal x503 = ((1.0) * (IKcos(j2)));
                                                                  evalcond[0] = (x502 + new_r21);
                                                                  evalcond[1] = ((((-1.0) * x503)) + new_r20);
                                                                  evalcond[2] =
                                                                      ((((-1.0) * new_r00)) + (((-1.0) * x502)));
                                                                  evalcond[3] =
                                                                      ((((-1.0) * x503)) + (((-1.0) * new_r01)));
                                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH) {
                                                                    continue;
                                                                  }
                                                                }

                                                                {
                                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                      7);
                                                                  vinfos[0].jointtype = 1;
                                                                  vinfos[0].foffset = j0;
                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                  vinfos[0].maxsolutions = _nj0;
                                                                  vinfos[1].jointtype = 1;
                                                                  vinfos[1].foffset = j1;
                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                  vinfos[1].maxsolutions = _nj1;
                                                                  vinfos[2].jointtype = 1;
                                                                  vinfos[2].foffset = j2;
                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                  vinfos[2].maxsolutions = _nj2;
                                                                  vinfos[3].jointtype = 1;
                                                                  vinfos[3].foffset = j3;
                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                  vinfos[3].maxsolutions = _nj3;
                                                                  vinfos[4].jointtype = 1;
                                                                  vinfos[4].foffset = j4;
                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                  vinfos[4].maxsolutions = _nj4;
                                                                  vinfos[5].jointtype = 1;
                                                                  vinfos[5].foffset = j5;
                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                  vinfos[5].maxsolutions = _nj5;
                                                                  vinfos[6].jointtype = 1;
                                                                  vinfos[6].foffset = j6;
                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                  vinfos[6].maxsolutions = _nj6;
                                                                  std::vector<int> vfree(0);
                                                                  solutions.AddSolution(vinfos, vfree);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } while (0);
                                                        if (bgotonextstatement) {
                                                          bool bgotonextstatement = true;
                                                          do {
                                                            evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                bool j2valid[1] = {false};
                                                                _nj2 = 1;
                                                                if (IKabs(((-1.0) * new_r00)) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(((-1.0) * new_r01)) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                          IKsqr(((-1.0) * new_r01)) - 1) <=
                                                                        IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j2array[0] =
                                                                    IKatan2(((-1.0) * new_r00), ((-1.0) * new_r01));
                                                                sj2array[0] = IKsin(j2array[0]);
                                                                cj2array[0] = IKcos(j2array[0]);
                                                                if (j2array[0] > IKPI) {
                                                                  j2array[0] -= IK2PI;
                                                                } else if (j2array[0] < -IKPI) {
                                                                  j2array[0] += IK2PI;
                                                                }
                                                                j2valid[0] = true;
                                                                for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                  if (!j2valid[ij2]) {
                                                                    continue;
                                                                  }
                                                                  _ij2[0] = ij2;
                                                                  _ij2[1] = -1;
                                                                  for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                    if (j2valid[iij2] &&
                                                                        IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j2valid[iij2] = false;
                                                                      _ij2[1] = iij2;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j2 = j2array[ij2];
                                                                  cj2 = cj2array[ij2];
                                                                  sj2 = sj2array[ij2];
                                                                  {
                                                                    IkReal evalcond[6];
                                                                    IkReal x504 = IKsin(j2);
                                                                    IkReal x505 = IKcos(j2);
                                                                    IkReal x506 = ((-1.0) * x505);
                                                                    evalcond[0] = x504;
                                                                    evalcond[1] = (new_r22 * x504);
                                                                    evalcond[2] = x506;
                                                                    evalcond[3] = (new_r22 * x506);
                                                                    evalcond[4] =
                                                                        ((((-1.0) * new_r00)) + (((-1.0) * x504)));
                                                                    evalcond[5] =
                                                                        ((((-1.0) * new_r01)) + (((-1.0) * x505)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH) {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement) {
                                                            bool bgotonextstatement = true;
                                                            do {
                                                              if (1) {
                                                                bgotonextstatement = false;
                                                                continue;  // branch miss [j2]
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement) {
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }

                                              } else {
                                                {
                                                  IkReal j2array[1], cj2array[1], sj2array[1];
                                                  bool j2valid[1] = {false};
                                                  _nj2 = 1;
                                                  CheckValue<IkReal> x507 = IKPowWithIntegerCheck(sj1, -1);
                                                  if (!x507.valid) {
                                                    continue;
                                                  }
                                                  if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(((-1.0) * new_r20 * (x507.value))) <
                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(IKsqr(((-1.0) * new_r00)) +
                                                            IKsqr(((-1.0) * new_r20 * (x507.value))) - 1) <=
                                                          IKFAST_SINCOS_THRESH)
                                                    continue;
                                                  j2array[0] =
                                                      IKatan2(((-1.0) * new_r00), ((-1.0) * new_r20 * (x507.value)));
                                                  sj2array[0] = IKsin(j2array[0]);
                                                  cj2array[0] = IKcos(j2array[0]);
                                                  if (j2array[0] > IKPI) {
                                                    j2array[0] -= IK2PI;
                                                  } else if (j2array[0] < -IKPI) {
                                                    j2array[0] += IK2PI;
                                                  }
                                                  j2valid[0] = true;
                                                  for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                    if (!j2valid[ij2]) {
                                                      continue;
                                                    }
                                                    _ij2[0] = ij2;
                                                    _ij2[1] = -1;
                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                      if (j2valid[iij2] &&
                                                          IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j2valid[iij2] = false;
                                                        _ij2[1] = iij2;
                                                        break;
                                                      }
                                                    }
                                                    j2 = j2array[ij2];
                                                    cj2 = cj2array[ij2];
                                                    sj2 = sj2array[ij2];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x508 = IKsin(j2);
                                                      IkReal x509 = IKcos(j2);
                                                      IkReal x510 = ((1.0) * sj1);
                                                      IkReal x511 = ((1.0) * x509);
                                                      evalcond[0] = (((sj1 * x509)) + new_r20);
                                                      evalcond[1] = (((cj1 * x508)) + new_r11);
                                                      evalcond[2] = (new_r21 + (((-1.0) * x508 * x510)));
                                                      evalcond[3] = ((((-1.0) * cj1 * x511)) + new_r10);
                                                      evalcond[4] = ((((-1.0) * new_r00)) + (((-1.0) * x508)));
                                                      evalcond[5] = ((((-1.0) * new_r01)) + (((-1.0) * x511)));
                                                      evalcond[6] =
                                                          (((cj1 * new_r11)) + x508 + (((-1.0) * new_r21 * x510)));
                                                      evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * new_r20 * x510)) +
                                                                     (((-1.0) * x511)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 1;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 1;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 1;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j6;
                                                      vinfos[6].indices[0] = _ij6[0];
                                                      vinfos[6].indices[1] = _ij6[1];
                                                      vinfos[6].maxsolutions = _nj6;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            }

                                          } else {
                                            {
                                              IkReal j2array[1], cj2array[1], sj2array[1];
                                              bool j2valid[1] = {false};
                                              _nj2 = 1;
                                              CheckValue<IkReal> x512 = IKPowWithIntegerCheck(IKsign(cj1), -1);
                                              if (!x512.valid) {
                                                continue;
                                              }
                                              CheckValue<IkReal> x513 = IKatan2WithCheck(
                                                  IkReal(((-1.0) * new_r11)), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                              if (!x513.valid) {
                                                continue;
                                              }
                                              j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x512.value))) +
                                                            (x513.value));
                                              sj2array[0] = IKsin(j2array[0]);
                                              cj2array[0] = IKcos(j2array[0]);
                                              if (j2array[0] > IKPI) {
                                                j2array[0] -= IK2PI;
                                              } else if (j2array[0] < -IKPI) {
                                                j2array[0] += IK2PI;
                                              }
                                              j2valid[0] = true;
                                              for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                if (!j2valid[ij2]) {
                                                  continue;
                                                }
                                                _ij2[0] = ij2;
                                                _ij2[1] = -1;
                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                  if (j2valid[iij2] &&
                                                      IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                                    j2valid[iij2] = false;
                                                    _ij2[1] = iij2;
                                                    break;
                                                  }
                                                }
                                                j2 = j2array[ij2];
                                                cj2 = cj2array[ij2];
                                                sj2 = sj2array[ij2];
                                                {
                                                  IkReal evalcond[8];
                                                  IkReal x514 = IKsin(j2);
                                                  IkReal x515 = IKcos(j2);
                                                  IkReal x516 = ((1.0) * sj1);
                                                  IkReal x517 = ((1.0) * x515);
                                                  evalcond[0] = (new_r20 + ((sj1 * x515)));
                                                  evalcond[1] = (((cj1 * x514)) + new_r11);
                                                  evalcond[2] = ((((-1.0) * x514 * x516)) + new_r21);
                                                  evalcond[3] = ((((-1.0) * cj1 * x517)) + new_r10);
                                                  evalcond[4] = ((((-1.0) * x514)) + (((-1.0) * new_r00)));
                                                  evalcond[5] = ((((-1.0) * new_r01)) + (((-1.0) * x517)));
                                                  evalcond[6] =
                                                      (((cj1 * new_r11)) + x514 + (((-1.0) * new_r21 * x516)));
                                                  evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * new_r20 * x516)) +
                                                                 (((-1.0) * x517)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 1;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] = _ij0[0];
                                                  vinfos[0].indices[1] = _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 1;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] = _ij1[0];
                                                  vinfos[1].indices[1] = _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 1;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] = _ij2[0];
                                                  vinfos[2].indices[1] = _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 1;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] = _ij3[0];
                                                  vinfos[3].indices[1] = _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] = _ij4[0];
                                                  vinfos[4].indices[1] = _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] = _ij5[0];
                                                  vinfos[5].indices[1] = _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j6;
                                                  vinfos[6].indices[0] = _ij6[0];
                                                  vinfos[6].indices[1] = _ij6[1];
                                                  vinfos[6].maxsolutions = _nj6;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        }

                                      } else {
                                        {
                                          IkReal j2array[1], cj2array[1], sj2array[1];
                                          bool j2valid[1] = {false};
                                          _nj2 = 1;
                                          CheckValue<IkReal> x518 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                          if (!x518.valid) {
                                            continue;
                                          }
                                          CheckValue<IkReal> x519 = IKatan2WithCheck(
                                              IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                          if (!x519.valid) {
                                            continue;
                                          }
                                          j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x518.value))) +
                                                        (x519.value));
                                          sj2array[0] = IKsin(j2array[0]);
                                          cj2array[0] = IKcos(j2array[0]);
                                          if (j2array[0] > IKPI) {
                                            j2array[0] -= IK2PI;
                                          } else if (j2array[0] < -IKPI) {
                                            j2array[0] += IK2PI;
                                          }
                                          j2valid[0] = true;
                                          for (int ij2 = 0; ij2 < 1; ++ij2) {
                                            if (!j2valid[ij2]) {
                                              continue;
                                            }
                                            _ij2[0] = ij2;
                                            _ij2[1] = -1;
                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                              if (j2valid[iij2] &&
                                                  IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                                j2valid[iij2] = false;
                                                _ij2[1] = iij2;
                                                break;
                                              }
                                            }
                                            j2 = j2array[ij2];
                                            cj2 = cj2array[ij2];
                                            sj2 = sj2array[ij2];
                                            {
                                              IkReal evalcond[8];
                                              IkReal x520 = IKsin(j2);
                                              IkReal x521 = IKcos(j2);
                                              IkReal x522 = ((1.0) * sj1);
                                              IkReal x523 = ((1.0) * x521);
                                              evalcond[0] = (((sj1 * x521)) + new_r20);
                                              evalcond[1] = (((cj1 * x520)) + new_r11);
                                              evalcond[2] = ((((-1.0) * x520 * x522)) + new_r21);
                                              evalcond[3] = ((((-1.0) * cj1 * x523)) + new_r10);
                                              evalcond[4] = ((((-1.0) * x520)) + (((-1.0) * new_r00)));
                                              evalcond[5] = ((((-1.0) * x523)) + (((-1.0) * new_r01)));
                                              evalcond[6] = (((cj1 * new_r11)) + (((-1.0) * new_r21 * x522)) + x520);
                                              evalcond[7] =
                                                  (((cj1 * new_r10)) + (((-1.0) * new_r20 * x522)) + (((-1.0) * x523)));
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                              vinfos[0].jointtype = 1;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 1;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 1;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 1;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              vinfos[6].jointtype = 1;
                                              vinfos[6].foffset = j6;
                                              vinfos[6].indices[0] = _ij6[0];
                                              vinfos[6].indices[1] = _ij6[1];
                                              vinfos[6].maxsolutions = _nj6;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                } while (0);
                                if (bgotonextstatement) {
                                  bool bgotonextstatement = true;
                                  do {
                                    evalcond[0] = ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))),
                                                           6.28318530717959)));
                                    evalcond[1] = new_r02;
                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                        IKabs(evalcond[1]) < 0.0000050000000000) {
                                      bgotonextstatement = false;
                                      {
                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                        bool j2valid[1] = {false};
                                        _nj2 = 1;
                                        if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <= IKFAST_SINCOS_THRESH)
                                          continue;
                                        j2array[0] = IKatan2(new_r00, new_r01);
                                        sj2array[0] = IKsin(j2array[0]);
                                        cj2array[0] = IKcos(j2array[0]);
                                        if (j2array[0] > IKPI) {
                                          j2array[0] -= IK2PI;
                                        } else if (j2array[0] < -IKPI) {
                                          j2array[0] += IK2PI;
                                        }
                                        j2valid[0] = true;
                                        for (int ij2 = 0; ij2 < 1; ++ij2) {
                                          if (!j2valid[ij2]) {
                                            continue;
                                          }
                                          _ij2[0] = ij2;
                                          _ij2[1] = -1;
                                          for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                            if (j2valid[iij2] &&
                                                IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                              j2valid[iij2] = false;
                                              _ij2[1] = iij2;
                                              break;
                                            }
                                          }
                                          j2 = j2array[ij2];
                                          cj2 = cj2array[ij2];
                                          sj2 = sj2array[ij2];
                                          {
                                            IkReal evalcond[8];
                                            IkReal x524 = IKcos(j2);
                                            IkReal x525 = IKsin(j2);
                                            IkReal x526 = ((1.0) * sj1);
                                            IkReal x527 = ((1.0) * new_r11);
                                            IkReal x528 = ((1.0) * new_r10);
                                            IkReal x529 = ((1.0) * x524);
                                            evalcond[0] = (((sj1 * x524)) + new_r20);
                                            evalcond[1] = ((((-1.0) * x525)) + new_r00);
                                            evalcond[2] = ((((-1.0) * x529)) + new_r01);
                                            evalcond[3] = ((((-1.0) * x525 * x526)) + new_r21);
                                            evalcond[4] = ((((-1.0) * x527)) + ((cj1 * x525)));
                                            evalcond[5] = ((((-1.0) * cj1 * x529)) + (((-1.0) * x528)));
                                            evalcond[6] =
                                                ((((-1.0) * cj1 * x527)) + (((-1.0) * new_r21 * x526)) + x525);
                                            evalcond[7] = ((((-1.0) * cj1 * x528)) + (((-1.0) * new_r20 * x526)) +
                                                           (((-1.0) * x529)));
                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                            vinfos[0].jointtype = 1;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 1;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 1;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 1;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            vinfos[6].jointtype = 1;
                                            vinfos[6].foffset = j6;
                                            vinfos[6].indices[0] = _ij6[0];
                                            vinfos[6].indices[1] = _ij6[1];
                                            vinfos[6].maxsolutions = _nj6;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos, vfree);
                                          }
                                        }
                                      }
                                    }
                                  } while (0);
                                  if (bgotonextstatement) {
                                    bool bgotonextstatement = true;
                                    do {
                                      evalcond[0] = ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))),
                                                             6.28318530717959)));
                                      evalcond[1] = new_r22;
                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                          IKabs(evalcond[1]) < 0.0000050000000000) {
                                        bgotonextstatement = false;
                                        {
                                          IkReal j2array[1], cj2array[1], sj2array[1];
                                          bool j2valid[1] = {false};
                                          _nj2 = 1;
                                          if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <=
                                                  IKFAST_SINCOS_THRESH)
                                            continue;
                                          j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                          sj2array[0] = IKsin(j2array[0]);
                                          cj2array[0] = IKcos(j2array[0]);
                                          if (j2array[0] > IKPI) {
                                            j2array[0] -= IK2PI;
                                          } else if (j2array[0] < -IKPI) {
                                            j2array[0] += IK2PI;
                                          }
                                          j2valid[0] = true;
                                          for (int ij2 = 0; ij2 < 1; ++ij2) {
                                            if (!j2valid[ij2]) {
                                              continue;
                                            }
                                            _ij2[0] = ij2;
                                            _ij2[1] = -1;
                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                              if (j2valid[iij2] &&
                                                  IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                                j2valid[iij2] = false;
                                                _ij2[1] = iij2;
                                                break;
                                              }
                                            }
                                            j2 = j2array[ij2];
                                            cj2 = cj2array[ij2];
                                            sj2 = sj2array[ij2];
                                            {
                                              IkReal evalcond[8];
                                              IkReal x530 = IKcos(j2);
                                              IkReal x531 = IKsin(j2);
                                              IkReal x532 = ((1.0) * sj0);
                                              IkReal x533 = ((1.0) * x531);
                                              IkReal x534 = ((1.0) * x530);
                                              evalcond[0] = (x530 + new_r20);
                                              evalcond[1] = ((((-1.0) * x533)) + new_r21);
                                              evalcond[2] = (((sj0 * x530)) + new_r01);
                                              evalcond[3] = (((sj0 * x531)) + new_r00);
                                              evalcond[4] = ((((-1.0) * cj0 * x534)) + new_r11);
                                              evalcond[5] = (new_r10 + (((-1.0) * new_r02 * x533)));
                                              evalcond[6] =
                                                  ((((-1.0) * new_r00 * x532)) + (((-1.0) * x533)) + ((cj0 * new_r10)));
                                              evalcond[7] =
                                                  ((((-1.0) * x534)) + (((-1.0) * new_r01 * x532)) + ((cj0 * new_r11)));
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                              vinfos[0].jointtype = 1;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 1;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 1;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 1;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              vinfos[6].jointtype = 1;
                                              vinfos[6].foffset = j6;
                                              vinfos[6].indices[0] = _ij6[0];
                                              vinfos[6].indices[1] = _ij6[1];
                                              vinfos[6].maxsolutions = _nj6;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    } while (0);
                                    if (bgotonextstatement) {
                                      bool bgotonextstatement = true;
                                      do {
                                        evalcond[0] = ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))),
                                                               6.28318530717959)));
                                        evalcond[1] = new_r22;
                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                            IKabs(evalcond[1]) < 0.0000050000000000) {
                                          bgotonextstatement = false;
                                          {
                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                            bool j2valid[1] = {false};
                                            _nj2 = 1;
                                            if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <=
                                                    IKFAST_SINCOS_THRESH)
                                              continue;
                                            j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                            sj2array[0] = IKsin(j2array[0]);
                                            cj2array[0] = IKcos(j2array[0]);
                                            if (j2array[0] > IKPI) {
                                              j2array[0] -= IK2PI;
                                            } else if (j2array[0] < -IKPI) {
                                              j2array[0] += IK2PI;
                                            }
                                            j2valid[0] = true;
                                            for (int ij2 = 0; ij2 < 1; ++ij2) {
                                              if (!j2valid[ij2]) {
                                                continue;
                                              }
                                              _ij2[0] = ij2;
                                              _ij2[1] = -1;
                                              for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                if (j2valid[iij2] &&
                                                    IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                                  j2valid[iij2] = false;
                                                  _ij2[1] = iij2;
                                                  break;
                                                }
                                              }
                                              j2 = j2array[ij2];
                                              cj2 = cj2array[ij2];
                                              sj2 = sj2array[ij2];
                                              {
                                                IkReal evalcond[8];
                                                IkReal x535 = IKcos(j2);
                                                IkReal x536 = IKsin(j2);
                                                IkReal x537 = ((1.0) * sj0);
                                                IkReal x538 = ((1.0) * x535);
                                                evalcond[0] = (x536 + new_r21);
                                                evalcond[1] = ((((-1.0) * x538)) + new_r20);
                                                evalcond[2] = (((sj0 * x535)) + new_r01);
                                                evalcond[3] = (((sj0 * x536)) + new_r00);
                                                evalcond[4] = (((new_r02 * x536)) + new_r10);
                                                evalcond[5] = ((((-1.0) * cj0 * x538)) + new_r11);
                                                evalcond[6] = ((((-1.0) * x536)) + (((-1.0) * new_r00 * x537)) +
                                                               ((cj0 * new_r10)));
                                                evalcond[7] = ((((-1.0) * x538)) + (((-1.0) * new_r01 * x537)) +
                                                               ((cj0 * new_r11)));
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                vinfos[0].jointtype = 1;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 1;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 1;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 1;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                vinfos[6].jointtype = 1;
                                                vinfos[6].foffset = j6;
                                                vinfos[6].indices[0] = _ij6[0];
                                                vinfos[6].indices[1] = _ij6[1];
                                                vinfos[6].maxsolutions = _nj6;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      } while (0);
                                      if (bgotonextstatement) {
                                        bool bgotonextstatement = true;
                                        do {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                          evalcond[1] = new_r20;
                                          evalcond[2] = new_r02;
                                          evalcond[3] = new_r12;
                                          evalcond[4] = new_r21;
                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                              IKabs(evalcond[1]) < 0.0000050000000000 &&
                                              IKabs(evalcond[2]) < 0.0000050000000000 &&
                                              IKabs(evalcond[3]) < 0.0000050000000000 &&
                                              IKabs(evalcond[4]) < 0.0000050000000000) {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j2array[1], cj2array[1], sj2array[1];
                                              bool j2valid[1] = {false};
                                              _nj2 = 1;
                                              IkReal x539 = ((1.0) * new_r01);
                                              if (IKabs(((((-1.0) * cj0 * x539)) + (((-1.0) * new_r00 * sj0)))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(((((-1.0) * sj0 * x539)) + ((cj0 * new_r00)))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(IKsqr(((((-1.0) * cj0 * x539)) + (((-1.0) * new_r00 * sj0)))) +
                                                        IKsqr(((((-1.0) * sj0 * x539)) + ((cj0 * new_r00)))) - 1) <=
                                                      IKFAST_SINCOS_THRESH)
                                                continue;
                                              j2array[0] =
                                                  IKatan2(((((-1.0) * cj0 * x539)) + (((-1.0) * new_r00 * sj0))),
                                                          ((((-1.0) * sj0 * x539)) + ((cj0 * new_r00))));
                                              sj2array[0] = IKsin(j2array[0]);
                                              cj2array[0] = IKcos(j2array[0]);
                                              if (j2array[0] > IKPI) {
                                                j2array[0] -= IK2PI;
                                              } else if (j2array[0] < -IKPI) {
                                                j2array[0] += IK2PI;
                                              }
                                              j2valid[0] = true;
                                              for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                if (!j2valid[ij2]) {
                                                  continue;
                                                }
                                                _ij2[0] = ij2;
                                                _ij2[1] = -1;
                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                  if (j2valid[iij2] &&
                                                      IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                                    j2valid[iij2] = false;
                                                    _ij2[1] = iij2;
                                                    break;
                                                  }
                                                }
                                                j2 = j2array[ij2];
                                                cj2 = cj2array[ij2];
                                                sj2 = sj2array[ij2];
                                                {
                                                  IkReal evalcond[8];
                                                  IkReal x540 = IKsin(j2);
                                                  IkReal x541 = IKcos(j2);
                                                  IkReal x542 = ((1.0) * sj0);
                                                  IkReal x543 = ((1.0) * x541);
                                                  IkReal x544 = (sj0 * x540);
                                                  IkReal x545 = (cj0 * x540);
                                                  IkReal x546 = (cj0 * x543);
                                                  evalcond[0] = (((new_r11 * sj0)) + x540 + ((cj0 * new_r01)));
                                                  evalcond[1] = (((sj0 * x541)) + x545 + new_r01);
                                                  evalcond[2] =
                                                      (((new_r10 * sj0)) + (((-1.0) * x543)) + ((cj0 * new_r00)));
                                                  evalcond[3] = ((((-1.0) * x540)) + (((-1.0) * new_r00 * x542)) +
                                                                 ((cj0 * new_r10)));
                                                  evalcond[4] = ((((-1.0) * new_r01 * x542)) + (((-1.0) * x543)) +
                                                                 ((cj0 * new_r11)));
                                                  evalcond[5] = ((((-1.0) * x546)) + x544 + new_r00);
                                                  evalcond[6] = ((((-1.0) * x546)) + x544 + new_r11);
                                                  evalcond[7] =
                                                      ((((-1.0) * x541 * x542)) + (((-1.0) * x545)) + new_r10);
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 1;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] = _ij0[0];
                                                  vinfos[0].indices[1] = _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 1;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] = _ij1[0];
                                                  vinfos[1].indices[1] = _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 1;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] = _ij2[0];
                                                  vinfos[2].indices[1] = _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 1;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] = _ij3[0];
                                                  vinfos[3].indices[1] = _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] = _ij4[0];
                                                  vinfos[4].indices[1] = _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] = _ij5[0];
                                                  vinfos[5].indices[1] = _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j6;
                                                  vinfos[6].indices[0] = _ij6[0];
                                                  vinfos[6].indices[1] = _ij6[1];
                                                  vinfos[6].maxsolutions = _nj6;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement) {
                                          bool bgotonextstatement = true;
                                          do {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))),
                                                         6.28318530717959)));
                                            evalcond[1] = new_r20;
                                            evalcond[2] = new_r02;
                                            evalcond[3] = new_r12;
                                            evalcond[4] = new_r21;
                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                IKabs(evalcond[3]) < 0.0000050000000000 &&
                                                IKabs(evalcond[4]) < 0.0000050000000000) {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                bool j2valid[1] = {false};
                                                _nj2 = 1;
                                                IkReal x547 = ((1.0) * sj0);
                                                if (IKabs(((((-1.0) * new_r00 * x547)) + ((cj0 * new_r01)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x547)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(((((-1.0) * new_r00 * x547)) + ((cj0 * new_r01)))) +
                                                          IKsqr(((((-1.0) * cj0 * new_r00)) +
                                                                 (((-1.0) * new_r01 * x547)))) -
                                                          1) <= IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j2array[0] =
                                                    IKatan2(((((-1.0) * new_r00 * x547)) + ((cj0 * new_r01))),
                                                            ((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x547))));
                                                sj2array[0] = IKsin(j2array[0]);
                                                cj2array[0] = IKcos(j2array[0]);
                                                if (j2array[0] > IKPI) {
                                                  j2array[0] -= IK2PI;
                                                } else if (j2array[0] < -IKPI) {
                                                  j2array[0] += IK2PI;
                                                }
                                                j2valid[0] = true;
                                                for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                  if (!j2valid[ij2]) {
                                                    continue;
                                                  }
                                                  _ij2[0] = ij2;
                                                  _ij2[1] = -1;
                                                  for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                    if (j2valid[iij2] &&
                                                        IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                            IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                            IKFAST_SOLUTION_THRESH) {
                                                      j2valid[iij2] = false;
                                                      _ij2[1] = iij2;
                                                      break;
                                                    }
                                                  }
                                                  j2 = j2array[ij2];
                                                  cj2 = cj2array[ij2];
                                                  sj2 = sj2array[ij2];
                                                  {
                                                    IkReal evalcond[8];
                                                    IkReal x548 = IKsin(j2);
                                                    IkReal x549 = IKcos(j2);
                                                    IkReal x550 = ((1.0) * sj0);
                                                    IkReal x551 = ((1.0) * x548);
                                                    IkReal x552 = (sj0 * x549);
                                                    IkReal x553 = ((1.0) * x549);
                                                    IkReal x554 = (cj0 * x551);
                                                    evalcond[0] = (((new_r10 * sj0)) + x549 + ((cj0 * new_r00)));
                                                    evalcond[1] =
                                                        (((new_r11 * sj0)) + (((-1.0) * x551)) + ((cj0 * new_r01)));
                                                    evalcond[2] = (((sj0 * x548)) + ((cj0 * x549)) + new_r00);
                                                    evalcond[3] = ((((-1.0) * new_r00 * x550)) + (((-1.0) * x551)) +
                                                                   ((cj0 * new_r10)));
                                                    evalcond[4] = ((((-1.0) * new_r01 * x550)) + (((-1.0) * x553)) +
                                                                   ((cj0 * new_r11)));
                                                    evalcond[5] = ((((-1.0) * x554)) + x552 + new_r01);
                                                    evalcond[6] = ((((-1.0) * x554)) + x552 + new_r10);
                                                    evalcond[7] =
                                                        ((((-1.0) * x548 * x550)) + (((-1.0) * cj0 * x553)) + new_r11);
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 1;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 1;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 1;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 1;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j6;
                                                    vinfos[6].indices[0] = _ij6[0];
                                                    vinfos[6].indices[1] = _ij6[1];
                                                    vinfos[6].maxsolutions = _nj6;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement) {
                                            bool bgotonextstatement = true;
                                            do {
                                              evalcond[0] =
                                                  ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                              evalcond[1] = new_r12;
                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                  IKabs(evalcond[1]) < 0.0000050000000000) {
                                                bgotonextstatement = false;
                                                {
                                                  IkReal j2array[1], cj2array[1], sj2array[1];
                                                  bool j2valid[1] = {false};
                                                  _nj2 = 1;
                                                  if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <=
                                                          IKFAST_SINCOS_THRESH)
                                                    continue;
                                                  j2array[0] = IKatan2(new_r10, new_r11);
                                                  sj2array[0] = IKsin(j2array[0]);
                                                  cj2array[0] = IKcos(j2array[0]);
                                                  if (j2array[0] > IKPI) {
                                                    j2array[0] -= IK2PI;
                                                  } else if (j2array[0] < -IKPI) {
                                                    j2array[0] += IK2PI;
                                                  }
                                                  j2valid[0] = true;
                                                  for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                    if (!j2valid[ij2]) {
                                                      continue;
                                                    }
                                                    _ij2[0] = ij2;
                                                    _ij2[1] = -1;
                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                      if (j2valid[iij2] &&
                                                          IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                              IKFAST_SOLUTION_THRESH) {
                                                        j2valid[iij2] = false;
                                                        _ij2[1] = iij2;
                                                        break;
                                                      }
                                                    }
                                                    j2 = j2array[ij2];
                                                    cj2 = cj2array[ij2];
                                                    sj2 = sj2array[ij2];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x555 = IKcos(j2);
                                                      IkReal x556 = IKsin(j2);
                                                      IkReal x557 = ((1.0) * sj1);
                                                      IkReal x558 = ((1.0) * x555);
                                                      evalcond[0] = (((sj1 * x555)) + new_r20);
                                                      evalcond[1] = ((((-1.0) * x556)) + new_r10);
                                                      evalcond[2] = ((((-1.0) * x558)) + new_r11);
                                                      evalcond[3] = (((cj1 * x556)) + new_r01);
                                                      evalcond[4] = ((((-1.0) * x556 * x557)) + new_r21);
                                                      evalcond[5] = ((((-1.0) * cj1 * x558)) + new_r00);
                                                      evalcond[6] =
                                                          ((((-1.0) * new_r21 * x557)) + ((cj1 * new_r01)) + x556);
                                                      evalcond[7] = (((cj1 * new_r00)) + (((-1.0) * x558)) +
                                                                     (((-1.0) * new_r20 * x557)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 1;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 1;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 1;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j6;
                                                      vinfos[6].indices[0] = _ij6[0];
                                                      vinfos[6].indices[1] = _ij6[1];
                                                      vinfos[6].maxsolutions = _nj6;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            } while (0);
                                            if (bgotonextstatement) {
                                              bool bgotonextstatement = true;
                                              do {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))),
                                                             6.28318530717959)));
                                                evalcond[1] = new_r12;
                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                    IKabs(evalcond[1]) < 0.0000050000000000) {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j2eval[3];
                                                    sj0 = 0;
                                                    cj0 = -1.0;
                                                    j0 = 3.14159265358979;
                                                    j2eval[0] = sj1;
                                                    j2eval[1] = IKsign(sj1);
                                                    j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 ||
                                                        IKabs(j2eval[1]) < 0.0000010000000000 ||
                                                        IKabs(j2eval[2]) < 0.0000010000000000) {
                                                      {
                                                        IkReal j2eval[1];
                                                        sj0 = 0;
                                                        cj0 = -1.0;
                                                        j0 = 3.14159265358979;
                                                        j2eval[0] = sj1;
                                                        if (IKabs(j2eval[0]) < 0.0000010000000000) {
                                                          {
                                                            IkReal j2eval[2];
                                                            sj0 = 0;
                                                            cj0 = -1.0;
                                                            j0 = 3.14159265358979;
                                                            j2eval[0] = cj1;
                                                            j2eval[1] = sj1;
                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 ||
                                                                IKabs(j2eval[1]) < 0.0000010000000000) {
                                                              {
                                                                IkReal evalcond[4];
                                                                bool bgotonextstatement = true;
                                                                do {
                                                                  evalcond[0] =
                                                                      ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((-1.5707963267949) + j1)))),
                                                                               6.28318530717959)));
                                                                  evalcond[1] = new_r22;
                                                                  evalcond[2] = new_r01;
                                                                  evalcond[3] = new_r00;
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j2array[1], cj2array[1], sj2array[1];
                                                                      bool j2valid[1] = {false};
                                                                      _nj2 = 1;
                                                                      if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(((-1.0) * new_r20)) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr(new_r21) +
                                                                                IKsqr(((-1.0) * new_r20)) - 1) <=
                                                                              IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                      sj2array[0] = IKsin(j2array[0]);
                                                                      cj2array[0] = IKcos(j2array[0]);
                                                                      if (j2array[0] > IKPI) {
                                                                        j2array[0] -= IK2PI;
                                                                      } else if (j2array[0] < -IKPI) {
                                                                        j2array[0] += IK2PI;
                                                                      }
                                                                      j2valid[0] = true;
                                                                      for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                        if (!j2valid[ij2]) {
                                                                          continue;
                                                                        }
                                                                        _ij2[0] = ij2;
                                                                        _ij2[1] = -1;
                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                          if (j2valid[iij2] &&
                                                                              IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                                  IKFAST_SOLUTION_THRESH) {
                                                                            j2valid[iij2] = false;
                                                                            _ij2[1] = iij2;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j2 = j2array[ij2];
                                                                        cj2 = cj2array[ij2];
                                                                        sj2 = sj2array[ij2];
                                                                        {
                                                                          IkReal evalcond[4];
                                                                          IkReal x559 = IKcos(j2);
                                                                          IkReal x560 = ((1.0) * (IKsin(j2)));
                                                                          evalcond[0] = (x559 + new_r20);
                                                                          evalcond[1] = (new_r21 + (((-1.0) * x560)));
                                                                          evalcond[2] = ((((-1.0) * new_r10)) +
                                                                                         (((-1.0) * x560)));
                                                                          evalcond[3] = ((((-1.0) * x559)) +
                                                                                         (((-1.0) * new_r11)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH) {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 1;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 1;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 1;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j6;
                                                                          vinfos[6].indices[0] = _ij6[0];
                                                                          vinfos[6].indices[1] = _ij6[1];
                                                                          vinfos[6].maxsolutions = _nj6;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement) {
                                                                  bool bgotonextstatement = true;
                                                                  do {
                                                                    evalcond[0] =
                                                                        ((-3.14159265358979) +
                                                                         (IKfmod(((3.14159265358979) +
                                                                                  (IKabs(((1.5707963267949) + j1)))),
                                                                                 6.28318530717959)));
                                                                    evalcond[1] = new_r22;
                                                                    evalcond[2] = new_r01;
                                                                    evalcond[3] = new_r00;
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                        bool j2valid[1] = {false};
                                                                        _nj2 = 1;
                                                                        if (IKabs(((-1.0) * new_r21)) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(IKsqr(((-1.0) * new_r21)) +
                                                                                  IKsqr(new_r20) - 1) <=
                                                                                IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j2array[0] =
                                                                            IKatan2(((-1.0) * new_r21), new_r20);
                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                        if (j2array[0] > IKPI) {
                                                                          j2array[0] -= IK2PI;
                                                                        } else if (j2array[0] < -IKPI) {
                                                                          j2array[0] += IK2PI;
                                                                        }
                                                                        j2valid[0] = true;
                                                                        for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                          if (!j2valid[ij2]) {
                                                                            continue;
                                                                          }
                                                                          _ij2[0] = ij2;
                                                                          _ij2[1] = -1;
                                                                          for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                            if (j2valid[iij2] &&
                                                                                IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                                    IKFAST_SOLUTION_THRESH) {
                                                                              j2valid[iij2] = false;
                                                                              _ij2[1] = iij2;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j2 = j2array[ij2];
                                                                          cj2 = cj2array[ij2];
                                                                          sj2 = sj2array[ij2];
                                                                          {
                                                                            IkReal evalcond[4];
                                                                            IkReal x561 = IKsin(j2);
                                                                            IkReal x562 = ((1.0) * (IKcos(j2)));
                                                                            evalcond[0] = (x561 + new_r21);
                                                                            evalcond[1] = (new_r20 + (((-1.0) * x562)));
                                                                            evalcond[2] = ((((-1.0) * x561)) +
                                                                                           (((-1.0) * new_r10)));
                                                                            evalcond[3] = ((((-1.0) * new_r11)) +
                                                                                           (((-1.0) * x562)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH) {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<
                                                                                IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement) {
                                                                    bool bgotonextstatement = true;
                                                                    do {
                                                                      evalcond[0] =
                                                                          ((-3.14159265358979) +
                                                                           (IKfmod(((3.14159265358979) + (IKabs(j1))),
                                                                                   6.28318530717959)));
                                                                      evalcond[1] = new_r20;
                                                                      evalcond[2] = new_r02;
                                                                      evalcond[3] = new_r21;
                                                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                          IkReal j2array[1], cj2array[1], sj2array[1];
                                                                          bool j2valid[1] = {false};
                                                                          _nj2 = 1;
                                                                          if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(((-1.0) * new_r11)) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(IKsqr(new_r01) +
                                                                                    IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                                  IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                          j2array[0] =
                                                                              IKatan2(new_r01, ((-1.0) * new_r11));
                                                                          sj2array[0] = IKsin(j2array[0]);
                                                                          cj2array[0] = IKcos(j2array[0]);
                                                                          if (j2array[0] > IKPI) {
                                                                            j2array[0] -= IK2PI;
                                                                          } else if (j2array[0] < -IKPI) {
                                                                            j2array[0] += IK2PI;
                                                                          }
                                                                          j2valid[0] = true;
                                                                          for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                            if (!j2valid[ij2]) {
                                                                              continue;
                                                                            }
                                                                            _ij2[0] = ij2;
                                                                            _ij2[1] = -1;
                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                              if (j2valid[iij2] &&
                                                                                  IKabs(cj2array[ij2] -
                                                                                        cj2array[iij2]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj2array[ij2] -
                                                                                        sj2array[iij2]) <
                                                                                      IKFAST_SOLUTION_THRESH) {
                                                                                j2valid[iij2] = false;
                                                                                _ij2[1] = iij2;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j2 = j2array[ij2];
                                                                            cj2 = cj2array[ij2];
                                                                            sj2 = sj2array[ij2];
                                                                            {
                                                                              IkReal evalcond[4];
                                                                              IkReal x563 = IKsin(j2);
                                                                              IkReal x564 = ((1.0) * (IKcos(j2)));
                                                                              evalcond[0] =
                                                                                  (x563 + (((-1.0) * new_r01)));
                                                                              evalcond[1] = ((((-1.0) * x563)) +
                                                                                             (((-1.0) * new_r10)));
                                                                              evalcond[2] = ((((-1.0) * new_r11)) +
                                                                                             (((-1.0) * x564)));
                                                                              evalcond[3] = ((((-1.0) * new_r00)) +
                                                                                             (((-1.0) * x564)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH) {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<
                                                                                  IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 1;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 1;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 1;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 1;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j6;
                                                                              vinfos[6].indices[0] = _ij6[0];
                                                                              vinfos[6].indices[1] = _ij6[1];
                                                                              vinfos[6].maxsolutions = _nj6;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement) {
                                                                      bool bgotonextstatement = true;
                                                                      do {
                                                                        evalcond[0] =
                                                                            ((-3.14159265358979) +
                                                                             (IKfmod(
                                                                                 ((3.14159265358979) +
                                                                                  (IKabs(((-3.14159265358979) + j1)))),
                                                                                 6.28318530717959)));
                                                                        evalcond[1] = new_r20;
                                                                        evalcond[2] = new_r02;
                                                                        evalcond[3] = new_r21;
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                            IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                            IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                            IKabs(evalcond[3]) < 0.0000050000000000) {
                                                                          bgotonextstatement = false;
                                                                          {
                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                            bool j2valid[1] = {false};
                                                                            _nj2 = 1;
                                                                            if (IKabs(((-1.0) * new_r10)) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(new_r00) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                                      IKsqr(new_r00) - 1) <=
                                                                                    IKFAST_SINCOS_THRESH)
                                                                              continue;
                                                                            j2array[0] =
                                                                                IKatan2(((-1.0) * new_r10), new_r00);
                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                            if (j2array[0] > IKPI) {
                                                                              j2array[0] -= IK2PI;
                                                                            } else if (j2array[0] < -IKPI) {
                                                                              j2array[0] += IK2PI;
                                                                            }
                                                                            j2valid[0] = true;
                                                                            for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                              if (!j2valid[ij2]) {
                                                                                continue;
                                                                              }
                                                                              _ij2[0] = ij2;
                                                                              _ij2[1] = -1;
                                                                              for (int iij2 = ij2 + 1; iij2 < 1;
                                                                                   ++iij2) {
                                                                                if (j2valid[iij2] &&
                                                                                    IKabs(cj2array[ij2] -
                                                                                          cj2array[iij2]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj2array[ij2] -
                                                                                          sj2array[iij2]) <
                                                                                        IKFAST_SOLUTION_THRESH) {
                                                                                  j2valid[iij2] = false;
                                                                                  _ij2[1] = iij2;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j2 = j2array[ij2];
                                                                              cj2 = cj2array[ij2];
                                                                              sj2 = sj2array[ij2];
                                                                              {
                                                                                IkReal evalcond[4];
                                                                                IkReal x565 = IKcos(j2);
                                                                                IkReal x566 = ((1.0) * (IKsin(j2)));
                                                                                evalcond[0] =
                                                                                    (x565 + (((-1.0) * new_r00)));
                                                                                evalcond[1] = ((((-1.0) * new_r10)) +
                                                                                               (((-1.0) * x566)));
                                                                                evalcond[2] = ((((-1.0) * x565)) +
                                                                                               (((-1.0) * new_r11)));
                                                                                evalcond[3] = ((((-1.0) * new_r01)) +
                                                                                               (((-1.0) * x566)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH) {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 1;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 1;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 1;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      } while (0);
                                                                      if (bgotonextstatement) {
                                                                        bool bgotonextstatement = true;
                                                                        do {
                                                                          evalcond[0] =
                                                                              ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                          if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                              IkReal j2array[1], cj2array[1],
                                                                                  sj2array[1];
                                                                              bool j2valid[1] = {false};
                                                                              _nj2 = 1;
                                                                              if (IKabs(((-1.0) * new_r10)) <
                                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                                  IKabs(((-1.0) * new_r11)) <
                                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                                  IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                                        IKsqr(((-1.0) * new_r11)) -
                                                                                        1) <= IKFAST_SINCOS_THRESH)
                                                                                continue;
                                                                              j2array[0] = IKatan2(((-1.0) * new_r10),
                                                                                                   ((-1.0) * new_r11));
                                                                              sj2array[0] = IKsin(j2array[0]);
                                                                              cj2array[0] = IKcos(j2array[0]);
                                                                              if (j2array[0] > IKPI) {
                                                                                j2array[0] -= IK2PI;
                                                                              } else if (j2array[0] < -IKPI) {
                                                                                j2array[0] += IK2PI;
                                                                              }
                                                                              j2valid[0] = true;
                                                                              for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                                if (!j2valid[ij2]) {
                                                                                  continue;
                                                                                }
                                                                                _ij2[0] = ij2;
                                                                                _ij2[1] = -1;
                                                                                for (int iij2 = ij2 + 1; iij2 < 1;
                                                                                     ++iij2) {
                                                                                  if (j2valid[iij2] &&
                                                                                      IKabs(cj2array[ij2] -
                                                                                            cj2array[iij2]) <
                                                                                          IKFAST_SOLUTION_THRESH &&
                                                                                      IKabs(sj2array[ij2] -
                                                                                            sj2array[iij2]) <
                                                                                          IKFAST_SOLUTION_THRESH) {
                                                                                    j2valid[iij2] = false;
                                                                                    _ij2[1] = iij2;
                                                                                    break;
                                                                                  }
                                                                                }
                                                                                j2 = j2array[ij2];
                                                                                cj2 = cj2array[ij2];
                                                                                sj2 = sj2array[ij2];
                                                                                {
                                                                                  IkReal evalcond[6];
                                                                                  IkReal x567 = IKsin(j2);
                                                                                  IkReal x568 = IKcos(j2);
                                                                                  IkReal x569 = ((-1.0) * x568);
                                                                                  evalcond[0] = x567;
                                                                                  evalcond[1] = (new_r22 * x567);
                                                                                  evalcond[2] = x569;
                                                                                  evalcond[3] = (new_r22 * x569);
                                                                                  evalcond[4] = ((((-1.0) * x567)) +
                                                                                                 (((-1.0) * new_r10)));
                                                                                  evalcond[5] = ((((-1.0) * x568)) +
                                                                                                 (((-1.0) * new_r11)));
                                                                                  if (IKabs(evalcond[0]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[1]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[2]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[3]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[4]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[5]) >
                                                                                          IKFAST_EVALCOND_THRESH) {
                                                                                    continue;
                                                                                  }
                                                                                }

                                                                                {
                                                                                  std::vector<
                                                                                      IkSingleDOFSolutionBase<IkReal> >
                                                                                      vinfos(7);
                                                                                  vinfos[0].jointtype = 1;
                                                                                  vinfos[0].foffset = j0;
                                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                                  vinfos[0].maxsolutions = _nj0;
                                                                                  vinfos[1].jointtype = 1;
                                                                                  vinfos[1].foffset = j1;
                                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                                  vinfos[1].maxsolutions = _nj1;
                                                                                  vinfos[2].jointtype = 1;
                                                                                  vinfos[2].foffset = j2;
                                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                                  vinfos[2].maxsolutions = _nj2;
                                                                                  vinfos[3].jointtype = 1;
                                                                                  vinfos[3].foffset = j3;
                                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                                  vinfos[3].maxsolutions = _nj3;
                                                                                  vinfos[4].jointtype = 1;
                                                                                  vinfos[4].foffset = j4;
                                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                                  vinfos[4].maxsolutions = _nj4;
                                                                                  vinfos[5].jointtype = 1;
                                                                                  vinfos[5].foffset = j5;
                                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                                  vinfos[5].maxsolutions = _nj5;
                                                                                  vinfos[6].jointtype = 1;
                                                                                  vinfos[6].foffset = j6;
                                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                                  vinfos[6].maxsolutions = _nj6;
                                                                                  std::vector<int> vfree(0);
                                                                                  solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        } while (0);
                                                                        if (bgotonextstatement) {
                                                                          bool bgotonextstatement = true;
                                                                          do {
                                                                            if (1) {
                                                                              bgotonextstatement = false;
                                                                              continue;  // branch miss [j2]
                                                                            }
                                                                          } while (0);
                                                                          if (bgotonextstatement) {
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }

                                                            } else {
                                                              {
                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                bool j2valid[1] = {false};
                                                                _nj2 = 1;
                                                                CheckValue<IkReal> x570 =
                                                                    IKPowWithIntegerCheck(cj1, -1);
                                                                if (!x570.valid) {
                                                                  continue;
                                                                }
                                                                CheckValue<IkReal> x571 =
                                                                    IKPowWithIntegerCheck(sj1, -1);
                                                                if (!x571.valid) {
                                                                  continue;
                                                                }
                                                                if (IKabs((new_r01 * (x570.value))) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(((-1.0) * new_r20 * (x571.value))) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr((new_r01 * (x570.value))) +
                                                                          IKsqr(((-1.0) * new_r20 * (x571.value))) -
                                                                          1) <= IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j2array[0] = IKatan2((new_r01 * (x570.value)),
                                                                                     ((-1.0) * new_r20 * (x571.value)));
                                                                sj2array[0] = IKsin(j2array[0]);
                                                                cj2array[0] = IKcos(j2array[0]);
                                                                if (j2array[0] > IKPI) {
                                                                  j2array[0] -= IK2PI;
                                                                } else if (j2array[0] < -IKPI) {
                                                                  j2array[0] += IK2PI;
                                                                }
                                                                j2valid[0] = true;
                                                                for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                                  if (!j2valid[ij2]) {
                                                                    continue;
                                                                  }
                                                                  _ij2[0] = ij2;
                                                                  _ij2[1] = -1;
                                                                  for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                    if (j2valid[iij2] &&
                                                                        IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                            IKFAST_SOLUTION_THRESH) {
                                                                      j2valid[iij2] = false;
                                                                      _ij2[1] = iij2;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j2 = j2array[ij2];
                                                                  cj2 = cj2array[ij2];
                                                                  sj2 = sj2array[ij2];
                                                                  {
                                                                    IkReal evalcond[8];
                                                                    IkReal x572 = IKsin(j2);
                                                                    IkReal x573 = IKcos(j2);
                                                                    IkReal x574 = ((1.0) * new_r00);
                                                                    IkReal x575 = ((1.0) * sj1);
                                                                    IkReal x576 = ((1.0) * new_r01);
                                                                    IkReal x577 = ((1.0) * x573);
                                                                    evalcond[0] = (((sj1 * x573)) + new_r20);
                                                                    evalcond[1] = (new_r21 + (((-1.0) * x572 * x575)));
                                                                    evalcond[2] =
                                                                        ((((-1.0) * x572)) + (((-1.0) * new_r10)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * x577)) + (((-1.0) * new_r11)));
                                                                    evalcond[4] = ((((-1.0) * x576)) + ((cj1 * x572)));
                                                                    evalcond[5] =
                                                                        ((((-1.0) * cj1 * x577)) + (((-1.0) * x574)));
                                                                    evalcond[6] = ((((-1.0) * cj1 * x576)) + x572 +
                                                                                   (((-1.0) * new_r21 * x575)));
                                                                    evalcond[7] =
                                                                        ((((-1.0) * cj1 * x574)) + (((-1.0) * x577)) +
                                                                         (((-1.0) * new_r20 * x575)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                        vinfos(7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }

                                                        } else {
                                                          {
                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                            bool j2valid[1] = {false};
                                                            _nj2 = 1;
                                                            CheckValue<IkReal> x578 = IKPowWithIntegerCheck(sj1, -1);
                                                            if (!x578.valid) {
                                                              continue;
                                                            }
                                                            if (IKabs((new_r21 * (x578.value))) <
                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr((new_r21 * (x578.value))) +
                                                                      IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j2array[0] =
                                                                IKatan2((new_r21 * (x578.value)), ((-1.0) * new_r11));
                                                            sj2array[0] = IKsin(j2array[0]);
                                                            cj2array[0] = IKcos(j2array[0]);
                                                            if (j2array[0] > IKPI) {
                                                              j2array[0] -= IK2PI;
                                                            } else if (j2array[0] < -IKPI) {
                                                              j2array[0] += IK2PI;
                                                            }
                                                            j2valid[0] = true;
                                                            for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                              if (!j2valid[ij2]) {
                                                                continue;
                                                              }
                                                              _ij2[0] = ij2;
                                                              _ij2[1] = -1;
                                                              for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                                if (j2valid[iij2] &&
                                                                    IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                        IKFAST_SOLUTION_THRESH) {
                                                                  j2valid[iij2] = false;
                                                                  _ij2[1] = iij2;
                                                                  break;
                                                                }
                                                              }
                                                              j2 = j2array[ij2];
                                                              cj2 = cj2array[ij2];
                                                              sj2 = sj2array[ij2];
                                                              {
                                                                IkReal evalcond[8];
                                                                IkReal x579 = IKsin(j2);
                                                                IkReal x580 = IKcos(j2);
                                                                IkReal x581 = ((1.0) * new_r00);
                                                                IkReal x582 = ((1.0) * sj1);
                                                                IkReal x583 = ((1.0) * new_r01);
                                                                IkReal x584 = ((1.0) * x580);
                                                                evalcond[0] = (((sj1 * x580)) + new_r20);
                                                                evalcond[1] = ((((-1.0) * x579 * x582)) + new_r21);
                                                                evalcond[2] =
                                                                    ((((-1.0) * x579)) + (((-1.0) * new_r10)));
                                                                evalcond[3] =
                                                                    ((((-1.0) * new_r11)) + (((-1.0) * x584)));
                                                                evalcond[4] = (((cj1 * x579)) + (((-1.0) * x583)));
                                                                evalcond[5] =
                                                                    ((((-1.0) * cj1 * x584)) + (((-1.0) * x581)));
                                                                evalcond[6] = ((((-1.0) * new_r21 * x582)) + x579 +
                                                                               (((-1.0) * cj1 * x583)));
                                                                evalcond[7] =
                                                                    ((((-1.0) * new_r20 * x582)) +
                                                                     (((-1.0) * cj1 * x581)) + (((-1.0) * x584)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 1;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }

                                                    } else {
                                                      {
                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                        bool j2valid[1] = {false};
                                                        _nj2 = 1;
                                                        CheckValue<IkReal> x585 =
                                                            IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                        if (!x585.valid) {
                                                          continue;
                                                        }
                                                        CheckValue<IkReal> x586 = IKatan2WithCheck(
                                                            IkReal(new_r21), IkReal(((-1.0) * new_r20)),
                                                            IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x586.valid) {
                                                          continue;
                                                        }
                                                        j2array[0] =
                                                            ((-1.5707963267949) + (((1.5707963267949) * (x585.value))) +
                                                             (x586.value));
                                                        sj2array[0] = IKsin(j2array[0]);
                                                        cj2array[0] = IKcos(j2array[0]);
                                                        if (j2array[0] > IKPI) {
                                                          j2array[0] -= IK2PI;
                                                        } else if (j2array[0] < -IKPI) {
                                                          j2array[0] += IK2PI;
                                                        }
                                                        j2valid[0] = true;
                                                        for (int ij2 = 0; ij2 < 1; ++ij2) {
                                                          if (!j2valid[ij2]) {
                                                            continue;
                                                          }
                                                          _ij2[0] = ij2;
                                                          _ij2[1] = -1;
                                                          for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                                            if (j2valid[iij2] &&
                                                                IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j2valid[iij2] = false;
                                                              _ij2[1] = iij2;
                                                              break;
                                                            }
                                                          }
                                                          j2 = j2array[ij2];
                                                          cj2 = cj2array[ij2];
                                                          sj2 = sj2array[ij2];
                                                          {
                                                            IkReal evalcond[8];
                                                            IkReal x587 = IKsin(j2);
                                                            IkReal x588 = IKcos(j2);
                                                            IkReal x589 = ((1.0) * new_r00);
                                                            IkReal x590 = ((1.0) * sj1);
                                                            IkReal x591 = ((1.0) * new_r01);
                                                            IkReal x592 = ((1.0) * x588);
                                                            evalcond[0] = (((sj1 * x588)) + new_r20);
                                                            evalcond[1] = ((((-1.0) * x587 * x590)) + new_r21);
                                                            evalcond[2] = ((((-1.0) * x587)) + (((-1.0) * new_r10)));
                                                            evalcond[3] = ((((-1.0) * x592)) + (((-1.0) * new_r11)));
                                                            evalcond[4] = ((((-1.0) * x591)) + ((cj1 * x587)));
                                                            evalcond[5] = ((((-1.0) * cj1 * x592)) + (((-1.0) * x589)));
                                                            evalcond[6] = ((((-1.0) * new_r21 * x590)) +
                                                                           (((-1.0) * cj1 * x591)) + x587);
                                                            evalcond[7] = ((((-1.0) * new_r20 * x590)) +
                                                                           (((-1.0) * x592)) + (((-1.0) * cj1 * x589)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH) {
                                                              continue;
                                                            }
                                                          }

                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 1;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 1;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 1;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j6;
                                                            vinfos[6].indices[0] = _ij6[0];
                                                            vinfos[6].indices[1] = _ij6[1];
                                                            vinfos[6].maxsolutions = _nj6;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement) {
                                                bool bgotonextstatement = true;
                                                do {
                                                  evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000) {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j2eval[1];
                                                      new_r21 = 0;
                                                      new_r20 = 0;
                                                      new_r02 = 0;
                                                      new_r12 = 0;
                                                      j2eval[0] = IKabs(new_r22);
                                                      if (IKabs(j2eval[0]) < 0.0000000100000000) {
                                                        continue;  // no branches [j2]

                                                      } else {
                                                        IkReal op[2 + 1], zeror[2];
                                                        int numroots;
                                                        op[0] = new_r22;
                                                        op[1] = 0;
                                                        op[2] = ((-1.0) * new_r22);
                                                        polyroots2(op, zeror, numroots);
                                                        IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
                                                        int numsolutions = 0;
                                                        for (int ij2 = 0; ij2 < numroots; ++ij2) {
                                                          IkReal htj2 = zeror[ij2];
                                                          tempj2array[0] = ((2.0) * (atan(htj2)));
                                                          for (int kj2 = 0; kj2 < 1; ++kj2) {
                                                            j2array[numsolutions] = tempj2array[kj2];
                                                            if (j2array[numsolutions] > IKPI) {
                                                              j2array[numsolutions] -= IK2PI;
                                                            } else if (j2array[numsolutions] < -IKPI) {
                                                              j2array[numsolutions] += IK2PI;
                                                            }
                                                            sj2array[numsolutions] = IKsin(j2array[numsolutions]);
                                                            cj2array[numsolutions] = IKcos(j2array[numsolutions]);
                                                            numsolutions++;
                                                          }
                                                        }
                                                        bool j2valid[2] = {true, true};
                                                        _nj2 = 2;
                                                        for (int ij2 = 0; ij2 < numsolutions; ++ij2) {
                                                          if (!j2valid[ij2]) {
                                                            continue;
                                                          }
                                                          j2 = j2array[ij2];
                                                          cj2 = cj2array[ij2];
                                                          sj2 = sj2array[ij2];
                                                          htj2 = IKtan(j2 / 2);

                                                          _ij2[0] = ij2;
                                                          _ij2[1] = -1;
                                                          for (int iij2 = ij2 + 1; iij2 < numsolutions; ++iij2) {
                                                            if (j2valid[iij2] &&
                                                                IKabs(cj2array[ij2] - cj2array[iij2]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj2array[ij2] - sj2array[iij2]) <
                                                                    IKFAST_SOLUTION_THRESH) {
                                                              j2valid[iij2] = false;
                                                              _ij2[1] = iij2;
                                                              break;
                                                            }
                                                          }
                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 1;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 1;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 1;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j6;
                                                            vinfos[6].indices[0] = _ij6[0];
                                                            vinfos[6].indices[1] = _ij6[1];
                                                            vinfos[6].maxsolutions = _nj6;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement) {
                                                  bool bgotonextstatement = true;
                                                  do {
                                                    if (1) {
                                                      bgotonextstatement = false;
                                                      continue;  // branch miss [j2]
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }

                            } else {
                              {
                                IkReal j2array[1], cj2array[1], sj2array[1];
                                bool j2valid[1] = {false};
                                _nj2 = 1;
                                CheckValue<IkReal> x594 = IKPowWithIntegerCheck(sj1, -1);
                                if (!x594.valid) {
                                  continue;
                                }
                                IkReal x593 = x594.value;
                                CheckValue<IkReal> x595 = IKPowWithIntegerCheck(cj0, -1);
                                if (!x595.valid) {
                                  continue;
                                }
                                CheckValue<IkReal> x596 = IKPowWithIntegerCheck(cj1, -1);
                                if (!x596.valid) {
                                  continue;
                                }
                                if (IKabs((x593 * (x595.value) * (x596.value) *
                                           ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(((-1.0) * new_r20 * x593)) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr((x593 * (x595.value) * (x596.value) *
                                                 ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) +
                                          IKsqr(((-1.0) * new_r20 * x593)) - 1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j2array[0] = IKatan2((x593 * (x595.value) * (x596.value) *
                                                      ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1))))),
                                                     ((-1.0) * new_r20 * x593));
                                sj2array[0] = IKsin(j2array[0]);
                                cj2array[0] = IKcos(j2array[0]);
                                if (j2array[0] > IKPI) {
                                  j2array[0] -= IK2PI;
                                } else if (j2array[0] < -IKPI) {
                                  j2array[0] += IK2PI;
                                }
                                j2valid[0] = true;
                                for (int ij2 = 0; ij2 < 1; ++ij2) {
                                  if (!j2valid[ij2]) {
                                    continue;
                                  }
                                  _ij2[0] = ij2;
                                  _ij2[1] = -1;
                                  for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                    if (j2valid[iij2] &&
                                        IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                      j2valid[iij2] = false;
                                      _ij2[1] = iij2;
                                      break;
                                    }
                                  }
                                  j2 = j2array[ij2];
                                  cj2 = cj2array[ij2];
                                  sj2 = sj2array[ij2];
                                  {
                                    IkReal evalcond[12];
                                    IkReal x597 = IKsin(j2);
                                    IkReal x598 = IKcos(j2);
                                    IkReal x599 = ((1.0) * sj1);
                                    IkReal x600 = ((1.0) * sj0);
                                    IkReal x601 = (cj0 * new_r00);
                                    IkReal x602 = (cj0 * cj1);
                                    IkReal x603 = (new_r11 * sj0);
                                    IkReal x604 = (new_r10 * sj0);
                                    IkReal x605 = ((1.0) * x598);
                                    IkReal x606 = (cj1 * x597);
                                    IkReal x607 = ((1.0) * x597);
                                    evalcond[0] = (((sj1 * x598)) + new_r20);
                                    evalcond[1] = ((((-1.0) * x597 * x599)) + new_r21);
                                    evalcond[2] = (x603 + x606 + ((cj0 * new_r01)));
                                    evalcond[3] = ((((-1.0) * x607)) + ((cj0 * new_r10)) + (((-1.0) * new_r00 * x600)));
                                    evalcond[4] = ((((-1.0) * x605)) + (((-1.0) * new_r01 * x600)) + ((cj0 * new_r11)));
                                    evalcond[5] = (((x597 * x602)) + ((sj0 * x598)) + new_r01);
                                    evalcond[6] = ((((-1.0) * cj1 * x605)) + x601 + x604);
                                    evalcond[7] = ((((-1.0) * x602 * x605)) + ((sj0 * x597)) + new_r00);
                                    evalcond[8] = (((sj0 * x606)) + new_r11 + (((-1.0) * cj0 * x605)));
                                    evalcond[9] = (new_r10 + (((-1.0) * cj0 * x607)) + (((-1.0) * cj1 * x598 * x600)));
                                    evalcond[10] =
                                        ((((-1.0) * new_r21 * x599)) + ((cj1 * x603)) + x597 + ((new_r01 * x602)));
                                    evalcond[11] = ((((-1.0) * new_r20 * x599)) + ((cj1 * x601)) + ((cj1 * x604)) +
                                                    (((-1.0) * x605)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j6;
                                    vinfos[6].indices[0] = _ij6[0];
                                    vinfos[6].indices[1] = _ij6[1];
                                    vinfos[6].maxsolutions = _nj6;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }

                        } else {
                          {
                            IkReal j2array[1], cj2array[1], sj2array[1];
                            bool j2valid[1] = {false};
                            _nj2 = 1;
                            CheckValue<IkReal> x609 = IKPowWithIntegerCheck(sj1, -1);
                            if (!x609.valid) {
                              continue;
                            }
                            IkReal x608 = x609.value;
                            CheckValue<IkReal> x610 = IKPowWithIntegerCheck(sj0, -1);
                            if (!x610.valid) {
                              continue;
                            }
                            if (IKabs((x608 * (x610.value) *
                                       (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) <
                                    IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(((-1.0) * new_r20 * x608)) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(IKsqr((x608 * (x610.value) *
                                             (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) +
                                      IKsqr(((-1.0) * new_r20 * x608)) - 1) <= IKFAST_SINCOS_THRESH)
                              continue;
                            j2array[0] = IKatan2((x608 * (x610.value) *
                                                  (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1))))),
                                                 ((-1.0) * new_r20 * x608));
                            sj2array[0] = IKsin(j2array[0]);
                            cj2array[0] = IKcos(j2array[0]);
                            if (j2array[0] > IKPI) {
                              j2array[0] -= IK2PI;
                            } else if (j2array[0] < -IKPI) {
                              j2array[0] += IK2PI;
                            }
                            j2valid[0] = true;
                            for (int ij2 = 0; ij2 < 1; ++ij2) {
                              if (!j2valid[ij2]) {
                                continue;
                              }
                              _ij2[0] = ij2;
                              _ij2[1] = -1;
                              for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                                  j2valid[iij2] = false;
                                  _ij2[1] = iij2;
                                  break;
                                }
                              }
                              j2 = j2array[ij2];
                              cj2 = cj2array[ij2];
                              sj2 = sj2array[ij2];
                              {
                                IkReal evalcond[12];
                                IkReal x611 = IKsin(j2);
                                IkReal x612 = IKcos(j2);
                                IkReal x613 = ((1.0) * sj1);
                                IkReal x614 = ((1.0) * sj0);
                                IkReal x615 = (cj0 * new_r00);
                                IkReal x616 = (cj0 * cj1);
                                IkReal x617 = (new_r11 * sj0);
                                IkReal x618 = (new_r10 * sj0);
                                IkReal x619 = ((1.0) * x612);
                                IkReal x620 = (cj1 * x611);
                                IkReal x621 = ((1.0) * x611);
                                evalcond[0] = (((sj1 * x612)) + new_r20);
                                evalcond[1] = ((((-1.0) * x611 * x613)) + new_r21);
                                evalcond[2] = (x617 + x620 + ((cj0 * new_r01)));
                                evalcond[3] = ((((-1.0) * x621)) + (((-1.0) * new_r00 * x614)) + ((cj0 * new_r10)));
                                evalcond[4] = ((((-1.0) * x619)) + ((cj0 * new_r11)) + (((-1.0) * new_r01 * x614)));
                                evalcond[5] = (((sj0 * x612)) + ((x611 * x616)) + new_r01);
                                evalcond[6] = ((((-1.0) * cj1 * x619)) + x618 + x615);
                                evalcond[7] = (((sj0 * x611)) + new_r00 + (((-1.0) * x616 * x619)));
                                evalcond[8] = ((((-1.0) * cj0 * x619)) + ((sj0 * x620)) + new_r11);
                                evalcond[9] = ((((-1.0) * cj0 * x621)) + (((-1.0) * cj1 * x612 * x614)) + new_r10);
                                evalcond[10] =
                                    ((((-1.0) * new_r21 * x613)) + ((cj1 * x617)) + x611 + ((new_r01 * x616)));
                                evalcond[11] =
                                    ((((-1.0) * x619)) + ((cj1 * x615)) + ((cj1 * x618)) + (((-1.0) * new_r20 * x613)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 1;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 1;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 1;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j6;
                                vinfos[6].indices[0] = _ij6[0];
                                vinfos[6].indices[1] = _ij6[1];
                                vinfos[6].maxsolutions = _nj6;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }

                    } else {
                      {
                        IkReal j2array[1], cj2array[1], sj2array[1];
                        bool j2valid[1] = {false};
                        _nj2 = 1;
                        CheckValue<IkReal> x622 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                        if (!x622.valid) {
                          continue;
                        }
                        CheckValue<IkReal> x623 =
                            IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                        if (!x623.valid) {
                          continue;
                        }
                        j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x622.value))) + (x623.value));
                        sj2array[0] = IKsin(j2array[0]);
                        cj2array[0] = IKcos(j2array[0]);
                        if (j2array[0] > IKPI) {
                          j2array[0] -= IK2PI;
                        } else if (j2array[0] < -IKPI) {
                          j2array[0] += IK2PI;
                        }
                        j2valid[0] = true;
                        for (int ij2 = 0; ij2 < 1; ++ij2) {
                          if (!j2valid[ij2]) {
                            continue;
                          }
                          _ij2[0] = ij2;
                          _ij2[1] = -1;
                          for (int iij2 = ij2 + 1; iij2 < 1; ++iij2) {
                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH) {
                              j2valid[iij2] = false;
                              _ij2[1] = iij2;
                              break;
                            }
                          }
                          j2 = j2array[ij2];
                          cj2 = cj2array[ij2];
                          sj2 = sj2array[ij2];
                          {
                            IkReal evalcond[12];
                            IkReal x624 = IKsin(j2);
                            IkReal x625 = IKcos(j2);
                            IkReal x626 = ((1.0) * sj1);
                            IkReal x627 = ((1.0) * sj0);
                            IkReal x628 = (cj0 * new_r00);
                            IkReal x629 = (cj0 * cj1);
                            IkReal x630 = (new_r11 * sj0);
                            IkReal x631 = (new_r10 * sj0);
                            IkReal x632 = ((1.0) * x625);
                            IkReal x633 = (cj1 * x624);
                            IkReal x634 = ((1.0) * x624);
                            evalcond[0] = (((sj1 * x625)) + new_r20);
                            evalcond[1] = ((((-1.0) * x624 * x626)) + new_r21);
                            evalcond[2] = (x633 + x630 + ((cj0 * new_r01)));
                            evalcond[3] = ((((-1.0) * new_r00 * x627)) + (((-1.0) * x634)) + ((cj0 * new_r10)));
                            evalcond[4] = ((((-1.0) * new_r01 * x627)) + (((-1.0) * x632)) + ((cj0 * new_r11)));
                            evalcond[5] = (((sj0 * x625)) + ((x624 * x629)) + new_r01);
                            evalcond[6] = ((((-1.0) * cj1 * x632)) + x628 + x631);
                            evalcond[7] = ((((-1.0) * x629 * x632)) + ((sj0 * x624)) + new_r00);
                            evalcond[8] = ((((-1.0) * cj0 * x632)) + ((sj0 * x633)) + new_r11);
                            evalcond[9] = ((((-1.0) * cj1 * x625 * x627)) + (((-1.0) * cj0 * x634)) + new_r10);
                            evalcond[10] = (((new_r01 * x629)) + (((-1.0) * new_r21 * x626)) + x624 + ((cj1 * x630)));
                            evalcond[11] =
                                ((((-1.0) * x632)) + (((-1.0) * new_r20 * x626)) + ((cj1 * x631)) + ((cj1 * x628)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH) {
                              continue;
                            }
                          }

                          {
                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                            vinfos[0].jointtype = 1;
                            vinfos[0].foffset = j0;
                            vinfos[0].indices[0] = _ij0[0];
                            vinfos[0].indices[1] = _ij0[1];
                            vinfos[0].maxsolutions = _nj0;
                            vinfos[1].jointtype = 1;
                            vinfos[1].foffset = j1;
                            vinfos[1].indices[0] = _ij1[0];
                            vinfos[1].indices[1] = _ij1[1];
                            vinfos[1].maxsolutions = _nj1;
                            vinfos[2].jointtype = 1;
                            vinfos[2].foffset = j2;
                            vinfos[2].indices[0] = _ij2[0];
                            vinfos[2].indices[1] = _ij2[1];
                            vinfos[2].maxsolutions = _nj2;
                            vinfos[3].jointtype = 1;
                            vinfos[3].foffset = j3;
                            vinfos[3].indices[0] = _ij3[0];
                            vinfos[3].indices[1] = _ij3[1];
                            vinfos[3].maxsolutions = _nj3;
                            vinfos[4].jointtype = 1;
                            vinfos[4].foffset = j4;
                            vinfos[4].indices[0] = _ij4[0];
                            vinfos[4].indices[1] = _ij4[1];
                            vinfos[4].maxsolutions = _nj4;
                            vinfos[5].jointtype = 1;
                            vinfos[5].foffset = j5;
                            vinfos[5].indices[0] = _ij5[0];
                            vinfos[5].indices[1] = _ij5[1];
                            vinfos[5].maxsolutions = _nj5;
                            vinfos[6].jointtype = 1;
                            vinfos[6].foffset = j6;
                            vinfos[6].indices[0] = _ij6[0];
                            vinfos[6].indices[1] = _ij6[1];
                            vinfos[6].maxsolutions = _nj6;
                            std::vector<int> vfree(0);
                            solutions.AddSolution(vinfos, vfree);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  static inline void polyroots3(IkReal rawcoeffs[3 + 1], IkReal rawroots[3], int& numroots) {
    using std::complex;
    if (rawcoeffs[0] == 0) {
      // solve with one reduced degree
      polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for (int i = 0; i < 3; ++i) {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 3; ++i) {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step) {
      bool changed = false;
      for (int i = 0; i < 3; ++i) {
        if (err[i] >= tol) {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 3; ++j) {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 3; ++j) {
            if (i != j) {
              if (roots[i] != roots[j]) {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed) {
        break;
      }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots + 3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for (int i = 0; i < 3; ++i) {
      if (!visited[i]) {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 3; ++j) {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt &&
              (abs(imag(roots[i]) - imag(roots[j])) < 0.002 || abs(imag(roots[i]) + imag(roots[j])) < 0.002) &&
              abs(imag(roots[i])) < 0.002) {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1) {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt) {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
  static inline void polyroots2(IkReal rawcoeffs[2 + 1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1] * rawcoeffs[1] - 4 * rawcoeffs[0] * rawcoeffs[2];
    if (det < 0) {
      numroots = 0;
    } else if (det == 0) {
      rawroots[0] = -0.5 * rawcoeffs[1] / rawcoeffs[0];
      numroots = 1;
    } else {
      det = IKsqrt(det);
      rawroots[0] = (-rawcoeffs[1] + det) / (2 * rawcoeffs[0]);
      rawroots[1] = (-rawcoeffs[1] - det) / (2 * rawcoeffs[0]);  // rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
      numroots = 2;
    }
  }
  static inline void polyroots4(IkReal rawcoeffs[4 + 1], IkReal rawroots[4], int& numroots) {
    using std::complex;
    if (rawcoeffs[0] == 0) {
      // solve with one reduced degree
      polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for (int i = 0; i < 4; ++i) {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 4; ++i) {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step) {
      bool changed = false;
      for (int i = 0; i < 4; ++i) {
        if (err[i] >= tol) {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 4; ++j) {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 4; ++j) {
            if (i != j) {
              if (roots[i] != roots[j]) {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed) {
        break;
      }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots + 4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for (int i = 0; i < 4; ++i) {
      if (!visited[i]) {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 4; ++j) {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt &&
              (abs(imag(roots[i]) - imag(roots[j])) < 0.002 || abs(imag(roots[i]) + imag(roots[j])) < 0.002) &&
              abs(imag(roots[i])) < 0.002) {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1) {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt) {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                          IkSolutionListBase<IkReal>& solutions) {
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                           IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API const char* GetKinematicsHash() {
  return "<robot:GenericRobot - opti7_800 (160455e7654c7353d8d5ccbe8aa7869e)>";
}

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
}  // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif

#endif
